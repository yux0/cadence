// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: task_fetcher.go

// Package replication is a generated GoMock package.
package replication

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	quotas "github.com/uber/cadence/common/quotas"
)

// MockTaskFetcher is a mock of TaskFetcher interface
type MockTaskFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockTaskFetcherMockRecorder
}

// MockTaskFetcherMockRecorder is the mock recorder for MockTaskFetcher
type MockTaskFetcherMockRecorder struct {
	mock *MockTaskFetcher
}

// NewMockTaskFetcher creates a new mock instance
func NewMockTaskFetcher(ctrl *gomock.Controller) *MockTaskFetcher {
	mock := &MockTaskFetcher{ctrl: ctrl}
	mock.recorder = &MockTaskFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskFetcher) EXPECT() *MockTaskFetcherMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTaskFetcher) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockTaskFetcherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTaskFetcher)(nil).Start))
}

// Stop mocks base method
func (m *MockTaskFetcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockTaskFetcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTaskFetcher)(nil).Stop))
}

// GetSourceCluster mocks base method
func (m *MockTaskFetcher) GetSourceCluster() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceCluster")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceCluster indicates an expected call of GetSourceCluster
func (mr *MockTaskFetcherMockRecorder) GetSourceCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceCluster", reflect.TypeOf((*MockTaskFetcher)(nil).GetSourceCluster))
}

// GetRequestChan mocks base method
func (m *MockTaskFetcher) GetRequestChan() chan<- *request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestChan")
	ret0, _ := ret[0].(chan<- *request)
	return ret0
}

// GetRequestChan indicates an expected call of GetRequestChan
func (mr *MockTaskFetcherMockRecorder) GetRequestChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestChan", reflect.TypeOf((*MockTaskFetcher)(nil).GetRequestChan))
}

// GetRateLimiter mocks base method
func (m *MockTaskFetcher) GetRateLimiter() *quotas.DynamicRateLimiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiter")
	ret0, _ := ret[0].(*quotas.DynamicRateLimiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter
func (mr *MockTaskFetcherMockRecorder) GetRateLimiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockTaskFetcher)(nil).GetRateLimiter))
}

// MockTaskFetchers is a mock of TaskFetchers interface
type MockTaskFetchers struct {
	ctrl     *gomock.Controller
	recorder *MockTaskFetchersMockRecorder
}

// MockTaskFetchersMockRecorder is the mock recorder for MockTaskFetchers
type MockTaskFetchersMockRecorder struct {
	mock *MockTaskFetchers
}

// NewMockTaskFetchers creates a new mock instance
func NewMockTaskFetchers(ctrl *gomock.Controller) *MockTaskFetchers {
	mock := &MockTaskFetchers{ctrl: ctrl}
	mock.recorder = &MockTaskFetchersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskFetchers) EXPECT() *MockTaskFetchersMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTaskFetchers) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockTaskFetchersMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTaskFetchers)(nil).Start))
}

// Stop mocks base method
func (m *MockTaskFetchers) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockTaskFetchersMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTaskFetchers)(nil).Stop))
}

// GetFetchers mocks base method
func (m *MockTaskFetchers) GetFetchers() []TaskFetcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFetchers")
	ret0, _ := ret[0].([]TaskFetcher)
	return ret0
}

// GetFetchers indicates an expected call of GetFetchers
func (mr *MockTaskFetchersMockRecorder) GetFetchers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFetchers", reflect.TypeOf((*MockTaskFetchers)(nil).GetFetchers))
}
