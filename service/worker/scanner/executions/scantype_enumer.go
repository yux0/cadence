// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by "enumer -type=ScanType"; DO NOT EDIT.

package executions

import (
	"fmt"
	"strings"
)

const _ScanTypeName = "ConcreteExecutionTypeCurrentExecutionType"

var _ScanTypeIndex = [...]uint8{0, 21, 41}

const _ScanTypeLowerName = "concreteexecutiontypecurrentexecutiontype"

func (i ScanType) String() string {
	if i < 0 || i >= ScanType(len(_ScanTypeIndex)-1) {
		return fmt.Sprintf("ScanType(%d)", i)
	}
	return _ScanTypeName[_ScanTypeIndex[i]:_ScanTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ScanTypeNoOp() {
	var x [1]struct{}
	_ = x[ConcreteExecutionType-(0)]
	_ = x[CurrentExecutionType-(1)]
}

var _ScanTypeValues = []ScanType{ConcreteExecutionType, CurrentExecutionType}

var _ScanTypeNameToValueMap = map[string]ScanType{
	_ScanTypeName[0:21]:       ConcreteExecutionType,
	_ScanTypeLowerName[0:21]:  ConcreteExecutionType,
	_ScanTypeName[21:41]:      CurrentExecutionType,
	_ScanTypeLowerName[21:41]: CurrentExecutionType,
}

var _ScanTypeNames = []string{
	_ScanTypeName[0:21],
	_ScanTypeName[21:41],
}

// ScanTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ScanTypeString(s string) (ScanType, error) {
	if val, ok := _ScanTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _ScanTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ScanType values", s)
}

// ScanTypeValues returns all values of the enum
func ScanTypeValues() []ScanType {
	return _ScanTypeValues
}

// ScanTypeStrings returns a slice of all String values of the enum
func ScanTypeStrings() []string {
	strs := make([]string, len(_ScanTypeNames))
	copy(strs, _ScanTypeNames)
	return strs
}

// IsAScanType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ScanType) IsAScanType() bool {
	for _, v := range _ScanTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
