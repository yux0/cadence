// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by thriftrw-plugin-yarpc
// @generated

package shared

import yarpcerrors "go.uber.org/yarpc/yarpcerrors"

// YARPCErrorCode returns nil for AccessDeniedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *AccessDeniedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for AccessDeniedError.
func (e *AccessDeniedError) YARPCErrorName() string { return "AccessDeniedError" }

// YARPCErrorCode returns nil for BadRequestError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *BadRequestError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for BadRequestError.
func (e *BadRequestError) YARPCErrorName() string { return "BadRequestError" }

// YARPCErrorCode returns nil for CancellationAlreadyRequestedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *CancellationAlreadyRequestedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for CancellationAlreadyRequestedError.
func (e *CancellationAlreadyRequestedError) YARPCErrorName() string {
	return "CancellationAlreadyRequestedError"
}

// YARPCErrorCode returns nil for ClientVersionNotSupportedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *ClientVersionNotSupportedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for ClientVersionNotSupportedError.
func (e *ClientVersionNotSupportedError) YARPCErrorName() string {
	return "ClientVersionNotSupportedError"
}

// YARPCErrorCode returns nil for CurrentBranchChangedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *CurrentBranchChangedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for CurrentBranchChangedError.
func (e *CurrentBranchChangedError) YARPCErrorName() string { return "CurrentBranchChangedError" }

// YARPCErrorCode returns nil for DomainAlreadyExistsError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *DomainAlreadyExistsError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for DomainAlreadyExistsError.
func (e *DomainAlreadyExistsError) YARPCErrorName() string { return "DomainAlreadyExistsError" }

// YARPCErrorCode returns nil for DomainNotActiveError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *DomainNotActiveError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for DomainNotActiveError.
func (e *DomainNotActiveError) YARPCErrorName() string { return "DomainNotActiveError" }

// YARPCErrorCode returns nil for EntityNotExistsError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *EntityNotExistsError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for EntityNotExistsError.
func (e *EntityNotExistsError) YARPCErrorName() string { return "EntityNotExistsError" }

// YARPCErrorCode returns nil for InternalDataInconsistencyError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *InternalDataInconsistencyError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for InternalDataInconsistencyError.
func (e *InternalDataInconsistencyError) YARPCErrorName() string {
	return "InternalDataInconsistencyError"
}

// YARPCErrorCode returns nil for InternalServiceError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *InternalServiceError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for InternalServiceError.
func (e *InternalServiceError) YARPCErrorName() string { return "InternalServiceError" }

// YARPCErrorCode returns nil for LimitExceededError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *LimitExceededError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for LimitExceededError.
func (e *LimitExceededError) YARPCErrorName() string { return "LimitExceededError" }

// YARPCErrorCode returns nil for QueryFailedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *QueryFailedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for QueryFailedError.
func (e *QueryFailedError) YARPCErrorName() string { return "QueryFailedError" }

// YARPCErrorCode returns nil for RemoteSyncMatchedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *RemoteSyncMatchedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for RemoteSyncMatchedError.
func (e *RemoteSyncMatchedError) YARPCErrorName() string { return "RemoteSyncMatchedError" }

// YARPCErrorCode returns nil for RetryTaskV2Error.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *RetryTaskV2Error) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for RetryTaskV2Error.
func (e *RetryTaskV2Error) YARPCErrorName() string { return "RetryTaskV2Error" }

// YARPCErrorCode returns nil for ServiceBusyError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *ServiceBusyError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for ServiceBusyError.
func (e *ServiceBusyError) YARPCErrorName() string { return "ServiceBusyError" }

// YARPCErrorCode returns nil for WorkflowExecutionAlreadyStartedError.
//
// This is derived from the rpc.code annotation on the Thrift exception.
func (e *WorkflowExecutionAlreadyStartedError) YARPCErrorCode() *yarpcerrors.Code {

	return nil
}

// Name is the error name for WorkflowExecutionAlreadyStartedError.
func (e *WorkflowExecutionAlreadyStartedError) YARPCErrorName() string {
	return "WorkflowExecutionAlreadyStartedError"
}
