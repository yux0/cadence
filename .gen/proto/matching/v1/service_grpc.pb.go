// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package matchingv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchingAPIClient is the client API for MatchingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingAPIClient interface {
	// PollForDecisionTask is called by frontend to process DecisionTask from a specific taskList.  A
	// DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
	PollForDecisionTask(ctx context.Context, in *PollForDecisionTaskRequest, opts ...grpc.CallOption) (*PollForDecisionTaskResponse, error)
	// PollForActivityTask is called by frontend to process ActivityTask from a specific taskList.  ActivityTask
	// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
	PollForActivityTask(ctx context.Context, in *PollForActivityTaskRequest, opts ...grpc.CallOption) (*PollForActivityTaskResponse, error)
	// AddDecisionTask is called by the history service when a decision task is scheduled, so that it can be dispatched
	// by the MatchingEngine.
	AddDecisionTask(ctx context.Context, in *AddDecisionTaskRequest, opts ...grpc.CallOption) (*AddDecisionTaskResponse, error)
	// AddActivityTask is called by the history service when a decision task is scheduled, so that it can be dispatched
	// by the MatchingEngine.
	AddActivityTask(ctx context.Context, in *AddActivityTaskRequest, opts ...grpc.CallOption) (*AddActivityTaskResponse, error)
	// QueryWorkflow is called by frontend to query a workflow.
	QueryWorkflow(ctx context.Context, in *QueryWorkflowRequest, opts ...grpc.CallOption) (*QueryWorkflowResponse, error)
	// RespondQueryTaskCompleted is called by frontend to respond query completed.
	RespondQueryTaskCompleted(ctx context.Context, in *RespondQueryTaskCompletedRequest, opts ...grpc.CallOption) (*RespondQueryTaskCompletedResponse, error)
	// CancelOutstandingPoll is called by frontend to unblock long polls on matching for zombie pollers.
	// Our rpc stack does not support context propagation, so when a client connection goes away frontend sees
	// cancellation of context for that handler, but any corresponding calls (long-poll) to matching service does not
	// see the cancellation propagated so it can unblock corresponding long-polls on its end.  This results is tasks
	// being dispatched to zombie pollers in this situation.  This API is added so everytime frontend makes a long-poll
	// api call to matching it passes in a pollerID and then calls this API when it detects client connection is closed
	// to unblock long polls for this poller and prevent tasks being sent to these zombie pollers.
	CancelOutstandingPoll(ctx context.Context, in *CancelOutstandingPollRequest, opts ...grpc.CallOption) (*CancelOutstandingPollResponse, error)
	// DescribeTaskList returns information about the target tasklist, right now this API returns the
	// pollers which polled this tasklist in last few minutes.
	DescribeTaskList(ctx context.Context, in *DescribeTaskListRequest, opts ...grpc.CallOption) (*DescribeTaskListResponse, error)
	// ListTaskListPartitions returns a map of partitionKey and hostAddress for a taskList
	ListTaskListPartitions(ctx context.Context, in *ListTaskListPartitionsRequest, opts ...grpc.CallOption) (*ListTaskListPartitionsResponse, error)
}

type matchingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingAPIClient(cc grpc.ClientConnInterface) MatchingAPIClient {
	return &matchingAPIClient{cc}
}

func (c *matchingAPIClient) PollForDecisionTask(ctx context.Context, in *PollForDecisionTaskRequest, opts ...grpc.CallOption) (*PollForDecisionTaskResponse, error) {
	out := new(PollForDecisionTaskResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/PollForDecisionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) PollForActivityTask(ctx context.Context, in *PollForActivityTaskRequest, opts ...grpc.CallOption) (*PollForActivityTaskResponse, error) {
	out := new(PollForActivityTaskResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/PollForActivityTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) AddDecisionTask(ctx context.Context, in *AddDecisionTaskRequest, opts ...grpc.CallOption) (*AddDecisionTaskResponse, error) {
	out := new(AddDecisionTaskResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/AddDecisionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) AddActivityTask(ctx context.Context, in *AddActivityTaskRequest, opts ...grpc.CallOption) (*AddActivityTaskResponse, error) {
	out := new(AddActivityTaskResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/AddActivityTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) QueryWorkflow(ctx context.Context, in *QueryWorkflowRequest, opts ...grpc.CallOption) (*QueryWorkflowResponse, error) {
	out := new(QueryWorkflowResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/QueryWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) RespondQueryTaskCompleted(ctx context.Context, in *RespondQueryTaskCompletedRequest, opts ...grpc.CallOption) (*RespondQueryTaskCompletedResponse, error) {
	out := new(RespondQueryTaskCompletedResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/RespondQueryTaskCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) CancelOutstandingPoll(ctx context.Context, in *CancelOutstandingPollRequest, opts ...grpc.CallOption) (*CancelOutstandingPollResponse, error) {
	out := new(CancelOutstandingPollResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/CancelOutstandingPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) DescribeTaskList(ctx context.Context, in *DescribeTaskListRequest, opts ...grpc.CallOption) (*DescribeTaskListResponse, error) {
	out := new(DescribeTaskListResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/DescribeTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingAPIClient) ListTaskListPartitions(ctx context.Context, in *ListTaskListPartitionsRequest, opts ...grpc.CallOption) (*ListTaskListPartitionsResponse, error) {
	out := new(ListTaskListPartitionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.matching.v1.MatchingAPI/ListTaskListPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingAPIServer is the server API for MatchingAPI service.
// All implementations must embed UnimplementedMatchingAPIServer
// for forward compatibility
type MatchingAPIServer interface {
	// PollForDecisionTask is called by frontend to process DecisionTask from a specific taskList.  A
	// DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
	PollForDecisionTask(context.Context, *PollForDecisionTaskRequest) (*PollForDecisionTaskResponse, error)
	// PollForActivityTask is called by frontend to process ActivityTask from a specific taskList.  ActivityTask
	// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
	PollForActivityTask(context.Context, *PollForActivityTaskRequest) (*PollForActivityTaskResponse, error)
	// AddDecisionTask is called by the history service when a decision task is scheduled, so that it can be dispatched
	// by the MatchingEngine.
	AddDecisionTask(context.Context, *AddDecisionTaskRequest) (*AddDecisionTaskResponse, error)
	// AddActivityTask is called by the history service when a decision task is scheduled, so that it can be dispatched
	// by the MatchingEngine.
	AddActivityTask(context.Context, *AddActivityTaskRequest) (*AddActivityTaskResponse, error)
	// QueryWorkflow is called by frontend to query a workflow.
	QueryWorkflow(context.Context, *QueryWorkflowRequest) (*QueryWorkflowResponse, error)
	// RespondQueryTaskCompleted is called by frontend to respond query completed.
	RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest) (*RespondQueryTaskCompletedResponse, error)
	// CancelOutstandingPoll is called by frontend to unblock long polls on matching for zombie pollers.
	// Our rpc stack does not support context propagation, so when a client connection goes away frontend sees
	// cancellation of context for that handler, but any corresponding calls (long-poll) to matching service does not
	// see the cancellation propagated so it can unblock corresponding long-polls on its end.  This results is tasks
	// being dispatched to zombie pollers in this situation.  This API is added so everytime frontend makes a long-poll
	// api call to matching it passes in a pollerID and then calls this API when it detects client connection is closed
	// to unblock long polls for this poller and prevent tasks being sent to these zombie pollers.
	CancelOutstandingPoll(context.Context, *CancelOutstandingPollRequest) (*CancelOutstandingPollResponse, error)
	// DescribeTaskList returns information about the target tasklist, right now this API returns the
	// pollers which polled this tasklist in last few minutes.
	DescribeTaskList(context.Context, *DescribeTaskListRequest) (*DescribeTaskListResponse, error)
	// ListTaskListPartitions returns a map of partitionKey and hostAddress for a taskList
	ListTaskListPartitions(context.Context, *ListTaskListPartitionsRequest) (*ListTaskListPartitionsResponse, error)
	mustEmbedUnimplementedMatchingAPIServer()
}

// UnimplementedMatchingAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMatchingAPIServer struct {
}

func (UnimplementedMatchingAPIServer) PollForDecisionTask(context.Context, *PollForDecisionTaskRequest) (*PollForDecisionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForDecisionTask not implemented")
}
func (UnimplementedMatchingAPIServer) PollForActivityTask(context.Context, *PollForActivityTaskRequest) (*PollForActivityTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForActivityTask not implemented")
}
func (UnimplementedMatchingAPIServer) AddDecisionTask(context.Context, *AddDecisionTaskRequest) (*AddDecisionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDecisionTask not implemented")
}
func (UnimplementedMatchingAPIServer) AddActivityTask(context.Context, *AddActivityTaskRequest) (*AddActivityTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActivityTask not implemented")
}
func (UnimplementedMatchingAPIServer) QueryWorkflow(context.Context, *QueryWorkflowRequest) (*QueryWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWorkflow not implemented")
}
func (UnimplementedMatchingAPIServer) RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest) (*RespondQueryTaskCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondQueryTaskCompleted not implemented")
}
func (UnimplementedMatchingAPIServer) CancelOutstandingPoll(context.Context, *CancelOutstandingPollRequest) (*CancelOutstandingPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOutstandingPoll not implemented")
}
func (UnimplementedMatchingAPIServer) DescribeTaskList(context.Context, *DescribeTaskListRequest) (*DescribeTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTaskList not implemented")
}
func (UnimplementedMatchingAPIServer) ListTaskListPartitions(context.Context, *ListTaskListPartitionsRequest) (*ListTaskListPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskListPartitions not implemented")
}
func (UnimplementedMatchingAPIServer) mustEmbedUnimplementedMatchingAPIServer() {}

// UnsafeMatchingAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingAPIServer will
// result in compilation errors.
type UnsafeMatchingAPIServer interface {
	mustEmbedUnimplementedMatchingAPIServer()
}

func RegisterMatchingAPIServer(s grpc.ServiceRegistrar, srv MatchingAPIServer) {
	s.RegisterService(&MatchingAPI_ServiceDesc, srv)
}

func _MatchingAPI_PollForDecisionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollForDecisionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).PollForDecisionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/PollForDecisionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).PollForDecisionTask(ctx, req.(*PollForDecisionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_PollForActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollForActivityTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).PollForActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/PollForActivityTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).PollForActivityTask(ctx, req.(*PollForActivityTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_AddDecisionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDecisionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).AddDecisionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/AddDecisionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).AddDecisionTask(ctx, req.(*AddDecisionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_AddActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivityTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).AddActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/AddActivityTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).AddActivityTask(ctx, req.(*AddActivityTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_QueryWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).QueryWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/QueryWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).QueryWorkflow(ctx, req.(*QueryWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_RespondQueryTaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondQueryTaskCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).RespondQueryTaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/RespondQueryTaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).RespondQueryTaskCompleted(ctx, req.(*RespondQueryTaskCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_CancelOutstandingPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOutstandingPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).CancelOutstandingPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/CancelOutstandingPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).CancelOutstandingPoll(ctx, req.(*CancelOutstandingPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_DescribeTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).DescribeTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/DescribeTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).DescribeTaskList(ctx, req.(*DescribeTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingAPI_ListTaskListPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskListPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingAPIServer).ListTaskListPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.matching.v1.MatchingAPI/ListTaskListPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingAPIServer).ListTaskListPartitions(ctx, req.(*ListTaskListPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingAPI_ServiceDesc is the grpc.ServiceDesc for MatchingAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uber.cadence.matching.v1.MatchingAPI",
	HandlerType: (*MatchingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PollForDecisionTask",
			Handler:    _MatchingAPI_PollForDecisionTask_Handler,
		},
		{
			MethodName: "PollForActivityTask",
			Handler:    _MatchingAPI_PollForActivityTask_Handler,
		},
		{
			MethodName: "AddDecisionTask",
			Handler:    _MatchingAPI_AddDecisionTask_Handler,
		},
		{
			MethodName: "AddActivityTask",
			Handler:    _MatchingAPI_AddActivityTask_Handler,
		},
		{
			MethodName: "QueryWorkflow",
			Handler:    _MatchingAPI_QueryWorkflow_Handler,
		},
		{
			MethodName: "RespondQueryTaskCompleted",
			Handler:    _MatchingAPI_RespondQueryTaskCompleted_Handler,
		},
		{
			MethodName: "CancelOutstandingPoll",
			Handler:    _MatchingAPI_CancelOutstandingPoll_Handler,
		},
		{
			MethodName: "DescribeTaskList",
			Handler:    _MatchingAPI_DescribeTaskList_Handler,
		},
		{
			MethodName: "ListTaskListPartitions",
			Handler:    _MatchingAPI_ListTaskListPartitions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uber/cadence/matching/v1/service.proto",
}
