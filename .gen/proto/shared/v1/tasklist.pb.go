// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/shared/v1/tasklist.proto

package sharedv1

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TaskSource is the source from which a task was produced.
type TaskSource int32

const (
	TASK_SOURCE_INVALID TaskSource = 0
	// Task produced by history service.
	TASK_SOURCE_HISTORY TaskSource = 1
	// Task produced from matching db backlog.
	TASK_SOURCE_DB_BACKLOG TaskSource = 2
)

var TaskSource_name = map[int32]string{
	0: "TASK_SOURCE_INVALID",
	1: "TASK_SOURCE_HISTORY",
	2: "TASK_SOURCE_DB_BACKLOG",
}

var TaskSource_value = map[string]int32{
	"TASK_SOURCE_INVALID":    0,
	"TASK_SOURCE_HISTORY":    1,
	"TASK_SOURCE_DB_BACKLOG": 2,
}

func (TaskSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e97215b1a3d16713, []int{0}
}

func init() {
	proto.RegisterEnum("uber.cadence.shared.v1.TaskSource", TaskSource_name, TaskSource_value)
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/shared/v1/tasklist.proto", fileDescriptor_e97215b1a3d16713)
}

var fileDescriptor_e97215b1a3d16713 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x4d, 0x4a, 0x2d,
	0xd2, 0x4f, 0x4e, 0x4c, 0x49, 0xcd, 0x4b, 0x4e, 0xd5, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1,
	0x2f, 0x33, 0xd4, 0x2f, 0x49, 0x2c, 0xce, 0xce, 0xc9, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x03, 0x29, 0xd3, 0x83, 0x2a, 0xd3, 0x83, 0x28, 0xd3, 0x2b, 0x33, 0xd4, 0x8a,
	0xe2, 0xe2, 0x0a, 0x49, 0x2c, 0xce, 0x0e, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x15, 0x12, 0xe7, 0x12,
	0x0e, 0x71, 0x0c, 0xf6, 0x8e, 0x0f, 0xf6, 0x0f, 0x0d, 0x72, 0x76, 0x8d, 0xf7, 0xf4, 0x0b, 0x73,
	0xf4, 0xf1, 0x74, 0x11, 0x60, 0x40, 0x97, 0xf0, 0xf0, 0x0c, 0x0e, 0xf1, 0x0f, 0x8a, 0x14, 0x60,
	0x14, 0x92, 0xe2, 0x12, 0x43, 0x96, 0x70, 0x71, 0x8a, 0x77, 0x72, 0x74, 0xf6, 0xf6, 0xf1, 0x77,
	0x17, 0x60, 0x72, 0xb2, 0xbb, 0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5,
	0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84,
	0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0x01, 0x71, 0x5c,
	0x99, 0x61, 0x12, 0x1b, 0xd8, 0xe9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x41, 0x61,
	0xf4, 0xe3, 0x00, 0x00, 0x00,
}

func (x TaskSource) String() string {
	s, ok := TaskSource_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
