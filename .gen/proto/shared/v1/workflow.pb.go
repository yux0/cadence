// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/shared/v1/workflow.proto

package sharedv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/uber/cadence/.gen/proto/api/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowState int32

const (
	WORKFLOW_STATE_INVALID   WorkflowState = 0
	WORKFLOW_STATE_CREATED   WorkflowState = 1
	WORKFLOW_STATE_RUNNING   WorkflowState = 2
	WORKFLOW_STATE_COMPLETED WorkflowState = 3
	WORKFLOW_STATE_ZOMBIE    WorkflowState = 4
	WORKFLOW_STATE_VOID      WorkflowState = 5
	WORKFLOW_STATE_CORRUPTED WorkflowState = 6
)

var WorkflowState_name = map[int32]string{
	0: "WORKFLOW_STATE_INVALID",
	1: "WORKFLOW_STATE_CREATED",
	2: "WORKFLOW_STATE_RUNNING",
	3: "WORKFLOW_STATE_COMPLETED",
	4: "WORKFLOW_STATE_ZOMBIE",
	5: "WORKFLOW_STATE_VOID",
	6: "WORKFLOW_STATE_CORRUPTED",
}

var WorkflowState_value = map[string]int32{
	"WORKFLOW_STATE_INVALID":   0,
	"WORKFLOW_STATE_CREATED":   1,
	"WORKFLOW_STATE_RUNNING":   2,
	"WORKFLOW_STATE_COMPLETED": 3,
	"WORKFLOW_STATE_ZOMBIE":    4,
	"WORKFLOW_STATE_VOID":      5,
	"WORKFLOW_STATE_CORRUPTED": 6,
}

func (WorkflowState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ca73ea33aecbb95, []int{0}
}

type ParentExecutionInfo struct {
	DomainId          string                `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DomainName        string                `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	InitiatedId       int64                 `protobuf:"varint,4,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (m *ParentExecutionInfo) Reset()      { *m = ParentExecutionInfo{} }
func (*ParentExecutionInfo) ProtoMessage() {}
func (*ParentExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ca73ea33aecbb95, []int{0}
}
func (m *ParentExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParentExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParentExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParentExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParentExecutionInfo.Merge(m, src)
}
func (m *ParentExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ParentExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ParentExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ParentExecutionInfo proto.InternalMessageInfo

func (m *ParentExecutionInfo) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ParentExecutionInfo) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ParentExecutionInfo) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ParentExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

func init() {
	proto.RegisterEnum("uber.cadence.shared.v1.WorkflowState", WorkflowState_name, WorkflowState_value)
	proto.RegisterType((*ParentExecutionInfo)(nil), "uber.cadence.shared.v1.ParentExecutionInfo")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/shared/v1/workflow.proto", fileDescriptor_7ca73ea33aecbb95)
}

var fileDescriptor_7ca73ea33aecbb95 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x1c, 0xc5, 0x33, 0xdb, 0x75, 0xd9, 0x9d, 0x2a, 0xc4, 0x59, 0x5c, 0xe3, 0x2a, 0x63, 0x14, 0x94,
	0xe2, 0x21, 0x21, 0x7a, 0x17, 0xba, 0x36, 0xca, 0x60, 0x37, 0x29, 0xb3, 0xed, 0x16, 0x7a, 0x09,
	0xd3, 0x64, 0x8a, 0x83, 0x66, 0xa6, 0xc4, 0x34, 0xf5, 0xe8, 0x47, 0xf0, 0x63, 0xf8, 0x51, 0xbc,
	0x08, 0x05, 0x2f, 0x3d, 0xda, 0xf4, 0xe2, 0xb1, 0x1f, 0x41, 0xd2, 0xb4, 0x85, 0x86, 0x5e, 0xdf,
	0xef, 0xbd, 0xc7, 0x83, 0xff, 0x1f, 0xbe, 0x98, 0x0c, 0x79, 0x62, 0x87, 0x2c, 0xe2, 0x32, 0xe4,
	0xf6, 0xd7, 0x4f, 0x2c, 0xe1, 0x91, 0x9d, 0x39, 0xf6, 0x54, 0x25, 0x9f, 0x47, 0x5f, 0xd4, 0xd4,
	0x1a, 0x27, 0x2a, 0x55, 0xe8, 0xa2, 0xb0, 0x59, 0x1b, 0x9b, 0x55, 0xda, 0xac, 0xcc, 0xb9, 0x34,
	0xf7, 0xe2, 0x6c, 0x2c, 0x8a, 0x6c, 0xa8, 0xe2, 0x58, 0xc9, 0x32, 0xf9, 0xfc, 0x37, 0x80, 0xe7,
	0x1d, 0x96, 0x70, 0x99, 0xba, 0xdf, 0x78, 0x38, 0x49, 0x85, 0x92, 0x44, 0x8e, 0x14, 0x7a, 0x0c,
	0xcf, 0x22, 0x15, 0x33, 0x21, 0x03, 0x11, 0x19, 0xc0, 0x04, 0x8d, 0x33, 0x7a, 0x5a, 0x0a, 0x24,
	0x42, 0x4f, 0x61, 0x7d, 0x03, 0x25, 0x8b, 0xb9, 0x71, 0xb4, 0xc6, 0xb0, 0x94, 0x3c, 0x16, 0x73,
	0xd4, 0x83, 0x68, 0xbb, 0x30, 0xe0, 0xdb, 0x5e, 0xa3, 0x66, 0x82, 0x46, 0xfd, 0xf5, 0x4b, 0x6b,
	0x6f, 0x2c, 0x1b, 0x0b, 0x2b, 0x73, 0xac, 0xfe, 0xc6, 0xbe, 0x5b, 0x41, 0xef, 0x4f, 0xab, 0x12,
	0x7a, 0x06, 0xef, 0x0a, 0x29, 0x52, 0xc1, 0x52, 0x1e, 0x15, 0xbb, 0x8e, 0x4d, 0xd0, 0xa8, 0xd1,
	0xfa, 0x4e, 0x23, 0xd1, 0xab, 0x3f, 0x00, 0xde, 0xdb, 0x76, 0xdd, 0xa4, 0x2c, 0xe5, 0xe8, 0x12,
	0x5e, 0xf4, 0x7d, 0xfa, 0xf1, 0x7d, 0xdb, 0xef, 0x07, 0x37, 0xdd, 0x66, 0xd7, 0x0d, 0x88, 0x77,
	0xdb, 0x6c, 0x93, 0x96, 0xae, 0x1d, 0x60, 0xef, 0xa8, 0xdb, 0xec, 0xba, 0x2d, 0x1d, 0x1c, 0x60,
	0xb4, 0xe7, 0x79, 0xc4, 0xfb, 0xa0, 0x1f, 0xa1, 0x27, 0xd0, 0xa8, 0xe6, 0xfc, 0xeb, 0x4e, 0xdb,
	0x2d, 0x92, 0x35, 0xf4, 0x08, 0x3e, 0xa8, 0xd0, 0x81, 0x7f, 0x7d, 0x45, 0x5c, 0xfd, 0x18, 0x3d,
	0x84, 0xe7, 0x15, 0x74, 0xeb, 0x93, 0x96, 0x7e, 0xe7, 0x60, 0x23, 0xa5, 0xbd, 0x4e, 0xd1, 0x78,
	0x72, 0xf5, 0x76, 0xb6, 0xc0, 0xda, 0x7c, 0x81, 0xb5, 0xd5, 0x02, 0x83, 0xef, 0x39, 0x06, 0x3f,
	0x73, 0x0c, 0x7e, 0xe5, 0x18, 0xcc, 0x72, 0x0c, 0xfe, 0xe6, 0x18, 0xfc, 0xcb, 0xb1, 0xb6, 0xca,
	0x31, 0xf8, 0xb1, 0xc4, 0xda, 0x6c, 0x89, 0xb5, 0xf9, 0x12, 0x6b, 0x83, 0xd3, 0xf2, 0x11, 0x32,
	0x67, 0x78, 0xb2, 0x3e, 0xf6, 0x9b, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0x3e, 0x52, 0x7d,
	0x4f, 0x02, 0x00, 0x00,
}

func (x WorkflowState) String() string {
	s, ok := WorkflowState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ParentExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParentExecutionInfo)
	if !ok {
		that2, ok := that.(ParentExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	return true
}
func (this *ParentExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sharedv1.ParentExecutionInfo{")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWorkflow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ParentExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParentExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParentExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatedId != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflow(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParentExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovWorkflow(uint64(m.InitiatedId))
	}
	return n
}

func sovWorkflow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflow(x uint64) (n int) {
	return sovWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ParentExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParentExecutionInfo{`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWorkflow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ParentExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParentExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParentExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflow = fmt.Errorf("proto: unexpected end of group")
)
