// Modifications Copyright (c) 2020 Uber Technologies Inc.

// Copyright (c) 2020 Temporal Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: message.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ArchivalState int32

const (
	ArchivalState_ARCHIVAL_STATE_UNSPECIFIED ArchivalState = 0
	ArchivalState_ARCHIVAL_STATE_DISABLED    ArchivalState = 1
	ArchivalState_ARCHIVAL_STATE_ENABLED     ArchivalState = 2
)

// Enum value maps for ArchivalState.
var (
	ArchivalState_name = map[int32]string{
		0: "ARCHIVAL_STATE_UNSPECIFIED",
		1: "ARCHIVAL_STATE_DISABLED",
		2: "ARCHIVAL_STATE_ENABLED",
	}
	ArchivalState_value = map[string]int32{
		"ARCHIVAL_STATE_UNSPECIFIED": 0,
		"ARCHIVAL_STATE_DISABLED":    1,
		"ARCHIVAL_STATE_ENABLED":     2,
	}
)

func (x ArchivalState) Enum() *ArchivalState {
	p := new(ArchivalState)
	*p = x
	return p
}

func (x ArchivalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchivalState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (ArchivalState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x ArchivalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchivalState.Descriptor instead.
func (ArchivalState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type DomainState int32

const (
	DomainState_DOMAIN_STATE_UNSPECIFIED DomainState = 0
	DomainState_DOMAIN_STATE_REGISTERED  DomainState = 1
	DomainState_DOMAIN_STATE_DEPRECATED  DomainState = 2
	DomainState_DOMAIN_STATE_DELETED     DomainState = 3
)

// Enum value maps for DomainState.
var (
	DomainState_name = map[int32]string{
		0: "DOMAIN_STATE_UNSPECIFIED",
		1: "DOMAIN_STATE_REGISTERED",
		2: "DOMAIN_STATE_DEPRECATED",
		3: "DOMAIN_STATE_DELETED",
	}
	DomainState_value = map[string]int32{
		"DOMAIN_STATE_UNSPECIFIED": 0,
		"DOMAIN_STATE_REGISTERED":  1,
		"DOMAIN_STATE_DEPRECATED":  2,
		"DOMAIN_STATE_DELETED":     3,
	}
)

func (x DomainState) Enum() *DomainState {
	p := new(DomainState)
	*p = x
	return p
}

func (x DomainState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (DomainState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x DomainState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainState.Descriptor instead.
func (DomainState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

// Whenever this list of events is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering.
type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED                                          EventType = 0
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_STARTED                           EventType = 1
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED                         EventType = 2
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_FAILED                            EventType = 3
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT                         EventType = 4
	EventType_EVENT_TYPE_DECISION_TASK_SCHEDULED                              EventType = 5
	EventType_EVENT_TYPE_DECISION_TASK_STARTED                                EventType = 6
	EventType_EVENT_TYPE_DECISION_TASK_COMPLETED                              EventType = 7
	EventType_EVENT_TYPE_DECISION_TASK_TIMED_OUT                              EventType = 8
	EventType_EVENT_TYPE_DECISION_TASK_FAILED                                 EventType = 9
	EventType_EVENT_TYPE_ACTIVITY_TASK_SCHEDULED                              EventType = 10
	EventType_EVENT_TYPE_ACTIVITY_TASK_STARTED                                EventType = 11
	EventType_EVENT_TYPE_ACTIVITY_TASK_COMPLETED                              EventType = 12
	EventType_EVENT_TYPE_ACTIVITY_TASK_FAILED                                 EventType = 13
	EventType_EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT                              EventType = 14
	EventType_EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED                       EventType = 15
	EventType_EVENT_TYPE_ACTIVITY_TASK_CANCELED                               EventType = 16
	EventType_EVENT_TYPE_TIMER_STARTED                                        EventType = 17
	EventType_EVENT_TYPE_TIMER_FIRED                                          EventType = 18
	EventType_EVENT_TYPE_TIMER_CANCELED                                       EventType = 19
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED                  EventType = 20
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED                          EventType = 21
	EventType_EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED EventType = 22
	EventType_EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED    EventType = 23
	EventType_EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED         EventType = 24
	EventType_EVENT_TYPE_MARKER_RECORDED                                      EventType = 25
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED                          EventType = 26
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED                        EventType = 27
	EventType_EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW                  EventType = 28
	EventType_EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED             EventType = 29
	EventType_EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED                EventType = 30
	EventType_EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED                     EventType = 31
	EventType_EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED                   EventType = 32
	EventType_EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED                      EventType = 33
	EventType_EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED                    EventType = 34
	EventType_EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT                   EventType = 35
	EventType_EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED                  EventType = 36
	EventType_EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED         EventType = 37
	EventType_EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED            EventType = 38
	EventType_EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED                 EventType = 39
	EventType_EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES                    EventType = 40
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_TYPE_UNSPECIFIED",
		1:  "EVENT_TYPE_WORKFLOW_EXECUTION_STARTED",
		2:  "EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED",
		3:  "EVENT_TYPE_WORKFLOW_EXECUTION_FAILED",
		4:  "EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT",
		5:  "EVENT_TYPE_DECISION_TASK_SCHEDULED",
		6:  "EVENT_TYPE_DECISION_TASK_STARTED",
		7:  "EVENT_TYPE_DECISION_TASK_COMPLETED",
		8:  "EVENT_TYPE_DECISION_TASK_TIMED_OUT",
		9:  "EVENT_TYPE_DECISION_TASK_FAILED",
		10: "EVENT_TYPE_ACTIVITY_TASK_SCHEDULED",
		11: "EVENT_TYPE_ACTIVITY_TASK_STARTED",
		12: "EVENT_TYPE_ACTIVITY_TASK_COMPLETED",
		13: "EVENT_TYPE_ACTIVITY_TASK_FAILED",
		14: "EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT",
		15: "EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED",
		16: "EVENT_TYPE_ACTIVITY_TASK_CANCELED",
		17: "EVENT_TYPE_TIMER_STARTED",
		18: "EVENT_TYPE_TIMER_FIRED",
		19: "EVENT_TYPE_TIMER_CANCELED",
		20: "EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED",
		21: "EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED",
		22: "EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED",
		23: "EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED",
		24: "EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED",
		25: "EVENT_TYPE_MARKER_RECORDED",
		26: "EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED",
		27: "EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED",
		28: "EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW",
		29: "EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED",
		30: "EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED",
		31: "EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED",
		32: "EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED",
		33: "EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED",
		34: "EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED",
		35: "EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT",
		36: "EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED",
		37: "EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED",
		38: "EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED",
		39: "EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED",
		40: "EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":                                          0,
		"EVENT_TYPE_WORKFLOW_EXECUTION_STARTED":                           1,
		"EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED":                         2,
		"EVENT_TYPE_WORKFLOW_EXECUTION_FAILED":                            3,
		"EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT":                         4,
		"EVENT_TYPE_DECISION_TASK_SCHEDULED":                              5,
		"EVENT_TYPE_DECISION_TASK_STARTED":                                6,
		"EVENT_TYPE_DECISION_TASK_COMPLETED":                              7,
		"EVENT_TYPE_DECISION_TASK_TIMED_OUT":                              8,
		"EVENT_TYPE_DECISION_TASK_FAILED":                                 9,
		"EVENT_TYPE_ACTIVITY_TASK_SCHEDULED":                              10,
		"EVENT_TYPE_ACTIVITY_TASK_STARTED":                                11,
		"EVENT_TYPE_ACTIVITY_TASK_COMPLETED":                              12,
		"EVENT_TYPE_ACTIVITY_TASK_FAILED":                                 13,
		"EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT":                              14,
		"EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED":                       15,
		"EVENT_TYPE_ACTIVITY_TASK_CANCELED":                               16,
		"EVENT_TYPE_TIMER_STARTED":                                        17,
		"EVENT_TYPE_TIMER_FIRED":                                          18,
		"EVENT_TYPE_TIMER_CANCELED":                                       19,
		"EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED":                  20,
		"EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED":                          21,
		"EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED": 22,
		"EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED":    23,
		"EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED":         24,
		"EVENT_TYPE_MARKER_RECORDED":                                      25,
		"EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED":                          26,
		"EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED":                        27,
		"EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW":                  28,
		"EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED":             29,
		"EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED":                30,
		"EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED":                     31,
		"EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED":                   32,
		"EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED":                      33,
		"EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED":                    34,
		"EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT":                   35,
		"EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED":                  36,
		"EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED":         37,
		"EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED":            38,
		"EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED":                 39,
		"EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES":                    40,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

type RetryState int32

const (
	RetryState_RETRY_STATE_UNSPECIFIED              RetryState = 0
	RetryState_RETRY_STATE_IN_PROGRESS              RetryState = 1
	RetryState_RETRY_STATE_NON_RETRYABLE_FAILURE    RetryState = 2
	RetryState_RETRY_STATE_TIMEOUT                  RetryState = 3
	RetryState_RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED RetryState = 4
	RetryState_RETRY_STATE_RETRY_POLICY_NOT_SET     RetryState = 5
	RetryState_RETRY_STATE_INTERNAL_SERVER_ERROR    RetryState = 6
	RetryState_RETRY_STATE_CANCEL_REQUESTED         RetryState = 7
)

// Enum value maps for RetryState.
var (
	RetryState_name = map[int32]string{
		0: "RETRY_STATE_UNSPECIFIED",
		1: "RETRY_STATE_IN_PROGRESS",
		2: "RETRY_STATE_NON_RETRYABLE_FAILURE",
		3: "RETRY_STATE_TIMEOUT",
		4: "RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED",
		5: "RETRY_STATE_RETRY_POLICY_NOT_SET",
		6: "RETRY_STATE_INTERNAL_SERVER_ERROR",
		7: "RETRY_STATE_CANCEL_REQUESTED",
	}
	RetryState_value = map[string]int32{
		"RETRY_STATE_UNSPECIFIED":              0,
		"RETRY_STATE_IN_PROGRESS":              1,
		"RETRY_STATE_NON_RETRYABLE_FAILURE":    2,
		"RETRY_STATE_TIMEOUT":                  3,
		"RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED": 4,
		"RETRY_STATE_RETRY_POLICY_NOT_SET":     5,
		"RETRY_STATE_INTERNAL_SERVER_ERROR":    6,
		"RETRY_STATE_CANCEL_REQUESTED":         7,
	}
)

func (x RetryState) Enum() *RetryState {
	p := new(RetryState)
	*p = x
	return p
}

func (x RetryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetryState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[3].Descriptor()
}

func (RetryState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[3]
}

func (x RetryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetryState.Descriptor instead.
func (RetryState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type TimeoutType int32

const (
	TimeoutType_TIMEOUT_TYPE_UNSPECIFIED       TimeoutType = 0
	TimeoutType_TIMEOUT_TYPE_START_TO_CLOSE    TimeoutType = 1
	TimeoutType_TIMEOUT_TYPE_SCHEDULE_TO_START TimeoutType = 2
	TimeoutType_TIMEOUT_TYPE_SCHEDULE_TO_CLOSE TimeoutType = 3
	TimeoutType_TIMEOUT_TYPE_HEARTBEAT         TimeoutType = 4
)

// Enum value maps for TimeoutType.
var (
	TimeoutType_name = map[int32]string{
		0: "TIMEOUT_TYPE_UNSPECIFIED",
		1: "TIMEOUT_TYPE_START_TO_CLOSE",
		2: "TIMEOUT_TYPE_SCHEDULE_TO_START",
		3: "TIMEOUT_TYPE_SCHEDULE_TO_CLOSE",
		4: "TIMEOUT_TYPE_HEARTBEAT",
	}
	TimeoutType_value = map[string]int32{
		"TIMEOUT_TYPE_UNSPECIFIED":       0,
		"TIMEOUT_TYPE_START_TO_CLOSE":    1,
		"TIMEOUT_TYPE_SCHEDULE_TO_START": 2,
		"TIMEOUT_TYPE_SCHEDULE_TO_CLOSE": 3,
		"TIMEOUT_TYPE_HEARTBEAT":         4,
	}
)

func (x TimeoutType) Enum() *TimeoutType {
	p := new(TimeoutType)
	*p = x
	return p
}

func (x TimeoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[4].Descriptor()
}

func (TimeoutType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[4]
}

func (x TimeoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeoutType.Descriptor instead.
func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

type StartChildWorkflowExecutionFailedCause int32

const (
	StartChildWorkflowExecutionFailedCause_START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED             StartChildWorkflowExecutionFailedCause = 0
	StartChildWorkflowExecutionFailedCause_START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS StartChildWorkflowExecutionFailedCause = 1
)

// Enum value maps for StartChildWorkflowExecutionFailedCause.
var (
	StartChildWorkflowExecutionFailedCause_name = map[int32]string{
		0: "START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED",
		1: "START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS",
	}
	StartChildWorkflowExecutionFailedCause_value = map[string]int32{
		"START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED":             0,
		"START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS": 1,
	}
)

func (x StartChildWorkflowExecutionFailedCause) Enum() *StartChildWorkflowExecutionFailedCause {
	p := new(StartChildWorkflowExecutionFailedCause)
	*p = x
	return p
}

func (x StartChildWorkflowExecutionFailedCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartChildWorkflowExecutionFailedCause) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[5].Descriptor()
}

func (StartChildWorkflowExecutionFailedCause) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[5]
}

func (x StartChildWorkflowExecutionFailedCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartChildWorkflowExecutionFailedCause.Descriptor instead.
func (StartChildWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

type CancelExternalWorkflowExecutionFailedCause int32

const (
	CancelExternalWorkflowExecutionFailedCause_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED                           CancelExternalWorkflowExecutionFailedCause = 0
	CancelExternalWorkflowExecutionFailedCause_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND CancelExternalWorkflowExecutionFailedCause = 1
)

// Enum value maps for CancelExternalWorkflowExecutionFailedCause.
var (
	CancelExternalWorkflowExecutionFailedCause_name = map[int32]string{
		0: "CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED",
		1: "CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND",
	}
	CancelExternalWorkflowExecutionFailedCause_value = map[string]int32{
		"CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED":                           0,
		"CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND": 1,
	}
)

func (x CancelExternalWorkflowExecutionFailedCause) Enum() *CancelExternalWorkflowExecutionFailedCause {
	p := new(CancelExternalWorkflowExecutionFailedCause)
	*p = x
	return p
}

func (x CancelExternalWorkflowExecutionFailedCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelExternalWorkflowExecutionFailedCause) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[6].Descriptor()
}

func (CancelExternalWorkflowExecutionFailedCause) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[6]
}

func (x CancelExternalWorkflowExecutionFailedCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelExternalWorkflowExecutionFailedCause.Descriptor instead.
func (CancelExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

type SignalExternalWorkflowExecutionFailedCause int32

const (
	SignalExternalWorkflowExecutionFailedCause_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED                           SignalExternalWorkflowExecutionFailedCause = 0
	SignalExternalWorkflowExecutionFailedCause_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND SignalExternalWorkflowExecutionFailedCause = 1
)

// Enum value maps for SignalExternalWorkflowExecutionFailedCause.
var (
	SignalExternalWorkflowExecutionFailedCause_name = map[int32]string{
		0: "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED",
		1: "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND",
	}
	SignalExternalWorkflowExecutionFailedCause_value = map[string]int32{
		"SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED":                           0,
		"SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND": 1,
	}
)

func (x SignalExternalWorkflowExecutionFailedCause) Enum() *SignalExternalWorkflowExecutionFailedCause {
	p := new(SignalExternalWorkflowExecutionFailedCause)
	*p = x
	return p
}

func (x SignalExternalWorkflowExecutionFailedCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalExternalWorkflowExecutionFailedCause) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[7].Descriptor()
}

func (SignalExternalWorkflowExecutionFailedCause) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[7]
}

func (x SignalExternalWorkflowExecutionFailedCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalExternalWorkflowExecutionFailedCause.Descriptor instead.
func (SignalExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

type WorkflowIdReusePolicy int32

const (
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED WorkflowIdReusePolicy = 0
	// Allow start a workflow execution using the same workflow Id, when workflow not running.
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE WorkflowIdReusePolicy = 1
	// Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
	// [terminated, cancelled, timed out, failed].
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY WorkflowIdReusePolicy = 2
	// Do not allow start a workflow execution using the same workflow Id at all.
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE WorkflowIdReusePolicy = 3
)

// Enum value maps for WorkflowIdReusePolicy.
var (
	WorkflowIdReusePolicy_name = map[int32]string{
		0: "WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED",
		1: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE",
		2: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
		3: "WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE",
	}
	WorkflowIdReusePolicy_value = map[string]int32{
		"WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED":                 0,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE":             1,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 2,
		"WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
	}
)

func (x WorkflowIdReusePolicy) Enum() *WorkflowIdReusePolicy {
	p := new(WorkflowIdReusePolicy)
	*p = x
	return p
}

func (x WorkflowIdReusePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowIdReusePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[8].Descriptor()
}

func (WorkflowIdReusePolicy) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[8]
}

func (x WorkflowIdReusePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowIdReusePolicy.Descriptor instead.
func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

type ParentClosePolicy int32

const (
	ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	// Terminate means terminating the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	// Abandon means not doing anything on the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	// Cancel means requesting cancellation on the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

// Enum value maps for ParentClosePolicy.
var (
	ParentClosePolicy_name = map[int32]string{
		0: "PARENT_CLOSE_POLICY_UNSPECIFIED",
		1: "PARENT_CLOSE_POLICY_TERMINATE",
		2: "PARENT_CLOSE_POLICY_ABANDON",
		3: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
	}
	ParentClosePolicy_value = map[string]int32{
		"PARENT_CLOSE_POLICY_UNSPECIFIED":    0,
		"PARENT_CLOSE_POLICY_TERMINATE":      1,
		"PARENT_CLOSE_POLICY_ABANDON":        2,
		"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 3,
	}
)

func (x ParentClosePolicy) Enum() *ParentClosePolicy {
	p := new(ParentClosePolicy)
	*p = x
	return p
}

func (x ParentClosePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentClosePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[9].Descriptor()
}

func (ParentClosePolicy) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[9]
}

func (x ParentClosePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentClosePolicy.Descriptor instead.
func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

type TaskListKind int32

const (
	TaskListKind_TASK_LIST_KIND_UNSPECIFIED TaskListKind = 0
	TaskListKind_TASK_LIST_KIND_NORMAL      TaskListKind = 1
	TaskListKind_TASK_LIST_KIND_STICKY      TaskListKind = 2
)

// Enum value maps for TaskListKind.
var (
	TaskListKind_name = map[int32]string{
		0: "TASK_LIST_KIND_UNSPECIFIED",
		1: "TASK_LIST_KIND_NORMAL",
		2: "TASK_LIST_KIND_STICKY",
	}
	TaskListKind_value = map[string]int32{
		"TASK_LIST_KIND_UNSPECIFIED": 0,
		"TASK_LIST_KIND_NORMAL":      1,
		"TASK_LIST_KIND_STICKY":      2,
	}
)

func (x TaskListKind) Enum() *TaskListKind {
	p := new(TaskListKind)
	*p = x
	return p
}

func (x TaskListKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskListKind) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[10].Descriptor()
}

func (TaskListKind) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[10]
}

func (x TaskListKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskListKind.Descriptor instead.
func (TaskListKind) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

type TaskListType int32

const (
	TaskListType_TASK_LIST_TYPE_UNSPECIFIED TaskListType = 0
	// Workflow type of task list.
	TaskListType_TASK_LIST_TYPE_WORKFLOW TaskListType = 1
	// Activity type of task list.
	TaskListType_TASK_LIST_TYPE_ACTIVITY TaskListType = 2
)

// Enum value maps for TaskListType.
var (
	TaskListType_name = map[int32]string{
		0: "TASK_LIST_TYPE_UNSPECIFIED",
		1: "TASK_LIST_TYPE_WORKFLOW",
		2: "TASK_LIST_TYPE_ACTIVITY",
	}
	TaskListType_value = map[string]int32{
		"TASK_LIST_TYPE_UNSPECIFIED": 0,
		"TASK_LIST_TYPE_WORKFLOW":    1,
		"TASK_LIST_TYPE_ACTIVITY":    2,
	}
)

func (x TaskListType) Enum() *TaskListType {
	p := new(TaskListType)
	*p = x
	return p
}

func (x TaskListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskListType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[11].Descriptor()
}

func (TaskListType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[11]
}

func (x TaskListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskListType.Descriptor instead.
func (TaskListType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

type DecisionTaskFailedCause int32

const (
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_UNSPECIFIED                                               DecisionTaskFailedCause = 0
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_UNHANDLED_COMMAND                                         DecisionTaskFailedCause = 1
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES                          DecisionTaskFailedCause = 2
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES                    DecisionTaskFailedCause = 3
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES                                DecisionTaskFailedCause = 4
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES                               DecisionTaskFailedCause = 5
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES                              DecisionTaskFailedCause = 6
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES                DecisionTaskFailedCause = 7
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES                    DecisionTaskFailedCause = 8
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES                  DecisionTaskFailedCause = 9
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES DecisionTaskFailedCause = 10
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES                            DecisionTaskFailedCause = 11
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID                                  DecisionTaskFailedCause = 12
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST                                    DecisionTaskFailedCause = 13
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE                         DecisionTaskFailedCause = 14
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES                  DecisionTaskFailedCause = 15
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES                      DecisionTaskFailedCause = 16
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND                                       DecisionTaskFailedCause = 17
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND                                    DecisionTaskFailedCause = 18
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE                                     DecisionTaskFailedCause = 19
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW                                            DecisionTaskFailedCause = 20
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_BINARY                                                DecisionTaskFailedCause = 21
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID                            DecisionTaskFailedCause = 22
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES                                     DecisionTaskFailedCause = 23
)

// Enum value maps for DecisionTaskFailedCause.
var (
	DecisionTaskFailedCause_name = map[int32]string{
		0:  "DECISION_TASK_FAILED_CAUSE_UNSPECIFIED",
		1:  "DECISION_TASK_FAILED_CAUSE_UNHANDLED_COMMAND",
		2:  "DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES",
		3:  "DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES",
		4:  "DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES",
		5:  "DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES",
		6:  "DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES",
		7:  "DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES",
		8:  "DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES",
		9:  "DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES",
		10: "DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES",
		11: "DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES",
		12: "DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID",
		13: "DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST",
		14: "DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE",
		15: "DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES",
		16: "DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES",
		17: "DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND",
		18: "DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND",
		19: "DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE",
		20: "DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW",
		21: "DECISION_TASK_FAILED_CAUSE_BAD_BINARY",
		22: "DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID",
		23: "DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES",
	}
	DecisionTaskFailedCause_value = map[string]int32{
		"DECISION_TASK_FAILED_CAUSE_UNSPECIFIED":                                               0,
		"DECISION_TASK_FAILED_CAUSE_UNHANDLED_COMMAND":                                         1,
		"DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES":                          2,
		"DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES":                    3,
		"DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES":                                4,
		"DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES":                               5,
		"DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES":                              6,
		"DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES":                7,
		"DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES":                    8,
		"DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES":                  9,
		"DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES": 10,
		"DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES":                            11,
		"DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID":                                  12,
		"DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST":                                    13,
		"DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE":                         14,
		"DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES":                  15,
		"DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES":                      16,
		"DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND":                                       17,
		"DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND":                                    18,
		"DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE":                                     19,
		"DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW":                                            20,
		"DECISION_TASK_FAILED_CAUSE_BAD_BINARY":                                                21,
		"DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID":                            22,
		"DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES":                                     23,
	}
)

func (x DecisionTaskFailedCause) Enum() *DecisionTaskFailedCause {
	p := new(DecisionTaskFailedCause)
	*p = x
	return p
}

func (x DecisionTaskFailedCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecisionTaskFailedCause) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[12].Descriptor()
}

func (DecisionTaskFailedCause) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[12]
}

func (x DecisionTaskFailedCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecisionTaskFailedCause.Descriptor instead.
func (DecisionTaskFailedCause) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

type ContinueAsNewInitiator int32

const (
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED   ContinueAsNewInitiator = 0
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_WORKFLOW      ContinueAsNewInitiator = 1
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_RETRY         ContinueAsNewInitiator = 2
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE ContinueAsNewInitiator = 3
)

// Enum value maps for ContinueAsNewInitiator.
var (
	ContinueAsNewInitiator_name = map[int32]string{
		0: "CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED",
		1: "CONTINUE_AS_NEW_INITIATOR_WORKFLOW",
		2: "CONTINUE_AS_NEW_INITIATOR_RETRY",
		3: "CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE",
	}
	ContinueAsNewInitiator_value = map[string]int32{
		"CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED":   0,
		"CONTINUE_AS_NEW_INITIATOR_WORKFLOW":      1,
		"CONTINUE_AS_NEW_INITIATOR_RETRY":         2,
		"CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE": 3,
	}
)

func (x ContinueAsNewInitiator) Enum() *ContinueAsNewInitiator {
	p := new(ContinueAsNewInitiator)
	*p = x
	return p
}

func (x ContinueAsNewInitiator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContinueAsNewInitiator) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[13].Descriptor()
}

func (ContinueAsNewInitiator) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[13]
}

func (x ContinueAsNewInitiator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContinueAsNewInitiator.Descriptor instead.
func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: There is WorkflowExecutionState already in another package. --)
type WorkflowExecutionStatus int32

const (
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_UNSPECIFIED WorkflowExecutionStatus = 0
	// Value 1 is hardcoded in SQL persistence.
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_RUNNING          WorkflowExecutionStatus = 1
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_COMPLETED        WorkflowExecutionStatus = 2
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_FAILED           WorkflowExecutionStatus = 3
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_CANCELED         WorkflowExecutionStatus = 4
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_TERMINATED       WorkflowExecutionStatus = 5
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW WorkflowExecutionStatus = 6
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_TIMED_OUT        WorkflowExecutionStatus = 7
)

// Enum value maps for WorkflowExecutionStatus.
var (
	WorkflowExecutionStatus_name = map[int32]string{
		0: "WORKFLOW_EXECUTION_STATUS_UNSPECIFIED",
		1: "WORKFLOW_EXECUTION_STATUS_RUNNING",
		2: "WORKFLOW_EXECUTION_STATUS_COMPLETED",
		3: "WORKFLOW_EXECUTION_STATUS_FAILED",
		4: "WORKFLOW_EXECUTION_STATUS_CANCELED",
		5: "WORKFLOW_EXECUTION_STATUS_TERMINATED",
		6: "WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW",
		7: "WORKFLOW_EXECUTION_STATUS_TIMED_OUT",
	}
	WorkflowExecutionStatus_value = map[string]int32{
		"WORKFLOW_EXECUTION_STATUS_UNSPECIFIED":      0,
		"WORKFLOW_EXECUTION_STATUS_RUNNING":          1,
		"WORKFLOW_EXECUTION_STATUS_COMPLETED":        2,
		"WORKFLOW_EXECUTION_STATUS_FAILED":           3,
		"WORKFLOW_EXECUTION_STATUS_CANCELED":         4,
		"WORKFLOW_EXECUTION_STATUS_TERMINATED":       5,
		"WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW": 6,
		"WORKFLOW_EXECUTION_STATUS_TIMED_OUT":        7,
	}
)

func (x WorkflowExecutionStatus) Enum() *WorkflowExecutionStatus {
	p := new(WorkflowExecutionStatus)
	*p = x
	return p
}

func (x WorkflowExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[14].Descriptor()
}

func (WorkflowExecutionStatus) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[14]
}

func (x WorkflowExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowExecutionStatus.Descriptor instead.
func (WorkflowExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

type ReplicationTaskType int32

const (
	ReplicationTaskType_REPLICATION_TASK_TYPE_UNSPECIFIED            ReplicationTaskType = 0
	ReplicationTaskType_REPLICATION_TASK_TYPE_DOMAIN_TASK            ReplicationTaskType = 1
	ReplicationTaskType_REPLICATION_TASK_TYPE_HISTORY_TASK           ReplicationTaskType = 2
	ReplicationTaskType_REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS_TASK ReplicationTaskType = 3
	ReplicationTaskType_REPLICATION_TASK_TYPE_SYNC_ACTIVITY_TASK     ReplicationTaskType = 4
	ReplicationTaskType_REPLICATION_TASK_TYPE_HISTORY_METADATA_TASK  ReplicationTaskType = 5
	ReplicationTaskType_REPLICATION_TASK_TYPE_HISTORY_V2_TASK        ReplicationTaskType = 6
)

// Enum value maps for ReplicationTaskType.
var (
	ReplicationTaskType_name = map[int32]string{
		0: "REPLICATION_TASK_TYPE_UNSPECIFIED",
		1: "REPLICATION_TASK_TYPE_DOMAIN_TASK",
		2: "REPLICATION_TASK_TYPE_HISTORY_TASK",
		3: "REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS_TASK",
		4: "REPLICATION_TASK_TYPE_SYNC_ACTIVITY_TASK",
		5: "REPLICATION_TASK_TYPE_HISTORY_METADATA_TASK",
		6: "REPLICATION_TASK_TYPE_HISTORY_V2_TASK",
	}
	ReplicationTaskType_value = map[string]int32{
		"REPLICATION_TASK_TYPE_UNSPECIFIED":            0,
		"REPLICATION_TASK_TYPE_DOMAIN_TASK":            1,
		"REPLICATION_TASK_TYPE_HISTORY_TASK":           2,
		"REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS_TASK": 3,
		"REPLICATION_TASK_TYPE_SYNC_ACTIVITY_TASK":     4,
		"REPLICATION_TASK_TYPE_HISTORY_METADATA_TASK":  5,
		"REPLICATION_TASK_TYPE_HISTORY_V2_TASK":        6,
	}
)

func (x ReplicationTaskType) Enum() *ReplicationTaskType {
	p := new(ReplicationTaskType)
	*p = x
	return p
}

func (x ReplicationTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[15].Descriptor()
}

func (ReplicationTaskType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[15]
}

func (x ReplicationTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationTaskType.Descriptor instead.
func (ReplicationTaskType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

type DomainOperation int32

const (
	DomainOperation_DOMAIN_OPERATION_UNSPECIFIED DomainOperation = 0
	DomainOperation_DOMAIN_OPERATION_CREATE      DomainOperation = 1
	DomainOperation_DOMAIN_OPERATION_UPDATE      DomainOperation = 2
)

// Enum value maps for DomainOperation.
var (
	DomainOperation_name = map[int32]string{
		0: "DOMAIN_OPERATION_UNSPECIFIED",
		1: "DOMAIN_OPERATION_CREATE",
		2: "DOMAIN_OPERATION_UPDATE",
	}
	DomainOperation_value = map[string]int32{
		"DOMAIN_OPERATION_UNSPECIFIED": 0,
		"DOMAIN_OPERATION_CREATE":      1,
		"DOMAIN_OPERATION_UPDATE":      2,
	}
)

func (x DomainOperation) Enum() *DomainOperation {
	p := new(DomainOperation)
	*p = x
	return p
}

func (x DomainOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[16].Descriptor()
}

func (DomainOperation) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[16]
}

func (x DomainOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainOperation.Descriptor instead.
func (DomainOperation) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

type EncodingType int32

const (
	EncodingType_ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	EncodingType_ENCODING_TYPE_PROTO3      EncodingType = 1
	EncodingType_ENCODING_TYPE_JSON        EncodingType = 2
)

// Enum value maps for EncodingType.
var (
	EncodingType_name = map[int32]string{
		0: "ENCODING_TYPE_UNSPECIFIED",
		1: "ENCODING_TYPE_PROTO3",
		2: "ENCODING_TYPE_JSON",
	}
	EncodingType_value = map[string]int32{
		"ENCODING_TYPE_UNSPECIFIED": 0,
		"ENCODING_TYPE_PROTO3":      1,
		"ENCODING_TYPE_JSON":        2,
	}
)

func (x EncodingType) Enum() *EncodingType {
	p := new(EncodingType)
	*p = x
	return p
}

func (x EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[17].Descriptor()
}

func (EncodingType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[17]
}

func (x EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingType.Descriptor instead.
func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

type TaskType int32

const (
	TaskType_TASK_TYPE_UNSPECIFIED                                TaskType = 0
	TaskType_TASK_TYPE_REPLICATION_HISTORY                        TaskType = 1
	TaskType_TASK_TYPE_REPLICATION_SYNC_ACTIVITY                  TaskType = 2
	TaskType_TASK_TYPE_TRANSFER_DECISION_TASK                     TaskType = 3
	TaskType_TASK_TYPE_TRANSFER_ACTIVITY_TASK                     TaskType = 4
	TaskType_TASK_TYPE_TRANSFER_CLOSE_EXECUTION                   TaskType = 5
	TaskType_TASK_TYPE_TRANSFER_CANCEL_EXECUTION                  TaskType = 6
	TaskType_TASK_TYPE_TRANSFER_START_CHILD_EXECUTION             TaskType = 7
	TaskType_TASK_TYPE_TRANSFER_SIGNAL_EXECUTION                  TaskType = 8
	TaskType_TASK_TYPE_TRANSFER_RECORD_WORKFLOW_STARTED           TaskType = 9
	TaskType_TASK_TYPE_TRANSFER_RESET_WORKFLOW                    TaskType = 10
	TaskType_TASK_TYPE_TRANSFER_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES TaskType = 11
	TaskType_TASK_TYPE_DECISION_TASK_TIMEOUT                      TaskType = 12
	TaskType_TASK_TYPE_ACTIVITY_TIMEOUT                           TaskType = 13
	TaskType_TASK_TYPE_USER_TIMER                                 TaskType = 14
	TaskType_TASK_TYPE_WORKFLOW_RUN_TIMEOUT                       TaskType = 15
	TaskType_TASK_TYPE_DELETE_HISTORY_EVENT                       TaskType = 16
	TaskType_TASK_TYPE_ACTIVITY_RETRY_TIMER                       TaskType = 17
	TaskType_TASK_TYPE_WORKFLOW_BACKOFF_TIMER                     TaskType = 18
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "TASK_TYPE_UNSPECIFIED",
		1:  "TASK_TYPE_REPLICATION_HISTORY",
		2:  "TASK_TYPE_REPLICATION_SYNC_ACTIVITY",
		3:  "TASK_TYPE_TRANSFER_DECISION_TASK",
		4:  "TASK_TYPE_TRANSFER_ACTIVITY_TASK",
		5:  "TASK_TYPE_TRANSFER_CLOSE_EXECUTION",
		6:  "TASK_TYPE_TRANSFER_CANCEL_EXECUTION",
		7:  "TASK_TYPE_TRANSFER_START_CHILD_EXECUTION",
		8:  "TASK_TYPE_TRANSFER_SIGNAL_EXECUTION",
		9:  "TASK_TYPE_TRANSFER_RECORD_WORKFLOW_STARTED",
		10: "TASK_TYPE_TRANSFER_RESET_WORKFLOW",
		11: "TASK_TYPE_TRANSFER_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES",
		12: "TASK_TYPE_DECISION_TASK_TIMEOUT",
		13: "TASK_TYPE_ACTIVITY_TIMEOUT",
		14: "TASK_TYPE_USER_TIMER",
		15: "TASK_TYPE_WORKFLOW_RUN_TIMEOUT",
		16: "TASK_TYPE_DELETE_HISTORY_EVENT",
		17: "TASK_TYPE_ACTIVITY_RETRY_TIMER",
		18: "TASK_TYPE_WORKFLOW_BACKOFF_TIMER",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_UNSPECIFIED":                                0,
		"TASK_TYPE_REPLICATION_HISTORY":                        1,
		"TASK_TYPE_REPLICATION_SYNC_ACTIVITY":                  2,
		"TASK_TYPE_TRANSFER_DECISION_TASK":                     3,
		"TASK_TYPE_TRANSFER_ACTIVITY_TASK":                     4,
		"TASK_TYPE_TRANSFER_CLOSE_EXECUTION":                   5,
		"TASK_TYPE_TRANSFER_CANCEL_EXECUTION":                  6,
		"TASK_TYPE_TRANSFER_START_CHILD_EXECUTION":             7,
		"TASK_TYPE_TRANSFER_SIGNAL_EXECUTION":                  8,
		"TASK_TYPE_TRANSFER_RECORD_WORKFLOW_STARTED":           9,
		"TASK_TYPE_TRANSFER_RESET_WORKFLOW":                    10,
		"TASK_TYPE_TRANSFER_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES": 11,
		"TASK_TYPE_DECISION_TASK_TIMEOUT":                      12,
		"TASK_TYPE_ACTIVITY_TIMEOUT":                           13,
		"TASK_TYPE_USER_TIMER":                                 14,
		"TASK_TYPE_WORKFLOW_RUN_TIMEOUT":                       15,
		"TASK_TYPE_DELETE_HISTORY_EVENT":                       16,
		"TASK_TYPE_ACTIVITY_RETRY_TIMER":                       17,
		"TASK_TYPE_WORKFLOW_BACKOFF_TIMER":                     18,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[18].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[18]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

type WorkflowBackoffType int32

const (
	WorkflowBackoffType_WORKFLOW_BACKOFF_TYPE_UNSPECIFIED WorkflowBackoffType = 0
	WorkflowBackoffType_WORKFLOW_BACKOFF_TYPE_RETRY       WorkflowBackoffType = 1
	WorkflowBackoffType_WORKFLOW_BACKOFF_TYPE_CRON        WorkflowBackoffType = 2
)

// Enum value maps for WorkflowBackoffType.
var (
	WorkflowBackoffType_name = map[int32]string{
		0: "WORKFLOW_BACKOFF_TYPE_UNSPECIFIED",
		1: "WORKFLOW_BACKOFF_TYPE_RETRY",
		2: "WORKFLOW_BACKOFF_TYPE_CRON",
	}
	WorkflowBackoffType_value = map[string]int32{
		"WORKFLOW_BACKOFF_TYPE_UNSPECIFIED": 0,
		"WORKFLOW_BACKOFF_TYPE_RETRY":       1,
		"WORKFLOW_BACKOFF_TYPE_CRON":        2,
	}
)

func (x WorkflowBackoffType) Enum() *WorkflowBackoffType {
	p := new(WorkflowBackoffType)
	*p = x
	return p
}

func (x WorkflowBackoffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowBackoffType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[19].Descriptor()
}

func (WorkflowBackoffType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[19]
}

func (x WorkflowBackoffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowBackoffType.Descriptor instead.
func (WorkflowBackoffType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

type DomainDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info                        *DomainInfo              `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Config                      *DomainConfig            `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig           *DomainReplicationConfig `protobuf:"bytes,3,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	ConfigVersion               int64                    `protobuf:"varint,4,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	FailoverNotificationVersion int64                    `protobuf:"varint,5,opt,name=failover_notification_version,json=failoverNotificationVersion,proto3" json:"failover_notification_version,omitempty"`
	FailoverVersion             int64                    `protobuf:"varint,6,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	FailoverEndTime             *timestamp.Timestamp     `protobuf:"bytes,7,opt,name=failover_end_time,json=failoverEndTime,proto3" json:"failover_end_time,omitempty"`
}

func (x *DomainDetail) Reset() {
	*x = DomainDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDetail) ProtoMessage() {}

func (x *DomainDetail) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDetail.ProtoReflect.Descriptor instead.
func (*DomainDetail) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *DomainDetail) GetInfo() *DomainInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DomainDetail) GetConfig() *DomainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DomainDetail) GetReplicationConfig() *DomainReplicationConfig {
	if x != nil {
		return x.ReplicationConfig
	}
	return nil
}

func (x *DomainDetail) GetConfigVersion() int64 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *DomainDetail) GetFailoverNotificationVersion() int64 {
	if x != nil {
		return x.FailoverNotificationVersion
	}
	return 0
}

func (x *DomainDetail) GetFailoverVersion() int64 {
	if x != nil {
		return x.FailoverVersion
	}
	return 0
}

func (x *DomainDetail) GetFailoverEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.FailoverEndTime
	}
	return nil
}

type DomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State       DomainState       `protobuf:"varint,2,opt,name=state,proto3,enum=DomainState" json:"state,omitempty"`
	Name        string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Owner       string            `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Data        map[string]string `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DomainInfo) Reset() {
	*x = DomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo) ProtoMessage() {}

func (x *DomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *DomainInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DomainInfo) GetState() DomainState {
	if x != nil {
		return x.State
	}
	return DomainState_DOMAIN_STATE_UNSPECIFIED
}

func (x *DomainInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DomainInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DomainInfo) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type DomainReplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveClusterName string   `protobuf:"bytes,1,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	Clusters          []string `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *DomainReplicationConfig) Reset() {
	*x = DomainReplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainReplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainReplicationConfig) ProtoMessage() {}

func (x *DomainReplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainReplicationConfig.ProtoReflect.Descriptor instead.
func (*DomainReplicationConfig) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *DomainReplicationConfig) GetActiveClusterName() string {
	if x != nil {
		return x.ActiveClusterName
	}
	return ""
}

func (x *DomainReplicationConfig) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type DomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retention               *duration.Duration `protobuf:"bytes,1,opt,name=retention,proto3" json:"retention,omitempty"`
	ArchivalBucket          string             `protobuf:"bytes,2,opt,name=archival_bucket,json=archivalBucket,proto3" json:"archival_bucket,omitempty"`
	BadBinaries             *BadBinaries       `protobuf:"bytes,3,opt,name=bad_binaries,json=badBinaries,proto3" json:"bad_binaries,omitempty"`
	HistoryArchivalState    ArchivalState      `protobuf:"varint,4,opt,name=history_archival_state,json=historyArchivalState,proto3,enum=ArchivalState" json:"history_archival_state,omitempty"`
	HistoryArchivalUri      string             `protobuf:"bytes,5,opt,name=history_archival_uri,json=historyArchivalUri,proto3" json:"history_archival_uri,omitempty"`
	VisibilityArchivalState ArchivalState      `protobuf:"varint,6,opt,name=visibility_archival_state,json=visibilityArchivalState,proto3,enum=ArchivalState" json:"visibility_archival_state,omitempty"`
	VisibilityArchivalUri   string             `protobuf:"bytes,7,opt,name=visibility_archival_uri,json=visibilityArchivalUri,proto3" json:"visibility_archival_uri,omitempty"`
}

func (x *DomainConfig) Reset() {
	*x = DomainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfig) ProtoMessage() {}

func (x *DomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfig.ProtoReflect.Descriptor instead.
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *DomainConfig) GetRetention() *duration.Duration {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *DomainConfig) GetArchivalBucket() string {
	if x != nil {
		return x.ArchivalBucket
	}
	return ""
}

func (x *DomainConfig) GetBadBinaries() *BadBinaries {
	if x != nil {
		return x.BadBinaries
	}
	return nil
}

func (x *DomainConfig) GetHistoryArchivalState() ArchivalState {
	if x != nil {
		return x.HistoryArchivalState
	}
	return ArchivalState_ARCHIVAL_STATE_UNSPECIFIED
}

func (x *DomainConfig) GetHistoryArchivalUri() string {
	if x != nil {
		return x.HistoryArchivalUri
	}
	return ""
}

func (x *DomainConfig) GetVisibilityArchivalState() ArchivalState {
	if x != nil {
		return x.VisibilityArchivalState
	}
	return ArchivalState_ARCHIVAL_STATE_UNSPECIFIED
}

func (x *DomainConfig) GetVisibilityArchivalUri() string {
	if x != nil {
		return x.VisibilityArchivalUri
	}
	return ""
}

type BadBinaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binaries map[string]*BadBinaryInfo `protobuf:"bytes,1,rep,name=binaries,proto3" json:"binaries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BadBinaries) Reset() {
	*x = BadBinaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadBinaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadBinaries) ProtoMessage() {}

func (x *BadBinaries) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadBinaries.ProtoReflect.Descriptor instead.
func (*BadBinaries) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *BadBinaries) GetBinaries() map[string]*BadBinaryInfo {
	if x != nil {
		return x.Binaries
	}
	return nil
}

type BadBinaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason     string               `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Operator   string               `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *BadBinaryInfo) Reset() {
	*x = BadBinaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadBinaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadBinaryInfo) ProtoMessage() {}

func (x *BadBinaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadBinaryInfo.ProtoReflect.Descriptor instead.
func (*BadBinaryInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *BadBinaryInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BadBinaryInfo) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BadBinaryInfo) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type ActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               int64                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ScheduledEventBatchId int64                `protobuf:"varint,2,opt,name=scheduled_event_batch_id,json=scheduledEventBatchId,proto3" json:"scheduled_event_batch_id,omitempty"`
	ScheduledEvent        *HistoryEvent        `protobuf:"bytes,3,opt,name=scheduled_event,json=scheduledEvent,proto3" json:"scheduled_event,omitempty"`
	ScheduledTime         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedId             int64                `protobuf:"varint,5,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	StartedEvent          *HistoryEvent        `protobuf:"bytes,6,opt,name=started_event,json=startedEvent,proto3" json:"started_event,omitempty"`
	StartedTime           *timestamp.Timestamp `protobuf:"bytes,7,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	ActivityId            string               `protobuf:"bytes,8,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RequestId             string               `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *duration.Duration `protobuf:"bytes,10,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToCloseTimeout *duration.Duration `protobuf:"bytes,11,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout         *duration.Duration   `protobuf:"bytes,12,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout            *duration.Duration   `protobuf:"bytes,13,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	CancelRequested             bool                 `protobuf:"varint,14,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	CancelRequestId             int64                `protobuf:"varint,15,opt,name=cancel_request_id,json=cancelRequestId,proto3" json:"cancel_request_id,omitempty"`
	TimerTaskStatus             int32                `protobuf:"varint,16,opt,name=timer_task_status,json=timerTaskStatus,proto3" json:"timer_task_status,omitempty"`
	Attempt                     int32                `protobuf:"varint,17,opt,name=attempt,proto3" json:"attempt,omitempty"`
	TaskList                    string               `protobuf:"bytes,18,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	StartedIdentity             string               `protobuf:"bytes,19,opt,name=started_identity,json=startedIdentity,proto3" json:"started_identity,omitempty"`
	HasRetryPolicy              bool                 `protobuf:"varint,20,opt,name=has_retry_policy,json=hasRetryPolicy,proto3" json:"has_retry_policy,omitempty"`
	RetryInitialInterval        *duration.Duration   `protobuf:"bytes,21,opt,name=retry_initial_interval,json=retryInitialInterval,proto3" json:"retry_initial_interval,omitempty"`
	RetryMaximumInterval        *duration.Duration   `protobuf:"bytes,22,opt,name=retry_maximum_interval,json=retryMaximumInterval,proto3" json:"retry_maximum_interval,omitempty"`
	RetryMaximumAttempts        int32                `protobuf:"varint,23,opt,name=retry_maximum_attempts,json=retryMaximumAttempts,proto3" json:"retry_maximum_attempts,omitempty"`
	RetryExpirationTime         *timestamp.Timestamp `protobuf:"bytes,24,opt,name=retry_expiration_time,json=retryExpirationTime,proto3" json:"retry_expiration_time,omitempty"`
	RetryBackoffCoefficient     float64              `protobuf:"fixed64,25,opt,name=retry_backoff_coefficient,json=retryBackoffCoefficient,proto3" json:"retry_backoff_coefficient,omitempty"`
	RetryNonRetryableErrorTypes []string             `protobuf:"bytes,26,rep,name=retry_non_retryable_error_types,json=retryNonRetryableErrorTypes,proto3" json:"retry_non_retryable_error_types,omitempty"`
	RetryLastFailure            *Failure             `protobuf:"bytes,27,opt,name=retry_last_failure,json=retryLastFailure,proto3" json:"retry_last_failure,omitempty"`
	RetryLastWorkerIdentity     string               `protobuf:"bytes,28,opt,name=retry_last_worker_identity,json=retryLastWorkerIdentity,proto3" json:"retry_last_worker_identity,omitempty"`
	DomainId                    string               `protobuf:"bytes,29,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	ScheduleId                  int64                `protobuf:"varint,30,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityInfo) Reset() {
	*x = ActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfo) ProtoMessage() {}

func (x *ActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfo.ProtoReflect.Descriptor instead.
func (*ActivityInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *ActivityInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ActivityInfo) GetScheduledEventBatchId() int64 {
	if x != nil {
		return x.ScheduledEventBatchId
	}
	return 0
}

func (x *ActivityInfo) GetScheduledEvent() *HistoryEvent {
	if x != nil {
		return x.ScheduledEvent
	}
	return nil
}

func (x *ActivityInfo) GetScheduledTime() *timestamp.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *ActivityInfo) GetStartedId() int64 {
	if x != nil {
		return x.StartedId
	}
	return 0
}

func (x *ActivityInfo) GetStartedEvent() *HistoryEvent {
	if x != nil {
		return x.StartedEvent
	}
	return nil
}

func (x *ActivityInfo) GetStartedTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *ActivityInfo) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityInfo) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ActivityInfo) GetScheduleToStartTimeout() *duration.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ActivityInfo) GetScheduleToCloseTimeout() *duration.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ActivityInfo) GetStartToCloseTimeout() *duration.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ActivityInfo) GetHeartbeatTimeout() *duration.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ActivityInfo) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

func (x *ActivityInfo) GetCancelRequestId() int64 {
	if x != nil {
		return x.CancelRequestId
	}
	return 0
}

func (x *ActivityInfo) GetTimerTaskStatus() int32 {
	if x != nil {
		return x.TimerTaskStatus
	}
	return 0
}

func (x *ActivityInfo) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *ActivityInfo) GetTaskList() string {
	if x != nil {
		return x.TaskList
	}
	return ""
}

func (x *ActivityInfo) GetStartedIdentity() string {
	if x != nil {
		return x.StartedIdentity
	}
	return ""
}

func (x *ActivityInfo) GetHasRetryPolicy() bool {
	if x != nil {
		return x.HasRetryPolicy
	}
	return false
}

func (x *ActivityInfo) GetRetryInitialInterval() *duration.Duration {
	if x != nil {
		return x.RetryInitialInterval
	}
	return nil
}

func (x *ActivityInfo) GetRetryMaximumInterval() *duration.Duration {
	if x != nil {
		return x.RetryMaximumInterval
	}
	return nil
}

func (x *ActivityInfo) GetRetryMaximumAttempts() int32 {
	if x != nil {
		return x.RetryMaximumAttempts
	}
	return 0
}

func (x *ActivityInfo) GetRetryExpirationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RetryExpirationTime
	}
	return nil
}

func (x *ActivityInfo) GetRetryBackoffCoefficient() float64 {
	if x != nil {
		return x.RetryBackoffCoefficient
	}
	return 0
}

func (x *ActivityInfo) GetRetryNonRetryableErrorTypes() []string {
	if x != nil {
		return x.RetryNonRetryableErrorTypes
	}
	return nil
}

func (x *ActivityInfo) GetRetryLastFailure() *Failure {
	if x != nil {
		return x.RetryLastFailure
	}
	return nil
}

func (x *ActivityInfo) GetRetryLastWorkerIdentity() string {
	if x != nil {
		return x.RetryLastWorkerIdentity
	}
	return ""
}

func (x *ActivityInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ActivityInfo) GetScheduleId() int64 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type HistoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   int64                `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	EventType EventType            `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=EventType" json:"event_type,omitempty"`
	Version   int64                `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	TaskId    int64                `protobuf:"varint,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Types that are assignable to Attributes:
	//	*HistoryEvent_WorkflowExecutionStartedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCompletedEventAttributes
	//	*HistoryEvent_WorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_WorkflowExecutionTimedOutEventAttributes
	//	*HistoryEvent_DecisionTaskScheduledEventAttributes
	//	*HistoryEvent_DecisionTaskStartedEventAttributes
	//	*HistoryEvent_DecisionTaskCompletedEventAttributes
	//	*HistoryEvent_DecisionTaskTimedOutEventAttributes
	//	*HistoryEvent_DecisionTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskScheduledEventAttributes
	//	*HistoryEvent_ActivityTaskStartedEventAttributes
	//	*HistoryEvent_ActivityTaskCompletedEventAttributes
	//	*HistoryEvent_ActivityTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskTimedOutEventAttributes
	//	*HistoryEvent_TimerStartedEventAttributes
	//	*HistoryEvent_TimerFiredEventAttributes
	//	*HistoryEvent_ActivityTaskCancelRequestedEventAttributes
	//	*HistoryEvent_ActivityTaskCanceledEventAttributes
	//	*HistoryEvent_TimerCanceledEventAttributes
	//	*HistoryEvent_MarkerRecordedEventAttributes
	//	*HistoryEvent_WorkflowExecutionSignaledEventAttributes
	//	*HistoryEvent_WorkflowExecutionTerminatedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCanceledEventAttributes
	//	*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes
	//	*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes
	//	*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes
	//	*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes
	//	*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes
	Attributes isHistoryEvent_Attributes `protobuf_oneof:"attributes"`
}

func (x *HistoryEvent) Reset() {
	*x = HistoryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryEvent) ProtoMessage() {}

func (x *HistoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryEvent.ProtoReflect.Descriptor instead.
func (*HistoryEvent) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *HistoryEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *HistoryEvent) GetEventTime() *timestamp.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *HistoryEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *HistoryEvent) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HistoryEvent) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (m *HistoryEvent) GetAttributes() isHistoryEvent_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionStartedEventAttributes() *WorkflowExecutionStartedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionStartedEventAttributes); ok {
		return x.WorkflowExecutionStartedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionCompletedEventAttributes() *WorkflowExecutionCompletedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionCompletedEventAttributes); ok {
		return x.WorkflowExecutionCompletedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionFailedEventAttributes() *WorkflowExecutionFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionFailedEventAttributes); ok {
		return x.WorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionTimedOutEventAttributes() *WorkflowExecutionTimedOutEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes); ok {
		return x.WorkflowExecutionTimedOutEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetDecisionTaskScheduledEventAttributes() *DecisionTaskScheduledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_DecisionTaskScheduledEventAttributes); ok {
		return x.DecisionTaskScheduledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetDecisionTaskStartedEventAttributes() *DecisionTaskStartedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_DecisionTaskStartedEventAttributes); ok {
		return x.DecisionTaskStartedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetDecisionTaskCompletedEventAttributes() *DecisionTaskCompletedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_DecisionTaskCompletedEventAttributes); ok {
		return x.DecisionTaskCompletedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetDecisionTaskTimedOutEventAttributes() *DecisionTaskTimedOutEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_DecisionTaskTimedOutEventAttributes); ok {
		return x.DecisionTaskTimedOutEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetDecisionTaskFailedEventAttributes() *DecisionTaskFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_DecisionTaskFailedEventAttributes); ok {
		return x.DecisionTaskFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskScheduledEventAttributes() *ActivityTaskScheduledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskScheduledEventAttributes); ok {
		return x.ActivityTaskScheduledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskStartedEventAttributes() *ActivityTaskStartedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskStartedEventAttributes); ok {
		return x.ActivityTaskStartedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskCompletedEventAttributes() *ActivityTaskCompletedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskCompletedEventAttributes); ok {
		return x.ActivityTaskCompletedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskFailedEventAttributes() *ActivityTaskFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskFailedEventAttributes); ok {
		return x.ActivityTaskFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskTimedOutEventAttributes() *ActivityTaskTimedOutEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskTimedOutEventAttributes); ok {
		return x.ActivityTaskTimedOutEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetTimerStartedEventAttributes() *TimerStartedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_TimerStartedEventAttributes); ok {
		return x.TimerStartedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetTimerFiredEventAttributes() *TimerFiredEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_TimerFiredEventAttributes); ok {
		return x.TimerFiredEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskCancelRequestedEventAttributes() *ActivityTaskCancelRequestedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes); ok {
		return x.ActivityTaskCancelRequestedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetActivityTaskCanceledEventAttributes() *ActivityTaskCanceledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ActivityTaskCanceledEventAttributes); ok {
		return x.ActivityTaskCanceledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetTimerCanceledEventAttributes() *TimerCanceledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_TimerCanceledEventAttributes); ok {
		return x.TimerCanceledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetMarkerRecordedEventAttributes() *MarkerRecordedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_MarkerRecordedEventAttributes); ok {
		return x.MarkerRecordedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionSignaledEventAttributes() *WorkflowExecutionSignaledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionSignaledEventAttributes); ok {
		return x.WorkflowExecutionSignaledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionTerminatedEventAttributes() *WorkflowExecutionTerminatedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes); ok {
		return x.WorkflowExecutionTerminatedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionCancelRequestedEventAttributes() *WorkflowExecutionCancelRequestedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes); ok {
		return x.WorkflowExecutionCancelRequestedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionCanceledEventAttributes() *WorkflowExecutionCanceledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionCanceledEventAttributes); ok {
		return x.WorkflowExecutionCanceledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetRequestCancelExternalWorkflowExecutionInitiatedEventAttributes() *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetRequestCancelExternalWorkflowExecutionFailedEventAttributes() *RequestCancelExternalWorkflowExecutionFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetExternalWorkflowExecutionCancelRequestedEventAttributes() *ExternalWorkflowExecutionCancelRequestedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes); ok {
		return x.ExternalWorkflowExecutionCancelRequestedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetWorkflowExecutionContinuedAsNewEventAttributes() *WorkflowExecutionContinuedAsNewEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes); ok {
		return x.WorkflowExecutionContinuedAsNewEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetStartChildWorkflowExecutionInitiatedEventAttributes() *StartChildWorkflowExecutionInitiatedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes); ok {
		return x.StartChildWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetStartChildWorkflowExecutionFailedEventAttributes() *StartChildWorkflowExecutionFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes); ok {
		return x.StartChildWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetChildWorkflowExecutionStartedEventAttributes() *ChildWorkflowExecutionStartedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes); ok {
		return x.ChildWorkflowExecutionStartedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetChildWorkflowExecutionCompletedEventAttributes() *ChildWorkflowExecutionCompletedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes); ok {
		return x.ChildWorkflowExecutionCompletedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetChildWorkflowExecutionFailedEventAttributes() *ChildWorkflowExecutionFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes); ok {
		return x.ChildWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetChildWorkflowExecutionCanceledEventAttributes() *ChildWorkflowExecutionCanceledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes); ok {
		return x.ChildWorkflowExecutionCanceledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetChildWorkflowExecutionTimedOutEventAttributes() *ChildWorkflowExecutionTimedOutEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes); ok {
		return x.ChildWorkflowExecutionTimedOutEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetChildWorkflowExecutionTerminatedEventAttributes() *ChildWorkflowExecutionTerminatedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes); ok {
		return x.ChildWorkflowExecutionTerminatedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetSignalExternalWorkflowExecutionInitiatedEventAttributes() *SignalExternalWorkflowExecutionInitiatedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes); ok {
		return x.SignalExternalWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetSignalExternalWorkflowExecutionFailedEventAttributes() *SignalExternalWorkflowExecutionFailedEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes); ok {
		return x.SignalExternalWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetExternalWorkflowExecutionSignaledEventAttributes() *ExternalWorkflowExecutionSignaledEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes); ok {
		return x.ExternalWorkflowExecutionSignaledEventAttributes
	}
	return nil
}

func (x *HistoryEvent) GetUpsertWorkflowSearchAttributesEventAttributes() *UpsertWorkflowSearchAttributesEventAttributes {
	if x, ok := x.GetAttributes().(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes); ok {
		return x.UpsertWorkflowSearchAttributesEventAttributes
	}
	return nil
}

type isHistoryEvent_Attributes interface {
	isHistoryEvent_Attributes()
}

type HistoryEvent_WorkflowExecutionStartedEventAttributes struct {
	WorkflowExecutionStartedEventAttributes *WorkflowExecutionStartedEventAttributes `protobuf:"bytes,6,opt,name=workflow_execution_started_event_attributes,json=workflowExecutionStartedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionCompletedEventAttributes struct {
	WorkflowExecutionCompletedEventAttributes *WorkflowExecutionCompletedEventAttributes `protobuf:"bytes,7,opt,name=workflow_execution_completed_event_attributes,json=workflowExecutionCompletedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionFailedEventAttributes struct {
	WorkflowExecutionFailedEventAttributes *WorkflowExecutionFailedEventAttributes `protobuf:"bytes,8,opt,name=workflow_execution_failed_event_attributes,json=workflowExecutionFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionTimedOutEventAttributes struct {
	WorkflowExecutionTimedOutEventAttributes *WorkflowExecutionTimedOutEventAttributes `protobuf:"bytes,9,opt,name=workflow_execution_timed_out_event_attributes,json=workflowExecutionTimedOutEventAttributes,proto3,oneof"`
}

type HistoryEvent_DecisionTaskScheduledEventAttributes struct {
	DecisionTaskScheduledEventAttributes *DecisionTaskScheduledEventAttributes `protobuf:"bytes,10,opt,name=decision_task_scheduled_event_attributes,json=decisionTaskScheduledEventAttributes,proto3,oneof"`
}

type HistoryEvent_DecisionTaskStartedEventAttributes struct {
	DecisionTaskStartedEventAttributes *DecisionTaskStartedEventAttributes `protobuf:"bytes,11,opt,name=decision_task_started_event_attributes,json=decisionTaskStartedEventAttributes,proto3,oneof"`
}

type HistoryEvent_DecisionTaskCompletedEventAttributes struct {
	DecisionTaskCompletedEventAttributes *DecisionTaskCompletedEventAttributes `protobuf:"bytes,12,opt,name=decision_task_completed_event_attributes,json=decisionTaskCompletedEventAttributes,proto3,oneof"`
}

type HistoryEvent_DecisionTaskTimedOutEventAttributes struct {
	DecisionTaskTimedOutEventAttributes *DecisionTaskTimedOutEventAttributes `protobuf:"bytes,13,opt,name=decision_task_timed_out_event_attributes,json=decisionTaskTimedOutEventAttributes,proto3,oneof"`
}

type HistoryEvent_DecisionTaskFailedEventAttributes struct {
	DecisionTaskFailedEventAttributes *DecisionTaskFailedEventAttributes `protobuf:"bytes,14,opt,name=decision_task_failed_event_attributes,json=decisionTaskFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskScheduledEventAttributes struct {
	ActivityTaskScheduledEventAttributes *ActivityTaskScheduledEventAttributes `protobuf:"bytes,15,opt,name=activity_task_scheduled_event_attributes,json=activityTaskScheduledEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskStartedEventAttributes struct {
	ActivityTaskStartedEventAttributes *ActivityTaskStartedEventAttributes `protobuf:"bytes,16,opt,name=activity_task_started_event_attributes,json=activityTaskStartedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskCompletedEventAttributes struct {
	ActivityTaskCompletedEventAttributes *ActivityTaskCompletedEventAttributes `protobuf:"bytes,17,opt,name=activity_task_completed_event_attributes,json=activityTaskCompletedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskFailedEventAttributes struct {
	ActivityTaskFailedEventAttributes *ActivityTaskFailedEventAttributes `protobuf:"bytes,18,opt,name=activity_task_failed_event_attributes,json=activityTaskFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskTimedOutEventAttributes struct {
	ActivityTaskTimedOutEventAttributes *ActivityTaskTimedOutEventAttributes `protobuf:"bytes,19,opt,name=activity_task_timed_out_event_attributes,json=activityTaskTimedOutEventAttributes,proto3,oneof"`
}

type HistoryEvent_TimerStartedEventAttributes struct {
	TimerStartedEventAttributes *TimerStartedEventAttributes `protobuf:"bytes,20,opt,name=timer_started_event_attributes,json=timerStartedEventAttributes,proto3,oneof"`
}

type HistoryEvent_TimerFiredEventAttributes struct {
	TimerFiredEventAttributes *TimerFiredEventAttributes `protobuf:"bytes,21,opt,name=timer_fired_event_attributes,json=timerFiredEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskCancelRequestedEventAttributes struct {
	ActivityTaskCancelRequestedEventAttributes *ActivityTaskCancelRequestedEventAttributes `protobuf:"bytes,22,opt,name=activity_task_cancel_requested_event_attributes,json=activityTaskCancelRequestedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ActivityTaskCanceledEventAttributes struct {
	ActivityTaskCanceledEventAttributes *ActivityTaskCanceledEventAttributes `protobuf:"bytes,23,opt,name=activity_task_canceled_event_attributes,json=activityTaskCanceledEventAttributes,proto3,oneof"`
}

type HistoryEvent_TimerCanceledEventAttributes struct {
	TimerCanceledEventAttributes *TimerCanceledEventAttributes `protobuf:"bytes,24,opt,name=timer_canceled_event_attributes,json=timerCanceledEventAttributes,proto3,oneof"`
}

type HistoryEvent_MarkerRecordedEventAttributes struct {
	MarkerRecordedEventAttributes *MarkerRecordedEventAttributes `protobuf:"bytes,25,opt,name=marker_recorded_event_attributes,json=markerRecordedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionSignaledEventAttributes struct {
	WorkflowExecutionSignaledEventAttributes *WorkflowExecutionSignaledEventAttributes `protobuf:"bytes,26,opt,name=workflow_execution_signaled_event_attributes,json=workflowExecutionSignaledEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionTerminatedEventAttributes struct {
	WorkflowExecutionTerminatedEventAttributes *WorkflowExecutionTerminatedEventAttributes `protobuf:"bytes,27,opt,name=workflow_execution_terminated_event_attributes,json=workflowExecutionTerminatedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes struct {
	WorkflowExecutionCancelRequestedEventAttributes *WorkflowExecutionCancelRequestedEventAttributes `protobuf:"bytes,28,opt,name=workflow_execution_cancel_requested_event_attributes,json=workflowExecutionCancelRequestedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionCanceledEventAttributes struct {
	WorkflowExecutionCanceledEventAttributes *WorkflowExecutionCanceledEventAttributes `protobuf:"bytes,29,opt,name=workflow_execution_canceled_event_attributes,json=workflowExecutionCanceledEventAttributes,proto3,oneof"`
}

type HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	RequestCancelExternalWorkflowExecutionInitiatedEventAttributes *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,30,opt,name=request_cancel_external_workflow_execution_initiated_event_attributes,json=requestCancelExternalWorkflowExecutionInitiatedEventAttributes,proto3,oneof"`
}

type HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	RequestCancelExternalWorkflowExecutionFailedEventAttributes *RequestCancelExternalWorkflowExecutionFailedEventAttributes `protobuf:"bytes,31,opt,name=request_cancel_external_workflow_execution_failed_event_attributes,json=requestCancelExternalWorkflowExecutionFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	ExternalWorkflowExecutionCancelRequestedEventAttributes *ExternalWorkflowExecutionCancelRequestedEventAttributes `protobuf:"bytes,32,opt,name=external_workflow_execution_cancel_requested_event_attributes,json=externalWorkflowExecutionCancelRequestedEventAttributes,proto3,oneof"`
}

type HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes struct {
	WorkflowExecutionContinuedAsNewEventAttributes *WorkflowExecutionContinuedAsNewEventAttributes `protobuf:"bytes,33,opt,name=workflow_execution_continued_as_new_event_attributes,json=workflowExecutionContinuedAsNewEventAttributes,proto3,oneof"`
}

type HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes struct {
	StartChildWorkflowExecutionInitiatedEventAttributes *StartChildWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,34,opt,name=start_child_workflow_execution_initiated_event_attributes,json=startChildWorkflowExecutionInitiatedEventAttributes,proto3,oneof"`
}

type HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes struct {
	StartChildWorkflowExecutionFailedEventAttributes *StartChildWorkflowExecutionFailedEventAttributes `protobuf:"bytes,35,opt,name=start_child_workflow_execution_failed_event_attributes,json=startChildWorkflowExecutionFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ChildWorkflowExecutionStartedEventAttributes struct {
	ChildWorkflowExecutionStartedEventAttributes *ChildWorkflowExecutionStartedEventAttributes `protobuf:"bytes,36,opt,name=child_workflow_execution_started_event_attributes,json=childWorkflowExecutionStartedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes struct {
	ChildWorkflowExecutionCompletedEventAttributes *ChildWorkflowExecutionCompletedEventAttributes `protobuf:"bytes,37,opt,name=child_workflow_execution_completed_event_attributes,json=childWorkflowExecutionCompletedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ChildWorkflowExecutionFailedEventAttributes struct {
	ChildWorkflowExecutionFailedEventAttributes *ChildWorkflowExecutionFailedEventAttributes `protobuf:"bytes,38,opt,name=child_workflow_execution_failed_event_attributes,json=childWorkflowExecutionFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes struct {
	ChildWorkflowExecutionCanceledEventAttributes *ChildWorkflowExecutionCanceledEventAttributes `protobuf:"bytes,39,opt,name=child_workflow_execution_canceled_event_attributes,json=childWorkflowExecutionCanceledEventAttributes,proto3,oneof"`
}

type HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes struct {
	ChildWorkflowExecutionTimedOutEventAttributes *ChildWorkflowExecutionTimedOutEventAttributes `protobuf:"bytes,40,opt,name=child_workflow_execution_timed_out_event_attributes,json=childWorkflowExecutionTimedOutEventAttributes,proto3,oneof"`
}

type HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes struct {
	ChildWorkflowExecutionTerminatedEventAttributes *ChildWorkflowExecutionTerminatedEventAttributes `protobuf:"bytes,41,opt,name=child_workflow_execution_terminated_event_attributes,json=childWorkflowExecutionTerminatedEventAttributes,proto3,oneof"`
}

type HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes struct {
	SignalExternalWorkflowExecutionInitiatedEventAttributes *SignalExternalWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,42,opt,name=signal_external_workflow_execution_initiated_event_attributes,json=signalExternalWorkflowExecutionInitiatedEventAttributes,proto3,oneof"`
}

type HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes struct {
	SignalExternalWorkflowExecutionFailedEventAttributes *SignalExternalWorkflowExecutionFailedEventAttributes `protobuf:"bytes,43,opt,name=signal_external_workflow_execution_failed_event_attributes,json=signalExternalWorkflowExecutionFailedEventAttributes,proto3,oneof"`
}

type HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes struct {
	ExternalWorkflowExecutionSignaledEventAttributes *ExternalWorkflowExecutionSignaledEventAttributes `protobuf:"bytes,44,opt,name=external_workflow_execution_signaled_event_attributes,json=externalWorkflowExecutionSignaledEventAttributes,proto3,oneof"`
}

type HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes struct {
	UpsertWorkflowSearchAttributesEventAttributes *UpsertWorkflowSearchAttributesEventAttributes `protobuf:"bytes,45,opt,name=upsert_workflow_search_attributes_event_attributes,json=upsertWorkflowSearchAttributesEventAttributes,proto3,oneof"`
}

func (*HistoryEvent_WorkflowExecutionStartedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionCompletedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionTimedOutEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_DecisionTaskScheduledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_DecisionTaskStartedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_DecisionTaskCompletedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_DecisionTaskTimedOutEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_DecisionTaskFailedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskScheduledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskStartedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskCompletedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskFailedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskTimedOutEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_TimerStartedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_TimerFiredEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskCancelRequestedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ActivityTaskCanceledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_TimerCanceledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_MarkerRecordedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionSignaledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionTerminatedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_WorkflowExecutionCanceledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}

func (*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {
}

func (*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) isHistoryEvent_Attributes() {
}

func (*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}

func (*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}

func (*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {
}

func (*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) isHistoryEvent_Attributes() {}

func (*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) isHistoryEvent_Attributes() {}

type WorkflowExecutionStartedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowType            *WorkflowType      `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	ParentWorkflowDomain    string             `protobuf:"bytes,2,opt,name=parent_workflow_domain,json=parentWorkflowDomain,proto3" json:"parent_workflow_domain,omitempty"`
	ParentWorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=parent_workflow_execution,json=parentWorkflowExecution,proto3" json:"parent_workflow_execution,omitempty"`
	ParentInitiatedEventId  int64              `protobuf:"varint,4,opt,name=parent_initiated_event_id,json=parentInitiatedEventId,proto3" json:"parent_initiated_event_id,omitempty"`
	TaskList                *TaskList          `protobuf:"bytes,5,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                   *Payloads          `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *duration.Duration `protobuf:"bytes,7,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *duration.Duration `protobuf:"bytes,8,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	DecisionTaskTimeout     *duration.Duration     `protobuf:"bytes,9,opt,name=decision_task_timeout,json=decisionTaskTimeout,proto3" json:"decision_task_timeout,omitempty"`
	ContinuedExecutionRunId string                 `protobuf:"bytes,10,opt,name=continued_execution_run_id,json=continuedExecutionRunId,proto3" json:"continued_execution_run_id,omitempty"`
	Initiator               ContinueAsNewInitiator `protobuf:"varint,11,opt,name=initiator,proto3,enum=ContinueAsNewInitiator" json:"initiator,omitempty"`
	ContinuedFailure        *Failure               `protobuf:"bytes,12,opt,name=continued_failure,json=continuedFailure,proto3" json:"continued_failure,omitempty"`
	LastCompletionResult    *Payloads              `protobuf:"bytes,13,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	// This is the runId when the WorkflowExecutionStarted event is written.
	OriginalExecutionRunId string `protobuf:"bytes,14,opt,name=original_execution_run_id,json=originalExecutionRunId,proto3" json:"original_execution_run_id,omitempty"`
	Identity               string `protobuf:"bytes,15,opt,name=identity,proto3" json:"identity,omitempty"`
	// This is the very first runId along the chain of ContinueAsNew and Reset.
	FirstExecutionRunId string       `protobuf:"bytes,16,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
	RetryPolicy         *RetryPolicy `protobuf:"bytes,17,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Attempt             int32        `protobuf:"varint,18,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// The absolute time at which workflow is timed out.
	// This time is passed without change to the next run/retry of a workflow.
	WorkflowExecutionExpirationTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=workflow_execution_expiration_time,json=workflowExecutionExpirationTime,proto3" json:"workflow_execution_expiration_time,omitempty"`
	CronSchedule                    string               `protobuf:"bytes,20,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	FirstDecisionTaskBackoff        *duration.Duration   `protobuf:"bytes,21,opt,name=first_decision_task_backoff,json=firstDecisionTaskBackoff,proto3" json:"first_decision_task_backoff,omitempty"`
	Memo                            *Memo                `protobuf:"bytes,22,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes                *SearchAttributes    `protobuf:"bytes,23,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	PrevAutoResetPoints             *ResetPoints         `protobuf:"bytes,24,opt,name=prev_auto_reset_points,json=prevAutoResetPoints,proto3" json:"prev_auto_reset_points,omitempty"`
	Header                          *Header              `protobuf:"bytes,25,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *WorkflowExecutionStartedEventAttributes) Reset() {
	*x = WorkflowExecutionStartedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionStartedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionStartedEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionStartedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionStartedEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionStartedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *WorkflowExecutionStartedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetParentWorkflowDomain() string {
	if x != nil {
		return x.ParentWorkflowDomain
	}
	return ""
}

func (x *WorkflowExecutionStartedEventAttributes) GetParentWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.ParentWorkflowExecution
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetParentInitiatedEventId() int64 {
	if x != nil {
		return x.ParentInitiatedEventId
	}
	return 0
}

func (x *WorkflowExecutionStartedEventAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetWorkflowExecutionTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetWorkflowRunTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetDecisionTaskTimeout() *duration.Duration {
	if x != nil {
		return x.DecisionTaskTimeout
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetContinuedExecutionRunId() string {
	if x != nil {
		return x.ContinuedExecutionRunId
	}
	return ""
}

func (x *WorkflowExecutionStartedEventAttributes) GetInitiator() ContinueAsNewInitiator {
	if x != nil {
		return x.Initiator
	}
	return ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED
}

func (x *WorkflowExecutionStartedEventAttributes) GetContinuedFailure() *Failure {
	if x != nil {
		return x.ContinuedFailure
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetLastCompletionResult() *Payloads {
	if x != nil {
		return x.LastCompletionResult
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetOriginalExecutionRunId() string {
	if x != nil {
		return x.OriginalExecutionRunId
	}
	return ""
}

func (x *WorkflowExecutionStartedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *WorkflowExecutionStartedEventAttributes) GetFirstExecutionRunId() string {
	if x != nil {
		return x.FirstExecutionRunId
	}
	return ""
}

func (x *WorkflowExecutionStartedEventAttributes) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *WorkflowExecutionStartedEventAttributes) GetWorkflowExecutionExpirationTime() *timestamp.Timestamp {
	if x != nil {
		return x.WorkflowExecutionExpirationTime
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *WorkflowExecutionStartedEventAttributes) GetFirstDecisionTaskBackoff() *duration.Duration {
	if x != nil {
		return x.FirstDecisionTaskBackoff
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetPrevAutoResetPoints() *ResetPoints {
	if x != nil {
		return x.PrevAutoResetPoints
	}
	return nil
}

func (x *WorkflowExecutionStartedEventAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type WorkflowExecutionCompletedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                       *Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	DecisionTaskCompletedEventId int64     `protobuf:"varint,2,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
}

func (x *WorkflowExecutionCompletedEventAttributes) Reset() {
	*x = WorkflowExecutionCompletedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionCompletedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionCompletedEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionCompletedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionCompletedEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *WorkflowExecutionCompletedEventAttributes) GetResult() *Payloads {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WorkflowExecutionCompletedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

type WorkflowExecutionFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure                      *Failure   `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	RetryState                   RetryState `protobuf:"varint,2,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
	DecisionTaskCompletedEventId int64      `protobuf:"varint,3,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
}

func (x *WorkflowExecutionFailedEventAttributes) Reset() {
	*x = WorkflowExecutionFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionFailedEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowExecutionFailedEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *WorkflowExecutionFailedEventAttributes) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

func (x *WorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

type WorkflowExecutionTimedOutEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryState RetryState `protobuf:"varint,1,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *WorkflowExecutionTimedOutEventAttributes) Reset() {
	*x = WorkflowExecutionTimedOutEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionTimedOutEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionTimedOutEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionTimedOutEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionTimedOutEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowExecutionTimedOutEventAttributes) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type WorkflowExecutionContinuedAsNewEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewExecutionRunId string        `protobuf:"bytes,1,opt,name=new_execution_run_id,json=newExecutionRunId,proto3" json:"new_execution_run_id,omitempty"`
	WorkflowType      *WorkflowType `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList          *TaskList     `protobuf:"bytes,3,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input             *Payloads     `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// workflow_execution_timeout is omitted as it shouldn'be overridden from within a workflow.
	// Timeout of a single workflow run.
	WorkflowRunTimeout *duration.Duration `protobuf:"bytes,5,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	DecisionTaskTimeout          *duration.Duration     `protobuf:"bytes,6,opt,name=decision_task_timeout,json=decisionTaskTimeout,proto3" json:"decision_task_timeout,omitempty"`
	DecisionTaskCompletedEventId int64                  `protobuf:"varint,7,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	BackoffStartInterval         *duration.Duration     `protobuf:"bytes,8,opt,name=backoff_start_interval,json=backoffStartInterval,proto3" json:"backoff_start_interval,omitempty"`
	Initiator                    ContinueAsNewInitiator `protobuf:"varint,9,opt,name=initiator,proto3,enum=ContinueAsNewInitiator" json:"initiator,omitempty"`
	Failure                      *Failure               `protobuf:"bytes,10,opt,name=failure,proto3" json:"failure,omitempty"`
	LastCompletionResult         *Payloads              `protobuf:"bytes,11,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	Header                       *Header                `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	Memo                         *Memo                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes             *SearchAttributes      `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) Reset() {
	*x = WorkflowExecutionContinuedAsNewEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionContinuedAsNewEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionContinuedAsNewEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionContinuedAsNewEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetNewExecutionRunId() string {
	if x != nil {
		return x.NewExecutionRunId
	}
	return ""
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowRunTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetDecisionTaskTimeout() *duration.Duration {
	if x != nil {
		return x.DecisionTaskTimeout
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetBackoffStartInterval() *duration.Duration {
	if x != nil {
		return x.BackoffStartInterval
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetInitiator() ContinueAsNewInitiator {
	if x != nil {
		return x.Initiator
	}
	return ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetLastCompletionResult() *Payloads {
	if x != nil {
		return x.LastCompletionResult
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *WorkflowExecutionContinuedAsNewEventAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type DecisionTaskScheduledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList *TaskList `protobuf:"bytes,1,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout *duration.Duration `protobuf:"bytes,2,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	Attempt             int32              `protobuf:"varint,3,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (x *DecisionTaskScheduledEventAttributes) Reset() {
	*x = DecisionTaskScheduledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTaskScheduledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTaskScheduledEventAttributes) ProtoMessage() {}

func (x *DecisionTaskScheduledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTaskScheduledEventAttributes.ProtoReflect.Descriptor instead.
func (*DecisionTaskScheduledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *DecisionTaskScheduledEventAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *DecisionTaskScheduledEventAttributes) GetStartToCloseTimeout() *duration.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *DecisionTaskScheduledEventAttributes) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

type DecisionTaskStartedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId int64  `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	Identity         string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId        string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DecisionTaskStartedEventAttributes) Reset() {
	*x = DecisionTaskStartedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTaskStartedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTaskStartedEventAttributes) ProtoMessage() {}

func (x *DecisionTaskStartedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTaskStartedEventAttributes.ProtoReflect.Descriptor instead.
func (*DecisionTaskStartedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *DecisionTaskStartedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *DecisionTaskStartedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DecisionTaskStartedEventAttributes) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DecisionTaskCompletedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId int64  `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64  `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Identity         string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum   string `protobuf:"bytes,4,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (x *DecisionTaskCompletedEventAttributes) Reset() {
	*x = DecisionTaskCompletedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTaskCompletedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTaskCompletedEventAttributes) ProtoMessage() {}

func (x *DecisionTaskCompletedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTaskCompletedEventAttributes.ProtoReflect.Descriptor instead.
func (*DecisionTaskCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *DecisionTaskCompletedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *DecisionTaskCompletedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *DecisionTaskCompletedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DecisionTaskCompletedEventAttributes) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

type DecisionTaskTimedOutEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId int64       `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64       `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	TimeoutType      TimeoutType `protobuf:"varint,3,opt,name=timeout_type,json=timeoutType,proto3,enum=TimeoutType" json:"timeout_type,omitempty"`
}

func (x *DecisionTaskTimedOutEventAttributes) Reset() {
	*x = DecisionTaskTimedOutEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTaskTimedOutEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTaskTimedOutEventAttributes) ProtoMessage() {}

func (x *DecisionTaskTimedOutEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTaskTimedOutEventAttributes.ProtoReflect.Descriptor instead.
func (*DecisionTaskTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *DecisionTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *DecisionTaskTimedOutEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *DecisionTaskTimedOutEventAttributes) GetTimeoutType() TimeoutType {
	if x != nil {
		return x.TimeoutType
	}
	return TimeoutType_TIMEOUT_TYPE_UNSPECIFIED
}

type DecisionTaskFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId int64                   `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64                   `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Cause            DecisionTaskFailedCause `protobuf:"varint,3,opt,name=cause,proto3,enum=DecisionTaskFailedCause" json:"cause,omitempty"`
	Failure          *Failure                `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity         string                  `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// For reset workflow.
	BaseRunId        string `protobuf:"bytes,6,opt,name=base_run_id,json=baseRunId,proto3" json:"base_run_id,omitempty"`
	NewRunId         string `protobuf:"bytes,7,opt,name=new_run_id,json=newRunId,proto3" json:"new_run_id,omitempty"`
	ForkEventVersion int64  `protobuf:"varint,8,opt,name=fork_event_version,json=forkEventVersion,proto3" json:"fork_event_version,omitempty"`
	BinaryChecksum   string `protobuf:"bytes,9,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (x *DecisionTaskFailedEventAttributes) Reset() {
	*x = DecisionTaskFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTaskFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTaskFailedEventAttributes) ProtoMessage() {}

func (x *DecisionTaskFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTaskFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*DecisionTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *DecisionTaskFailedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *DecisionTaskFailedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *DecisionTaskFailedEventAttributes) GetCause() DecisionTaskFailedCause {
	if x != nil {
		return x.Cause
	}
	return DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_UNSPECIFIED
}

func (x *DecisionTaskFailedEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *DecisionTaskFailedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DecisionTaskFailedEventAttributes) GetBaseRunId() string {
	if x != nil {
		return x.BaseRunId
	}
	return ""
}

func (x *DecisionTaskFailedEventAttributes) GetNewRunId() string {
	if x != nil {
		return x.NewRunId
	}
	return ""
}

func (x *DecisionTaskFailedEventAttributes) GetForkEventVersion() int64 {
	if x != nil {
		return x.ForkEventVersion
	}
	return 0
}

func (x *DecisionTaskFailedEventAttributes) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

type ActivityTaskScheduledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   string        `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType *ActivityType `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Domain       string        `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList     *TaskList     `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Header       *Header       `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Input        *Payloads     `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	// Indicates how long the caller is willing to wait for an activity completion.
	// Limits for how long retries are happening. Either this or start_to_close_timeout_seconds must be specified.
	ScheduleToCloseTimeout *duration.Duration `protobuf:"bytes,7,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	// Limits time an activity task can stay in a task list before a worker picks it up.
	// This timeout is always non retryable as all a retry would achieve is to put it back into the same list.
	// Defaults to schedule_to_close_timeout_seconds or workflow execution timeout if not specified.
	ScheduleToStartTimeout *duration.Duration `protobuf:"bytes,8,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	// Maximum time an activity is allowed to execute after a pick up by a worker.
	// This timeout is always retryable. Either this or schedule_to_close_timeout_seconds must be specified.
	StartToCloseTimeout *duration.Duration `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// Maximum time between successful worker heartbeats.
	HeartbeatTimeout             *duration.Duration `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	DecisionTaskCompletedEventId int64              `protobuf:"varint,11,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	// Activities are provided by a default retry policy controlled through the service dynamic configuration.
	// Retries are happening up to schedule_to_close_timeout.
	// To disable retries set retry_policy.maximum_attempts to 1.
	RetryPolicy *RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (x *ActivityTaskScheduledEventAttributes) Reset() {
	*x = ActivityTaskScheduledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskScheduledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskScheduledEventAttributes) ProtoMessage() {}

func (x *ActivityTaskScheduledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskScheduledEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskScheduledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *ActivityTaskScheduledEventAttributes) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityTaskScheduledEventAttributes) GetActivityType() *ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ActivityTaskScheduledEventAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetScheduleToCloseTimeout() *duration.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetScheduleToStartTimeout() *duration.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetStartToCloseTimeout() *duration.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetHeartbeatTimeout() *duration.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ActivityTaskScheduledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *ActivityTaskScheduledEventAttributes) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

type ActivityTaskStartedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId int64    `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	Identity         string   `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId        string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Attempt          int32    `protobuf:"varint,4,opt,name=attempt,proto3" json:"attempt,omitempty"`
	LastFailure      *Failure `protobuf:"bytes,5,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
}

func (x *ActivityTaskStartedEventAttributes) Reset() {
	*x = ActivityTaskStartedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskStartedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskStartedEventAttributes) ProtoMessage() {}

func (x *ActivityTaskStartedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskStartedEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskStartedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *ActivityTaskStartedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityTaskStartedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *ActivityTaskStartedEventAttributes) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ActivityTaskStartedEventAttributes) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *ActivityTaskStartedEventAttributes) GetLastFailure() *Failure {
	if x != nil {
		return x.LastFailure
	}
	return nil
}

type ActivityTaskCompletedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ScheduledEventId int64     `protobuf:"varint,2,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64     `protobuf:"varint,3,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Identity         string    `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *ActivityTaskCompletedEventAttributes) Reset() {
	*x = ActivityTaskCompletedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskCompletedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskCompletedEventAttributes) ProtoMessage() {}

func (x *ActivityTaskCompletedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskCompletedEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{20}
}

func (x *ActivityTaskCompletedEventAttributes) GetResult() *Payloads {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ActivityTaskCompletedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityTaskCompletedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ActivityTaskCompletedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type ActivityTaskFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure          *Failure   `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	ScheduledEventId int64      `protobuf:"varint,2,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64      `protobuf:"varint,3,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Identity         string     `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	RetryState       RetryState `protobuf:"varint,5,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *ActivityTaskFailedEventAttributes) Reset() {
	*x = ActivityTaskFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskFailedEventAttributes) ProtoMessage() {}

func (x *ActivityTaskFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{21}
}

func (x *ActivityTaskFailedEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *ActivityTaskFailedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityTaskFailedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ActivityTaskFailedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *ActivityTaskFailedEventAttributes) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type ActivityTaskTimedOutEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For retry activity, it may have a failure before timeout. It is stored as `cause` in `failure`.
	Failure          *Failure   `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	ScheduledEventId int64      `protobuf:"varint,2,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64      `protobuf:"varint,3,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState       RetryState `protobuf:"varint,4,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *ActivityTaskTimedOutEventAttributes) Reset() {
	*x = ActivityTaskTimedOutEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskTimedOutEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskTimedOutEventAttributes) ProtoMessage() {}

func (x *ActivityTaskTimedOutEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskTimedOutEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{22}
}

func (x *ActivityTaskTimedOutEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *ActivityTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityTaskTimedOutEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ActivityTaskTimedOutEventAttributes) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type ActivityTaskCancelRequestedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId             int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	DecisionTaskCompletedEventId int64 `protobuf:"varint,2,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
}

func (x *ActivityTaskCancelRequestedEventAttributes) Reset() {
	*x = ActivityTaskCancelRequestedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskCancelRequestedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskCancelRequestedEventAttributes) ProtoMessage() {}

func (x *ActivityTaskCancelRequestedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskCancelRequestedEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{23}
}

func (x *ActivityTaskCancelRequestedEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityTaskCancelRequestedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

type ActivityTaskCanceledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                      *Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	LatestCancelRequestedEventId int64     `protobuf:"varint,2,opt,name=latest_cancel_requested_event_id,json=latestCancelRequestedEventId,proto3" json:"latest_cancel_requested_event_id,omitempty"`
	ScheduledEventId             int64     `protobuf:"varint,3,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId               int64     `protobuf:"varint,4,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Identity                     string    `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *ActivityTaskCanceledEventAttributes) Reset() {
	*x = ActivityTaskCanceledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTaskCanceledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTaskCanceledEventAttributes) ProtoMessage() {}

func (x *ActivityTaskCanceledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTaskCanceledEventAttributes.ProtoReflect.Descriptor instead.
func (*ActivityTaskCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{24}
}

func (x *ActivityTaskCanceledEventAttributes) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ActivityTaskCanceledEventAttributes) GetLatestCancelRequestedEventId() int64 {
	if x != nil {
		return x.LatestCancelRequestedEventId
	}
	return 0
}

func (x *ActivityTaskCanceledEventAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityTaskCanceledEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ActivityTaskCanceledEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type TimerStartedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToFireTimeout           *duration.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3" json:"start_to_fire_timeout,omitempty"`
	DecisionTaskCompletedEventId int64              `protobuf:"varint,3,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
}

func (x *TimerStartedEventAttributes) Reset() {
	*x = TimerStartedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerStartedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerStartedEventAttributes) ProtoMessage() {}

func (x *TimerStartedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerStartedEventAttributes.ProtoReflect.Descriptor instead.
func (*TimerStartedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{25}
}

func (x *TimerStartedEventAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

func (x *TimerStartedEventAttributes) GetStartToFireTimeout() *duration.Duration {
	if x != nil {
		return x.StartToFireTimeout
	}
	return nil
}

func (x *TimerStartedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

type TimerFiredEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerId        string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	StartedEventId int64  `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (x *TimerFiredEventAttributes) Reset() {
	*x = TimerFiredEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerFiredEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerFiredEventAttributes) ProtoMessage() {}

func (x *TimerFiredEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerFiredEventAttributes.ProtoReflect.Descriptor instead.
func (*TimerFiredEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{26}
}

func (x *TimerFiredEventAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

func (x *TimerFiredEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

type TimerCanceledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerId                      string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	StartedEventId               int64  `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	DecisionTaskCompletedEventId int64  `protobuf:"varint,3,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Identity                     string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *TimerCanceledEventAttributes) Reset() {
	*x = TimerCanceledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerCanceledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerCanceledEventAttributes) ProtoMessage() {}

func (x *TimerCanceledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerCanceledEventAttributes.ProtoReflect.Descriptor instead.
func (*TimerCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{27}
}

func (x *TimerCanceledEventAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

func (x *TimerCanceledEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *TimerCanceledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *TimerCanceledEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type WorkflowExecutionCancelRequestedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause                     string             `protobuf:"bytes,1,opt,name=cause,proto3" json:"cause,omitempty"`
	ExternalInitiatedEventId  int64              `protobuf:"varint,2,opt,name=external_initiated_event_id,json=externalInitiatedEventId,proto3" json:"external_initiated_event_id,omitempty"`
	ExternalWorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=external_workflow_execution,json=externalWorkflowExecution,proto3" json:"external_workflow_execution,omitempty"`
	Identity                  string             `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *WorkflowExecutionCancelRequestedEventAttributes) Reset() {
	*x = WorkflowExecutionCancelRequestedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionCancelRequestedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionCancelRequestedEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionCancelRequestedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionCancelRequestedEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{28}
}

func (x *WorkflowExecutionCancelRequestedEventAttributes) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *WorkflowExecutionCancelRequestedEventAttributes) GetExternalInitiatedEventId() int64 {
	if x != nil {
		return x.ExternalInitiatedEventId
	}
	return 0
}

func (x *WorkflowExecutionCancelRequestedEventAttributes) GetExternalWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.ExternalWorkflowExecution
	}
	return nil
}

func (x *WorkflowExecutionCancelRequestedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type WorkflowExecutionCanceledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionTaskCompletedEventId int64     `protobuf:"varint,1,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Details                      *Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WorkflowExecutionCanceledEventAttributes) Reset() {
	*x = WorkflowExecutionCanceledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionCanceledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionCanceledEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionCanceledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionCanceledEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{29}
}

func (x *WorkflowExecutionCanceledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *WorkflowExecutionCanceledEventAttributes) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

type MarkerRecordedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkerName                   string               `protobuf:"bytes,1,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	Details                      map[string]*Payloads `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DecisionTaskCompletedEventId int64                `protobuf:"varint,3,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Header                       *Header              `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Failure                      *Failure             `protobuf:"bytes,5,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *MarkerRecordedEventAttributes) Reset() {
	*x = MarkerRecordedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkerRecordedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkerRecordedEventAttributes) ProtoMessage() {}

func (x *MarkerRecordedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkerRecordedEventAttributes.ProtoReflect.Descriptor instead.
func (*MarkerRecordedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{30}
}

func (x *MarkerRecordedEventAttributes) GetMarkerName() string {
	if x != nil {
		return x.MarkerName
	}
	return ""
}

func (x *MarkerRecordedEventAttributes) GetDetails() map[string]*Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *MarkerRecordedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *MarkerRecordedEventAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MarkerRecordedEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type WorkflowExecutionSignaledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalName string    `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input      *Payloads `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Identity   string    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *WorkflowExecutionSignaledEventAttributes) Reset() {
	*x = WorkflowExecutionSignaledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionSignaledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionSignaledEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionSignaledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionSignaledEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionSignaledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{31}
}

func (x *WorkflowExecutionSignaledEventAttributes) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *WorkflowExecutionSignaledEventAttributes) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowExecutionSignaledEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type WorkflowExecutionTerminatedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason   string    `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details  *Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity string    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *WorkflowExecutionTerminatedEventAttributes) Reset() {
	*x = WorkflowExecutionTerminatedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionTerminatedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionTerminatedEventAttributes) ProtoMessage() {}

func (x *WorkflowExecutionTerminatedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionTerminatedEventAttributes.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionTerminatedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{32}
}

func (x *WorkflowExecutionTerminatedEventAttributes) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WorkflowExecutionTerminatedEventAttributes) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *WorkflowExecutionTerminatedEventAttributes) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionTaskCompletedEventId int64              `protobuf:"varint,1,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Domain                       string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution            *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Control                      string             `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly            bool               `protobuf:"varint,5,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Reset() {
	*x = RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.ProtoReflect.Descriptor instead.
func (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{33}
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetChildWorkflowOnly() bool {
	if x != nil {
		return x.ChildWorkflowOnly
	}
	return false
}

type RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause                        CancelExternalWorkflowExecutionFailedCause `protobuf:"varint,1,opt,name=cause,proto3,enum=CancelExternalWorkflowExecutionFailedCause" json:"cause,omitempty"`
	DecisionTaskCompletedEventId int64                                      `protobuf:"varint,2,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Domain                       string                                     `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution            *WorkflowExecution                         `protobuf:"bytes,4,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	InitiatedEventId             int64                                      `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	Control                      string                                     `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Reset() {
	*x = RequestCancelExternalWorkflowExecutionFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelExternalWorkflowExecutionFailedEventAttributes) ProtoMessage() {}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelExternalWorkflowExecutionFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*RequestCancelExternalWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{34}
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetCause() CancelExternalWorkflowExecutionFailedCause {
	if x != nil {
		return x.Cause
	}
	return CancelExternalWorkflowExecutionFailedCause_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

type ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatedEventId  int64              `protobuf:"varint,1,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	Domain            string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *ExternalWorkflowExecutionCancelRequestedEventAttributes) Reset() {
	*x = ExternalWorkflowExecutionCancelRequestedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkflowExecutionCancelRequestedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkflowExecutionCancelRequestedEventAttributes) ProtoMessage() {}

func (x *ExternalWorkflowExecutionCancelRequestedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkflowExecutionCancelRequestedEventAttributes.ProtoReflect.Descriptor instead.
func (*ExternalWorkflowExecutionCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{35}
}

func (x *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type SignalExternalWorkflowExecutionInitiatedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionTaskCompletedEventId int64              `protobuf:"varint,1,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Domain                       string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution            *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	SignalName                   string             `protobuf:"bytes,4,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input                        *Payloads          `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Control                      string             `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly            bool               `protobuf:"varint,7,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) Reset() {
	*x = SignalExternalWorkflowExecutionInitiatedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalExternalWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalExternalWorkflowExecutionInitiatedEventAttributes.ProtoReflect.Descriptor instead.
func (*SignalExternalWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{36}
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetChildWorkflowOnly() bool {
	if x != nil {
		return x.ChildWorkflowOnly
	}
	return false
}

type SignalExternalWorkflowExecutionFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause                        SignalExternalWorkflowExecutionFailedCause `protobuf:"varint,1,opt,name=cause,proto3,enum=SignalExternalWorkflowExecutionFailedCause" json:"cause,omitempty"`
	DecisionTaskCompletedEventId int64                                      `protobuf:"varint,2,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	Domain                       string                                     `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution            *WorkflowExecution                         `protobuf:"bytes,4,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	InitiatedEventId             int64                                      `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	Control                      string                                     `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) Reset() {
	*x = SignalExternalWorkflowExecutionFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalExternalWorkflowExecutionFailedEventAttributes) ProtoMessage() {}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalExternalWorkflowExecutionFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*SignalExternalWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{37}
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) GetCause() SignalExternalWorkflowExecutionFailedCause {
	if x != nil {
		return x.Cause
	}
	return SignalExternalWorkflowExecutionFailedCause_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *SignalExternalWorkflowExecutionFailedEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

type ExternalWorkflowExecutionSignaledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatedEventId  int64              `protobuf:"varint,1,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	Domain            string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Control           string             `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) Reset() {
	*x = ExternalWorkflowExecutionSignaledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkflowExecutionSignaledEventAttributes) ProtoMessage() {}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkflowExecutionSignaledEventAttributes.ProtoReflect.Descriptor instead.
func (*ExternalWorkflowExecutionSignaledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{38}
}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ExternalWorkflowExecutionSignaledEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

type UpsertWorkflowSearchAttributesEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionTaskCompletedEventId int64             `protobuf:"varint,1,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	SearchAttributes             *SearchAttributes `protobuf:"bytes,2,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *UpsertWorkflowSearchAttributesEventAttributes) Reset() {
	*x = UpsertWorkflowSearchAttributesEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertWorkflowSearchAttributesEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertWorkflowSearchAttributesEventAttributes) ProtoMessage() {}

func (x *UpsertWorkflowSearchAttributesEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertWorkflowSearchAttributesEventAttributes.ProtoReflect.Descriptor instead.
func (*UpsertWorkflowSearchAttributesEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{39}
}

func (x *UpsertWorkflowSearchAttributesEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *UpsertWorkflowSearchAttributesEventAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionInitiatedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string        `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId   string        `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList     *TaskList     `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input        *Payloads     `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *duration.Duration `protobuf:"bytes,6,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *duration.Duration `protobuf:"bytes,7,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	DecisionTaskTimeout *duration.Duration `protobuf:"bytes,8,opt,name=decision_task_timeout,json=decisionTaskTimeout,proto3" json:"decision_task_timeout,omitempty"`
	// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy            ParentClosePolicy `protobuf:"varint,9,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=ParentClosePolicy" json:"parent_close_policy,omitempty"`
	Control                      string            `protobuf:"bytes,10,opt,name=control,proto3" json:"control,omitempty"`
	DecisionTaskCompletedEventId int64             `protobuf:"varint,11,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy WorkflowIdReusePolicy `protobuf:"varint,12,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *RetryPolicy          `protobuf:"bytes,13,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule          string                `protobuf:"bytes,14,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                *Header               `protobuf:"bytes,15,opt,name=header,proto3" json:"header,omitempty"`
	Memo                  *Memo                 `protobuf:"bytes,16,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes      *SearchAttributes     `protobuf:"bytes,17,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) Reset() {
	*x = StartChildWorkflowExecutionInitiatedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChildWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChildWorkflowExecutionInitiatedEventAttributes.ProtoReflect.Descriptor instead.
func (*StartChildWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{40}
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecutionTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowRunTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskTimeout() *duration.Duration {
	if x != nil {
		return x.DecisionTaskTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetParentClosePolicy() ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowIdReusePolicy() WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartChildWorkflowExecutionInitiatedEventAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                       string                                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId                   string                                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType                 *WorkflowType                          `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	Cause                        StartChildWorkflowExecutionFailedCause `protobuf:"varint,4,opt,name=cause,proto3,enum=StartChildWorkflowExecutionFailedCause" json:"cause,omitempty"`
	Control                      string                                 `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	InitiatedEventId             int64                                  `protobuf:"varint,6,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	DecisionTaskCompletedEventId int64                                  `protobuf:"varint,7,opt,name=decision_task_completed_event_id,json=decisionTaskCompletedEventId,proto3" json:"decision_task_completed_event_id,omitempty"`
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) Reset() {
	*x = StartChildWorkflowExecutionFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChildWorkflowExecutionFailedEventAttributes) ProtoMessage() {}

func (x *StartChildWorkflowExecutionFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChildWorkflowExecutionFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*StartChildWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{41}
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetCause() StartChildWorkflowExecutionFailedCause {
	if x != nil {
		return x.Cause
	}
	return StartChildWorkflowExecutionFailedCause_START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *StartChildWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if x != nil {
		return x.DecisionTaskCompletedEventId
	}
	return 0
}

type ChildWorkflowExecutionStartedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,2,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	Header            *Header            `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ChildWorkflowExecutionStartedEventAttributes) Reset() {
	*x = ChildWorkflowExecutionStartedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionStartedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionStartedEventAttributes) ProtoMessage() {}

func (x *ChildWorkflowExecutionStartedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionStartedEventAttributes.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionStartedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{42}
}

func (x *ChildWorkflowExecutionStartedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionStartedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionStartedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionStartedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionStartedEventAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type ChildWorkflowExecutionCompletedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *Payloads          `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Domain            string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64              `protobuf:"varint,6,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) Reset() {
	*x = ChildWorkflowExecutionCompletedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionCompletedEventAttributes) ProtoMessage() {}

func (x *ChildWorkflowExecutionCompletedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionCompletedEventAttributes.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{43}
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) GetResult() *Payloads {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionCompletedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionFailedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure           *Failure           `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	Domain            string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64              `protobuf:"varint,6,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState        RetryState         `protobuf:"varint,7,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *ChildWorkflowExecutionFailedEventAttributes) Reset() {
	*x = ChildWorkflowExecutionFailedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionFailedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionFailedEventAttributes) ProtoMessage() {}

func (x *ChildWorkflowExecutionFailedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionFailedEventAttributes.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{44}
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionFailedEventAttributes) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type ChildWorkflowExecutionCanceledEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details           *Payloads          `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Domain            string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,5,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64              `protobuf:"varint,6,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) Reset() {
	*x = ChildWorkflowExecutionCanceledEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionCanceledEventAttributes) ProtoMessage() {}

func (x *ChildWorkflowExecutionCanceledEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionCanceledEventAttributes.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{45}
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionCanceledEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionTimedOutEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,4,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64              `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState        RetryState         `protobuf:"varint,6,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) Reset() {
	*x = ChildWorkflowExecutionTimedOutEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionTimedOutEventAttributes) ProtoMessage() {}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionTimedOutEventAttributes.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{46}
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionTimedOutEventAttributes) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type ChildWorkflowExecutionTerminatedEventAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,4,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64              `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) Reset() {
	*x = ChildWorkflowExecutionTerminatedEventAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionTerminatedEventAttributes) ProtoMessage() {}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionTerminatedEventAttributes.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionTerminatedEventAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{47}
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionTerminatedEventAttributes) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

type WorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *WorkflowExecution) Reset() {
	*x = WorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecution) ProtoMessage() {}

func (x *WorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecution.ProtoReflect.Descriptor instead.
func (*WorkflowExecution) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{48}
}

func (x *WorkflowExecution) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowExecution) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type WorkflowType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WorkflowType) Reset() {
	*x = WorkflowType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowType) ProtoMessage() {}

func (x *WorkflowType) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowType.ProtoReflect.Descriptor instead.
func (*WorkflowType) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{49}
}

func (x *WorkflowType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Payloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payloads []*Payload `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *Payloads) Reset() {
	*x = Payloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payloads) ProtoMessage() {}

func (x *Payloads) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payloads.ProtoReflect.Descriptor instead.
func (*Payloads) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{50}
}

func (x *Payloads) GetPayloads() []*Payload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string][]byte `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     []byte            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{51}
}

func (x *Payload) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Payload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	NonRetryable bool      `protobuf:"varint,2,opt,name=non_retryable,json=nonRetryable,proto3" json:"non_retryable,omitempty"`
	Details      *Payloads `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ApplicationFailureInfo) Reset() {
	*x = ApplicationFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationFailureInfo) ProtoMessage() {}

func (x *ApplicationFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationFailureInfo.ProtoReflect.Descriptor instead.
func (*ApplicationFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{52}
}

func (x *ApplicationFailureInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplicationFailureInfo) GetNonRetryable() bool {
	if x != nil {
		return x.NonRetryable
	}
	return false
}

func (x *ApplicationFailureInfo) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

type TimeoutFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutType          TimeoutType `protobuf:"varint,1,opt,name=timeout_type,json=timeoutType,proto3,enum=TimeoutType" json:"timeout_type,omitempty"`
	LastHeartbeatDetails *Payloads   `protobuf:"bytes,2,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
}

func (x *TimeoutFailureInfo) Reset() {
	*x = TimeoutFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutFailureInfo) ProtoMessage() {}

func (x *TimeoutFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutFailureInfo.ProtoReflect.Descriptor instead.
func (*TimeoutFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{53}
}

func (x *TimeoutFailureInfo) GetTimeoutType() TimeoutType {
	if x != nil {
		return x.TimeoutType
	}
	return TimeoutType_TIMEOUT_TYPE_UNSPECIFIED
}

func (x *TimeoutFailureInfo) GetLastHeartbeatDetails() *Payloads {
	if x != nil {
		return x.LastHeartbeatDetails
	}
	return nil
}

type CanceledFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *CanceledFailureInfo) Reset() {
	*x = CanceledFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanceledFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanceledFailureInfo) ProtoMessage() {}

func (x *CanceledFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanceledFailureInfo.ProtoReflect.Descriptor instead.
func (*CanceledFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{54}
}

func (x *CanceledFailureInfo) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

type TerminatedFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminatedFailureInfo) Reset() {
	*x = TerminatedFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminatedFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminatedFailureInfo) ProtoMessage() {}

func (x *TerminatedFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminatedFailureInfo.ProtoReflect.Descriptor instead.
func (*TerminatedFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{55}
}

type ServerFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonRetryable bool `protobuf:"varint,1,opt,name=non_retryable,json=nonRetryable,proto3" json:"non_retryable,omitempty"`
}

func (x *ServerFailureInfo) Reset() {
	*x = ServerFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerFailureInfo) ProtoMessage() {}

func (x *ServerFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerFailureInfo.ProtoReflect.Descriptor instead.
func (*ServerFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{56}
}

func (x *ServerFailureInfo) GetNonRetryable() bool {
	if x != nil {
		return x.NonRetryable
	}
	return false
}

type ResetWorkflowFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastHeartbeatDetails *Payloads `protobuf:"bytes,1,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
}

func (x *ResetWorkflowFailureInfo) Reset() {
	*x = ResetWorkflowFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetWorkflowFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetWorkflowFailureInfo) ProtoMessage() {}

func (x *ResetWorkflowFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetWorkflowFailureInfo.ProtoReflect.Descriptor instead.
func (*ResetWorkflowFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{57}
}

func (x *ResetWorkflowFailureInfo) GetLastHeartbeatDetails() *Payloads {
	if x != nil {
		return x.LastHeartbeatDetails
	}
	return nil
}

type ActivityFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledEventId int64         `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	StartedEventId   int64         `protobuf:"varint,2,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Identity         string        `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	ActivityType     *ActivityType `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	ActivityId       string        `protobuf:"bytes,5,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RetryState       RetryState    `protobuf:"varint,6,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *ActivityFailureInfo) Reset() {
	*x = ActivityFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityFailureInfo) ProtoMessage() {}

func (x *ActivityFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityFailureInfo.ProtoReflect.Descriptor instead.
func (*ActivityFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{58}
}

func (x *ActivityFailureInfo) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

func (x *ActivityFailureInfo) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ActivityFailureInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *ActivityFailureInfo) GetActivityType() *ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *ActivityFailureInfo) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityFailureInfo) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type ChildWorkflowExecutionFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	InitiatedEventId  int64              `protobuf:"varint,4,opt,name=initiated_event_id,json=initiatedEventId,proto3" json:"initiated_event_id,omitempty"`
	StartedEventId    int64              `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	RetryState        RetryState         `protobuf:"varint,6,opt,name=retry_state,json=retryState,proto3,enum=RetryState" json:"retry_state,omitempty"`
}

func (x *ChildWorkflowExecutionFailureInfo) Reset() {
	*x = ChildWorkflowExecutionFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildWorkflowExecutionFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkflowExecutionFailureInfo) ProtoMessage() {}

func (x *ChildWorkflowExecutionFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkflowExecutionFailureInfo.ProtoReflect.Descriptor instead.
func (*ChildWorkflowExecutionFailureInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{59}
}

func (x *ChildWorkflowExecutionFailureInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildWorkflowExecutionFailureInfo) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ChildWorkflowExecutionFailureInfo) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ChildWorkflowExecutionFailureInfo) GetInitiatedEventId() int64 {
	if x != nil {
		return x.InitiatedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionFailureInfo) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *ChildWorkflowExecutionFailureInfo) GetRetryState() RetryState {
	if x != nil {
		return x.RetryState
	}
	return RetryState_RETRY_STATE_UNSPECIFIED
}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	StackTrace string   `protobuf:"bytes,3,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	Cause      *Failure `protobuf:"bytes,4,opt,name=cause,proto3" json:"cause,omitempty"`
	// Types that are assignable to FailureInfo:
	//	*Failure_ApplicationFailureInfo
	//	*Failure_TimeoutFailureInfo
	//	*Failure_CanceledFailureInfo
	//	*Failure_TerminatedFailureInfo
	//	*Failure_ServerFailureInfo
	//	*Failure_ResetWorkflowFailureInfo
	//	*Failure_ActivityFailureInfo
	//	*Failure_ChildWorkflowExecutionFailureInfo
	FailureInfo isFailure_FailureInfo `protobuf_oneof:"failure_info"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{60}
}

func (x *Failure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Failure) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Failure) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *Failure) GetCause() *Failure {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (m *Failure) GetFailureInfo() isFailure_FailureInfo {
	if m != nil {
		return m.FailureInfo
	}
	return nil
}

func (x *Failure) GetApplicationFailureInfo() *ApplicationFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_ApplicationFailureInfo); ok {
		return x.ApplicationFailureInfo
	}
	return nil
}

func (x *Failure) GetTimeoutFailureInfo() *TimeoutFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_TimeoutFailureInfo); ok {
		return x.TimeoutFailureInfo
	}
	return nil
}

func (x *Failure) GetCanceledFailureInfo() *CanceledFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_CanceledFailureInfo); ok {
		return x.CanceledFailureInfo
	}
	return nil
}

func (x *Failure) GetTerminatedFailureInfo() *TerminatedFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_TerminatedFailureInfo); ok {
		return x.TerminatedFailureInfo
	}
	return nil
}

func (x *Failure) GetServerFailureInfo() *ServerFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_ServerFailureInfo); ok {
		return x.ServerFailureInfo
	}
	return nil
}

func (x *Failure) GetResetWorkflowFailureInfo() *ResetWorkflowFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_ResetWorkflowFailureInfo); ok {
		return x.ResetWorkflowFailureInfo
	}
	return nil
}

func (x *Failure) GetActivityFailureInfo() *ActivityFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_ActivityFailureInfo); ok {
		return x.ActivityFailureInfo
	}
	return nil
}

func (x *Failure) GetChildWorkflowExecutionFailureInfo() *ChildWorkflowExecutionFailureInfo {
	if x, ok := x.GetFailureInfo().(*Failure_ChildWorkflowExecutionFailureInfo); ok {
		return x.ChildWorkflowExecutionFailureInfo
	}
	return nil
}

type isFailure_FailureInfo interface {
	isFailure_FailureInfo()
}

type Failure_ApplicationFailureInfo struct {
	ApplicationFailureInfo *ApplicationFailureInfo `protobuf:"bytes,5,opt,name=application_failure_info,json=applicationFailureInfo,proto3,oneof"`
}

type Failure_TimeoutFailureInfo struct {
	TimeoutFailureInfo *TimeoutFailureInfo `protobuf:"bytes,6,opt,name=timeout_failure_info,json=timeoutFailureInfo,proto3,oneof"`
}

type Failure_CanceledFailureInfo struct {
	CanceledFailureInfo *CanceledFailureInfo `protobuf:"bytes,7,opt,name=canceled_failure_info,json=canceledFailureInfo,proto3,oneof"`
}

type Failure_TerminatedFailureInfo struct {
	TerminatedFailureInfo *TerminatedFailureInfo `protobuf:"bytes,8,opt,name=terminated_failure_info,json=terminatedFailureInfo,proto3,oneof"`
}

type Failure_ServerFailureInfo struct {
	ServerFailureInfo *ServerFailureInfo `protobuf:"bytes,9,opt,name=server_failure_info,json=serverFailureInfo,proto3,oneof"`
}

type Failure_ResetWorkflowFailureInfo struct {
	ResetWorkflowFailureInfo *ResetWorkflowFailureInfo `protobuf:"bytes,10,opt,name=reset_workflow_failure_info,json=resetWorkflowFailureInfo,proto3,oneof"`
}

type Failure_ActivityFailureInfo struct {
	ActivityFailureInfo *ActivityFailureInfo `protobuf:"bytes,11,opt,name=activity_failure_info,json=activityFailureInfo,proto3,oneof"`
}

type Failure_ChildWorkflowExecutionFailureInfo struct {
	ChildWorkflowExecutionFailureInfo *ChildWorkflowExecutionFailureInfo `protobuf:"bytes,12,opt,name=child_workflow_execution_failure_info,json=childWorkflowExecutionFailureInfo,proto3,oneof"`
}

func (*Failure_ApplicationFailureInfo) isFailure_FailureInfo() {}

func (*Failure_TimeoutFailureInfo) isFailure_FailureInfo() {}

func (*Failure_CanceledFailureInfo) isFailure_FailureInfo() {}

func (*Failure_TerminatedFailureInfo) isFailure_FailureInfo() {}

func (*Failure_ServerFailureInfo) isFailure_FailureInfo() {}

func (*Failure_ResetWorkflowFailureInfo) isFailure_FailureInfo() {}

func (*Failure_ActivityFailureInfo) isFailure_FailureInfo() {}

func (*Failure_ChildWorkflowExecutionFailureInfo) isFailure_FailureInfo() {}

type ActivityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActivityType) Reset() {
	*x = ActivityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityType) ProtoMessage() {}

func (x *ActivityType) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityType.ProtoReflect.Descriptor instead.
func (*ActivityType) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{61}
}

func (x *ActivityType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexedFields map[string]*Payload `protobuf:"bytes,1,rep,name=indexed_fields,json=indexedFields,proto3" json:"indexed_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchAttributes) Reset() {
	*x = SearchAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAttributes) ProtoMessage() {}

func (x *SearchAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAttributes.ProtoReflect.Descriptor instead.
func (*SearchAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{62}
}

func (x *SearchAttributes) GetIndexedFields() map[string]*Payload {
	if x != nil {
		return x.IndexedFields
	}
	return nil
}

type Memo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Payload `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Memo) Reset() {
	*x = Memo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memo) ProtoMessage() {}

func (x *Memo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memo.ProtoReflect.Descriptor instead.
func (*Memo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{63}
}

func (x *Memo) GetFields() map[string]*Payload {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Payload `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{64}
}

func (x *Header) GetFields() map[string]*Payload {
	if x != nil {
		return x.Fields
	}
	return nil
}

type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
	InitialInterval *duration.Duration `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	// Coefficient used to calculate the next retry interval.
	// The next retry interval is previous interval multiplied by the coefficient.
	// Must be 1 or larger.
	BackoffCoefficient float64 `protobuf:"fixed64,2,opt,name=backoff_coefficient,json=backoffCoefficient,proto3" json:"backoff_coefficient,omitempty"`
	// Maximum interval between retries. Exponential backoff leads to interval increase.
	// This value is the cap of the increase. Default is 100x of the initial interval.
	MaximumInterval *duration.Duration `protobuf:"bytes,3,opt,name=maximum_interval,json=maximumInterval,proto3" json:"maximum_interval,omitempty"`
	// Maximum number of attempts. When exceeded the retries stop even if not expired yet.
	// 1 disables retries. 0 means unlimited (up to the timeouts)
	MaximumAttempts int32 `protobuf:"varint,4,opt,name=maximum_attempts,json=maximumAttempts,proto3" json:"maximum_attempts,omitempty"`
	// Non-Retryable errors types. Will stop retrying if error type matches this list.
	NonRetryableErrorTypes []string `protobuf:"bytes,5,rep,name=non_retryable_error_types,json=nonRetryableErrorTypes,proto3" json:"non_retryable_error_types,omitempty"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{65}
}

func (x *RetryPolicy) GetInitialInterval() *duration.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *RetryPolicy) GetBackoffCoefficient() float64 {
	if x != nil {
		return x.BackoffCoefficient
	}
	return 0
}

func (x *RetryPolicy) GetMaximumInterval() *duration.Duration {
	if x != nil {
		return x.MaximumInterval
	}
	return nil
}

func (x *RetryPolicy) GetMaximumAttempts() int32 {
	if x != nil {
		return x.MaximumAttempts
	}
	return 0
}

func (x *RetryPolicy) GetNonRetryableErrorTypes() []string {
	if x != nil {
		return x.NonRetryableErrorTypes
	}
	return nil
}

type TaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Default: TASK_LIST_KIND_NORMAL.
	Kind TaskListKind `protobuf:"varint,2,opt,name=kind,proto3,enum=TaskListKind" json:"kind,omitempty"`
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{66}
}

func (x *TaskList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskList) GetKind() TaskListKind {
	if x != nil {
		return x.Kind
	}
	return TaskListKind_TASK_LIST_KIND_UNSPECIFIED
}

type TaskListMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTasksPerSecond *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=max_tasks_per_second,json=maxTasksPerSecond,proto3" json:"max_tasks_per_second,omitempty"`
}

func (x *TaskListMetadata) Reset() {
	*x = TaskListMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListMetadata) ProtoMessage() {}

func (x *TaskListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListMetadata.ProtoReflect.Descriptor instead.
func (*TaskListMetadata) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{67}
}

func (x *TaskListMetadata) GetMaxTasksPerSecond() *wrappers.DoubleValue {
	if x != nil {
		return x.MaxTasksPerSecond
	}
	return nil
}

type TaskListStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacklogCountHint int64        `protobuf:"varint,1,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	ReadLevel        int64        `protobuf:"varint,2,opt,name=read_level,json=readLevel,proto3" json:"read_level,omitempty"`
	AckLevel         int64        `protobuf:"varint,3,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	RatePerSecond    float64      `protobuf:"fixed64,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	TaskIdBlock      *TaskIdBlock `protobuf:"bytes,5,opt,name=task_id_block,json=taskIdBlock,proto3" json:"task_id_block,omitempty"`
}

func (x *TaskListStatus) Reset() {
	*x = TaskListStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListStatus) ProtoMessage() {}

func (x *TaskListStatus) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListStatus.ProtoReflect.Descriptor instead.
func (*TaskListStatus) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{68}
}

func (x *TaskListStatus) GetBacklogCountHint() int64 {
	if x != nil {
		return x.BacklogCountHint
	}
	return 0
}

func (x *TaskListStatus) GetReadLevel() int64 {
	if x != nil {
		return x.ReadLevel
	}
	return 0
}

func (x *TaskListStatus) GetAckLevel() int64 {
	if x != nil {
		return x.AckLevel
	}
	return 0
}

func (x *TaskListStatus) GetRatePerSecond() float64 {
	if x != nil {
		return x.RatePerSecond
	}
	return 0
}

func (x *TaskListStatus) GetTaskIdBlock() *TaskIdBlock {
	if x != nil {
		return x.TaskIdBlock
	}
	return nil
}

type TaskIdBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartId int64 `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	EndId   int64 `protobuf:"varint,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`
}

func (x *TaskIdBlock) Reset() {
	*x = TaskIdBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdBlock) ProtoMessage() {}

func (x *TaskIdBlock) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdBlock.ProtoReflect.Descriptor instead.
func (*TaskIdBlock) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{69}
}

func (x *TaskIdBlock) GetStartId() int64 {
	if x != nil {
		return x.StartId
	}
	return 0
}

func (x *TaskIdBlock) GetEndId() int64 {
	if x != nil {
		return x.EndId
	}
	return 0
}

type TaskListPartitionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	OwnerHostName string `protobuf:"bytes,2,opt,name=owner_host_name,json=ownerHostName,proto3" json:"owner_host_name,omitempty"`
}

func (x *TaskListPartitionMetadata) Reset() {
	*x = TaskListPartitionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListPartitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListPartitionMetadata) ProtoMessage() {}

func (x *TaskListPartitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListPartitionMetadata.ProtoReflect.Descriptor instead.
func (*TaskListPartitionMetadata) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{70}
}

func (x *TaskListPartitionMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TaskListPartitionMetadata) GetOwnerHostName() string {
	if x != nil {
		return x.OwnerHostName
	}
	return ""
}

type PollerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix Nano
	LastAccessTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=last_access_time,json=lastAccessTime,proto3" json:"last_access_time,omitempty"`
	Identity       string               `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RatePerSecond  float64              `protobuf:"fixed64,3,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
}

func (x *PollerInfo) Reset() {
	*x = PollerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollerInfo) ProtoMessage() {}

func (x *PollerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollerInfo.ProtoReflect.Descriptor instead.
func (*PollerInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{71}
}

func (x *PollerInfo) GetLastAccessTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastAccessTime
	}
	return nil
}

func (x *PollerInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollerInfo) GetRatePerSecond() float64 {
	if x != nil {
		return x.RatePerSecond
	}
	return 0
}

type StickyExecutionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerTaskList *TaskList `protobuf:"bytes,1,opt,name=worker_task_list,json=workerTaskList,proto3" json:"worker_task_list,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *duration.Duration `protobuf:"bytes,2,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
}

func (x *StickyExecutionAttributes) Reset() {
	*x = StickyExecutionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickyExecutionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickyExecutionAttributes) ProtoMessage() {}

func (x *StickyExecutionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickyExecutionAttributes.ProtoReflect.Descriptor instead.
func (*StickyExecutionAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{72}
}

func (x *StickyExecutionAttributes) GetWorkerTaskList() *TaskList {
	if x != nil {
		return x.WorkerTaskList
	}
	return nil
}

func (x *StickyExecutionAttributes) GetScheduleToStartTimeout() *duration.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

type ResetPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*ResetPointInfo `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *ResetPoints) Reset() {
	*x = ResetPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPoints) ProtoMessage() {}

func (x *ResetPoints) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPoints.ProtoReflect.Descriptor instead.
func (*ResetPoints) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{73}
}

func (x *ResetPoints) GetPoints() []*ResetPointInfo {
	if x != nil {
		return x.Points
	}
	return nil
}

type ResetPointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryChecksum               string               `protobuf:"bytes,1,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	RunId                        string               `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	FirstDecisionTaskCompletedId int64                `protobuf:"varint,3,opt,name=first_decision_task_completed_id,json=firstDecisionTaskCompletedId,proto3" json:"first_decision_task_completed_id,omitempty"`
	CreateTime                   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// (-- api-linter: core::0214::resource-expiry=disabled
	//     aip.dev/not-precedent: TTL is not defined for ResetPointInfo. --)
	// The time that the run is deleted due to retention.
	ExpireTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// false if the reset point has pending childWFs/reqCancels/signalExternals.
	Resettable bool `protobuf:"varint,6,opt,name=resettable,proto3" json:"resettable,omitempty"`
}

func (x *ResetPointInfo) Reset() {
	*x = ResetPointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPointInfo) ProtoMessage() {}

func (x *ResetPointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPointInfo.ProtoReflect.Descriptor instead.
func (*ResetPointInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{74}
}

func (x *ResetPointInfo) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

func (x *ResetPointInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ResetPointInfo) GetFirstDecisionTaskCompletedId() int64 {
	if x != nil {
		return x.FirstDecisionTaskCompletedId
	}
	return 0
}

func (x *ResetPointInfo) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ResetPointInfo) GetExpireTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *ResetPointInfo) GetResettable() bool {
	if x != nil {
		return x.Resettable
	}
	return false
}

type ChildExecutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               int64             `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	InitiatedEventBatchId int64             `protobuf:"varint,2,opt,name=initiated_event_batch_id,json=initiatedEventBatchId,proto3" json:"initiated_event_batch_id,omitempty"`
	StartedId             int64             `protobuf:"varint,3,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	InitiatedEvent        *HistoryEvent     `protobuf:"bytes,4,opt,name=initiated_event,json=initiatedEvent,proto3" json:"initiated_event,omitempty"`
	StartedWorkflowId     string            `protobuf:"bytes,5,opt,name=started_workflow_id,json=startedWorkflowId,proto3" json:"started_workflow_id,omitempty"`
	StartedRunId          string            `protobuf:"bytes,6,opt,name=started_run_id,json=startedRunId,proto3" json:"started_run_id,omitempty"`
	StartedEvent          *HistoryEvent     `protobuf:"bytes,7,opt,name=started_event,json=startedEvent,proto3" json:"started_event,omitempty"`
	CreateRequestId       string            `protobuf:"bytes,8,opt,name=create_request_id,json=createRequestId,proto3" json:"create_request_id,omitempty"`
	Domain                string            `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowTypeName      string            `protobuf:"bytes,10,opt,name=workflow_type_name,json=workflowTypeName,proto3" json:"workflow_type_name,omitempty"`
	ParentClosePolicy     ParentClosePolicy `protobuf:"varint,11,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=ParentClosePolicy" json:"parent_close_policy,omitempty"`
	InitiatedId           int64             `protobuf:"varint,12,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (x *ChildExecutionInfo) Reset() {
	*x = ChildExecutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildExecutionInfo) ProtoMessage() {}

func (x *ChildExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildExecutionInfo.ProtoReflect.Descriptor instead.
func (*ChildExecutionInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{75}
}

func (x *ChildExecutionInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChildExecutionInfo) GetInitiatedEventBatchId() int64 {
	if x != nil {
		return x.InitiatedEventBatchId
	}
	return 0
}

func (x *ChildExecutionInfo) GetStartedId() int64 {
	if x != nil {
		return x.StartedId
	}
	return 0
}

func (x *ChildExecutionInfo) GetInitiatedEvent() *HistoryEvent {
	if x != nil {
		return x.InitiatedEvent
	}
	return nil
}

func (x *ChildExecutionInfo) GetStartedWorkflowId() string {
	if x != nil {
		return x.StartedWorkflowId
	}
	return ""
}

func (x *ChildExecutionInfo) GetStartedRunId() string {
	if x != nil {
		return x.StartedRunId
	}
	return ""
}

func (x *ChildExecutionInfo) GetStartedEvent() *HistoryEvent {
	if x != nil {
		return x.StartedEvent
	}
	return nil
}

func (x *ChildExecutionInfo) GetCreateRequestId() string {
	if x != nil {
		return x.CreateRequestId
	}
	return ""
}

func (x *ChildExecutionInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ChildExecutionInfo) GetWorkflowTypeName() string {
	if x != nil {
		return x.WorkflowTypeName
	}
	return ""
}

func (x *ChildExecutionInfo) GetParentClosePolicy() ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (x *ChildExecutionInfo) GetInitiatedId() int64 {
	if x != nil {
		return x.InitiatedId
	}
	return 0
}

type WorkflowExecutionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateRequestId string                  `protobuf:"bytes,1,opt,name=create_request_id,json=createRequestId,proto3" json:"create_request_id,omitempty"`
	RunId           string                  `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	State           *WorkflowExecutionState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Status          WorkflowExecutionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=WorkflowExecutionStatus" json:"status,omitempty"`
}

func (x *WorkflowExecutionState) Reset() {
	*x = WorkflowExecutionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionState) ProtoMessage() {}

func (x *WorkflowExecutionState) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionState.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionState) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{76}
}

func (x *WorkflowExecutionState) GetCreateRequestId() string {
	if x != nil {
		return x.CreateRequestId
	}
	return ""
}

func (x *WorkflowExecutionState) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowExecutionState) GetState() *WorkflowExecutionState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *WorkflowExecutionState) GetStatus() WorkflowExecutionStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

type WorkflowExecutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId                          string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId                        string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	ParentDomainId                    string               `protobuf:"bytes,3,opt,name=parent_domain_id,json=parentDomainId,proto3" json:"parent_domain_id,omitempty"`
	ParentWorkflowId                  string               `protobuf:"bytes,4,opt,name=parent_workflow_id,json=parentWorkflowId,proto3" json:"parent_workflow_id,omitempty"`
	ParentRunId                       string               `protobuf:"bytes,5,opt,name=parent_run_id,json=parentRunId,proto3" json:"parent_run_id,omitempty"`
	InitiatedId                       int64                `protobuf:"varint,6,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
	CompletionEventBatchId            int64                `protobuf:"varint,7,opt,name=completion_event_batch_id,json=completionEventBatchId,proto3" json:"completion_event_batch_id,omitempty"`
	CompletionEvent                   *HistoryEvent        `protobuf:"bytes,8,opt,name=completion_event,json=completionEvent,proto3" json:"completion_event,omitempty"`
	TaskList                          string               `protobuf:"bytes,9,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	WorkflowTypeName                  string               `protobuf:"bytes,10,opt,name=workflow_type_name,json=workflowTypeName,proto3" json:"workflow_type_name,omitempty"`
	WorkflowExecutionTimeout          *duration.Duration   `protobuf:"bytes,11,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	WorkflowRunTimeout                *duration.Duration   `protobuf:"bytes,12,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	DefaultDecisionTaskTimeout        *duration.Duration   `protobuf:"bytes,13,opt,name=default_decision_task_timeout,json=defaultDecisionTaskTimeout,proto3" json:"default_decision_task_timeout,omitempty"`
	StartVersion                      int64                `protobuf:"varint,14,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	ReplicationData                   *ReplicationData     `protobuf:"bytes,16,opt,name=replication_data,json=replicationData,proto3" json:"replication_data,omitempty"`
	LastEventTaskId                   int64                `protobuf:"varint,17,opt,name=last_event_task_id,json=lastEventTaskId,proto3" json:"last_event_task_id,omitempty"`
	LastFirstEventId                  int64                `protobuf:"varint,18,opt,name=last_first_event_id,json=lastFirstEventId,proto3" json:"last_first_event_id,omitempty"`
	LastProcessedEvent                int64                `protobuf:"varint,19,opt,name=last_processed_event,json=lastProcessedEvent,proto3" json:"last_processed_event,omitempty"`
	StartTime                         *timestamp.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	LastUpdateTime                    *timestamp.Timestamp `protobuf:"bytes,21,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	DecisionTaskVersion               int64                `protobuf:"varint,22,opt,name=decision_task_version,json=decisionTaskVersion,proto3" json:"decision_task_version,omitempty"`
	DecisionTaskScheduleId            int64                `protobuf:"varint,23,opt,name=decision_task_schedule_id,json=decisionTaskScheduleId,proto3" json:"decision_task_schedule_id,omitempty"`
	DecisionTaskStartedId             int64                `protobuf:"varint,24,opt,name=decision_task_started_id,json=decisionTaskStartedId,proto3" json:"decision_task_started_id,omitempty"`
	DecisionTaskTimeout               *duration.Duration   `protobuf:"bytes,25,opt,name=decision_task_timeout,json=decisionTaskTimeout,proto3" json:"decision_task_timeout,omitempty"`
	DecisionTaskAttempt               int32                `protobuf:"varint,26,opt,name=decision_task_attempt,json=decisionTaskAttempt,proto3" json:"decision_task_attempt,omitempty"`
	DecisionTaskStartedTime           *timestamp.Timestamp `protobuf:"bytes,27,opt,name=decision_task_started_time,json=decisionTaskStartedTime,proto3" json:"decision_task_started_time,omitempty"`
	DecisionTaskScheduledTime         *timestamp.Timestamp `protobuf:"bytes,28,opt,name=decision_task_scheduled_time,json=decisionTaskScheduledTime,proto3" json:"decision_task_scheduled_time,omitempty"`
	CancelRequested                   bool                 `protobuf:"varint,29,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	DecisionTaskOriginalScheduledTime *timestamp.Timestamp `protobuf:"bytes,30,opt,name=decision_task_original_scheduled_time,json=decisionTaskOriginalScheduledTime,proto3" json:"decision_task_original_scheduled_time,omitempty"`
	DecisionTaskRequestId             string               `protobuf:"bytes,31,opt,name=decision_task_request_id,json=decisionTaskRequestId,proto3" json:"decision_task_request_id,omitempty"`
	CancelRequestId                   string               `protobuf:"bytes,32,opt,name=cancel_request_id,json=cancelRequestId,proto3" json:"cancel_request_id,omitempty"`
	StickyTaskList                    string               `protobuf:"bytes,33,opt,name=sticky_task_list,json=stickyTaskList,proto3" json:"sticky_task_list,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StickyScheduleToStartTimeout *duration.Duration   `protobuf:"bytes,34,opt,name=sticky_schedule_to_start_timeout,json=stickyScheduleToStartTimeout,proto3" json:"sticky_schedule_to_start_timeout,omitempty"`
	RetryAttempt                 int32                `protobuf:"varint,35,opt,name=retry_attempt,json=retryAttempt,proto3" json:"retry_attempt,omitempty"`
	RetryInitialInterval         *duration.Duration   `protobuf:"bytes,36,opt,name=retry_initial_interval,json=retryInitialInterval,proto3" json:"retry_initial_interval,omitempty"`
	RetryMaximumInterval         *duration.Duration   `protobuf:"bytes,37,opt,name=retry_maximum_interval,json=retryMaximumInterval,proto3" json:"retry_maximum_interval,omitempty"`
	RetryMaximumAttempts         int32                `protobuf:"varint,38,opt,name=retry_maximum_attempts,json=retryMaximumAttempts,proto3" json:"retry_maximum_attempts,omitempty"`
	RetryBackoffCoefficient      float64              `protobuf:"fixed64,39,opt,name=retry_backoff_coefficient,json=retryBackoffCoefficient,proto3" json:"retry_backoff_coefficient,omitempty"`
	RetryExpirationTime          *timestamp.Timestamp `protobuf:"bytes,40,opt,name=retry_expiration_time,json=retryExpirationTime,proto3" json:"retry_expiration_time,omitempty"`
	RetryNonRetryableErrorTypes  []string             `protobuf:"bytes,41,rep,name=retry_non_retryable_error_types,json=retryNonRetryableErrorTypes,proto3" json:"retry_non_retryable_error_types,omitempty"`
	HasRetryPolicy               bool                 `protobuf:"varint,42,opt,name=has_retry_policy,json=hasRetryPolicy,proto3" json:"has_retry_policy,omitempty"`
	CronSchedule                 string               `protobuf:"bytes,43,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	EventStoreVersion            int32                `protobuf:"varint,44,opt,name=event_store_version,json=eventStoreVersion,proto3" json:"event_store_version,omitempty"`
	EventBranchToken             []byte               `protobuf:"bytes,45,opt,name=event_branch_token,json=eventBranchToken,proto3" json:"event_branch_token,omitempty"`
	SignalCount                  int64                `protobuf:"varint,46,opt,name=signal_count,json=signalCount,proto3" json:"signal_count,omitempty"`
	HistorySize                  int64                `protobuf:"varint,47,opt,name=history_size,json=historySize,proto3" json:"history_size,omitempty"`
	ClientLibraryVersion         string               `protobuf:"bytes,48,opt,name=client_library_version,json=clientLibraryVersion,proto3" json:"client_library_version,omitempty"`
	ClientFeatureVersion         string               `protobuf:"bytes,49,opt,name=client_feature_version,json=clientFeatureVersion,proto3" json:"client_feature_version,omitempty"`
	ClientImpl                   string               `protobuf:"bytes,50,opt,name=client_impl,json=clientImpl,proto3" json:"client_impl,omitempty"`
	AutoResetPoints              *ResetPoints         `protobuf:"bytes,51,opt,name=auto_reset_points,json=autoResetPoints,proto3" json:"auto_reset_points,omitempty"`
	SearchAttributes             map[string]*Payload  `protobuf:"bytes,52,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Memo                         map[string]*Payload  `protobuf:"bytes,53,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VersionHistories             *VersionHistories    `protobuf:"bytes,54,opt,name=version_histories,json=versionHistories,proto3" json:"version_histories,omitempty"`
	FirstExecutionRunId          string               `protobuf:"bytes,55,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
}

func (x *WorkflowExecutionInfo) Reset() {
	*x = WorkflowExecutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionInfo) ProtoMessage() {}

func (x *WorkflowExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionInfo.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{77}
}

func (x *WorkflowExecutionInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetParentDomainId() string {
	if x != nil {
		return x.ParentDomainId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetParentWorkflowId() string {
	if x != nil {
		return x.ParentWorkflowId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetParentRunId() string {
	if x != nil {
		return x.ParentRunId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetInitiatedId() int64 {
	if x != nil {
		return x.InitiatedId
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetCompletionEventBatchId() int64 {
	if x != nil {
		return x.CompletionEventBatchId
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetCompletionEvent() *HistoryEvent {
	if x != nil {
		return x.CompletionEvent
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetTaskList() string {
	if x != nil {
		return x.TaskList
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetWorkflowTypeName() string {
	if x != nil {
		return x.WorkflowTypeName
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetWorkflowExecutionTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetWorkflowRunTimeout() *duration.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetDefaultDecisionTaskTimeout() *duration.Duration {
	if x != nil {
		return x.DefaultDecisionTaskTimeout
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetStartVersion() int64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetReplicationData() *ReplicationData {
	if x != nil {
		return x.ReplicationData
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetLastEventTaskId() int64 {
	if x != nil {
		return x.LastEventTaskId
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetLastFirstEventId() int64 {
	if x != nil {
		return x.LastFirstEventId
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetLastProcessedEvent() int64 {
	if x != nil {
		return x.LastProcessedEvent
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetLastUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetDecisionTaskVersion() int64 {
	if x != nil {
		return x.DecisionTaskVersion
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetDecisionTaskScheduleId() int64 {
	if x != nil {
		return x.DecisionTaskScheduleId
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetDecisionTaskStartedId() int64 {
	if x != nil {
		return x.DecisionTaskStartedId
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetDecisionTaskTimeout() *duration.Duration {
	if x != nil {
		return x.DecisionTaskTimeout
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetDecisionTaskAttempt() int32 {
	if x != nil {
		return x.DecisionTaskAttempt
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetDecisionTaskStartedTime() *timestamp.Timestamp {
	if x != nil {
		return x.DecisionTaskStartedTime
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetDecisionTaskScheduledTime() *timestamp.Timestamp {
	if x != nil {
		return x.DecisionTaskScheduledTime
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

func (x *WorkflowExecutionInfo) GetDecisionTaskOriginalScheduledTime() *timestamp.Timestamp {
	if x != nil {
		return x.DecisionTaskOriginalScheduledTime
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetDecisionTaskRequestId() string {
	if x != nil {
		return x.DecisionTaskRequestId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetCancelRequestId() string {
	if x != nil {
		return x.CancelRequestId
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetStickyTaskList() string {
	if x != nil {
		return x.StickyTaskList
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetStickyScheduleToStartTimeout() *duration.Duration {
	if x != nil {
		return x.StickyScheduleToStartTimeout
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetRetryAttempt() int32 {
	if x != nil {
		return x.RetryAttempt
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetRetryInitialInterval() *duration.Duration {
	if x != nil {
		return x.RetryInitialInterval
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetRetryMaximumInterval() *duration.Duration {
	if x != nil {
		return x.RetryMaximumInterval
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetRetryMaximumAttempts() int32 {
	if x != nil {
		return x.RetryMaximumAttempts
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetRetryBackoffCoefficient() float64 {
	if x != nil {
		return x.RetryBackoffCoefficient
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetRetryExpirationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RetryExpirationTime
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetRetryNonRetryableErrorTypes() []string {
	if x != nil {
		return x.RetryNonRetryableErrorTypes
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetHasRetryPolicy() bool {
	if x != nil {
		return x.HasRetryPolicy
	}
	return false
}

func (x *WorkflowExecutionInfo) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetEventStoreVersion() int32 {
	if x != nil {
		return x.EventStoreVersion
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetEventBranchToken() []byte {
	if x != nil {
		return x.EventBranchToken
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetSignalCount() int64 {
	if x != nil {
		return x.SignalCount
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetHistorySize() int64 {
	if x != nil {
		return x.HistorySize
	}
	return 0
}

func (x *WorkflowExecutionInfo) GetClientLibraryVersion() string {
	if x != nil {
		return x.ClientLibraryVersion
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetClientFeatureVersion() string {
	if x != nil {
		return x.ClientFeatureVersion
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetClientImpl() string {
	if x != nil {
		return x.ClientImpl
	}
	return ""
}

func (x *WorkflowExecutionInfo) GetAutoResetPoints() *ResetPoints {
	if x != nil {
		return x.AutoResetPoints
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetSearchAttributes() map[string]*Payload {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetMemo() map[string]*Payload {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetVersionHistories() *VersionHistories {
	if x != nil {
		return x.VersionHistories
	}
	return nil
}

func (x *WorkflowExecutionInfo) GetFirstExecutionRunId() string {
	if x != nil {
		return x.FirstExecutionRunId
	}
	return ""
}

// ReplicationData represents mutable state information for global domains.
// This information is used by replication protocol when applying events from remote clusters
// only used in cassandra
type ReplicationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastWriteEventId    int64                       `protobuf:"varint,1,opt,name=last_write_event_id,json=lastWriteEventId,proto3" json:"last_write_event_id,omitempty"`
	LastReplicationInfo map[string]*ReplicationInfo `protobuf:"bytes,2,rep,name=last_replication_info,json=lastReplicationInfo,proto3" json:"last_replication_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicationData) Reset() {
	*x = ReplicationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationData) ProtoMessage() {}

func (x *ReplicationData) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationData.ProtoReflect.Descriptor instead.
func (*ReplicationData) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{78}
}

func (x *ReplicationData) GetLastWriteEventId() int64 {
	if x != nil {
		return x.LastWriteEventId
	}
	return 0
}

func (x *ReplicationData) GetLastReplicationInfo() map[string]*ReplicationInfo {
	if x != nil {
		return x.LastReplicationInfo
	}
	return nil
}

type ReplicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	LastEventId int64 `protobuf:"varint,2,opt,name=last_event_id,json=lastEventId,proto3" json:"last_event_id,omitempty"`
}

func (x *ReplicationInfo) Reset() {
	*x = ReplicationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInfo) ProtoMessage() {}

func (x *ReplicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInfo.ProtoReflect.Descriptor instead.
func (*ReplicationInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{79}
}

func (x *ReplicationInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReplicationInfo) GetLastEventId() int64 {
	if x != nil {
		return x.LastEventId
	}
	return 0
}

// VersionHistory contains the version history of a branch.
type VersionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchToken []byte                `protobuf:"bytes,1,opt,name=branch_token,json=branchToken,proto3" json:"branch_token,omitempty"`
	Items       []*VersionHistoryItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VersionHistory) Reset() {
	*x = VersionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionHistory) ProtoMessage() {}

func (x *VersionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionHistory.ProtoReflect.Descriptor instead.
func (*VersionHistory) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{80}
}

func (x *VersionHistory) GetBranchToken() []byte {
	if x != nil {
		return x.BranchToken
	}
	return nil
}

func (x *VersionHistory) GetItems() []*VersionHistoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// VersionHistories contains all version histories from all branches.
type VersionHistories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentVersionHistoryIndex int32             `protobuf:"varint,1,opt,name=current_version_history_index,json=currentVersionHistoryIndex,proto3" json:"current_version_history_index,omitempty"`
	Histories                  []*VersionHistory `protobuf:"bytes,2,rep,name=histories,proto3" json:"histories,omitempty"`
}

func (x *VersionHistories) Reset() {
	*x = VersionHistories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionHistories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionHistories) ProtoMessage() {}

func (x *VersionHistories) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionHistories.ProtoReflect.Descriptor instead.
func (*VersionHistories) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{81}
}

func (x *VersionHistories) GetCurrentVersionHistoryIndex() int32 {
	if x != nil {
		return x.CurrentVersionHistoryIndex
	}
	return 0
}

func (x *VersionHistories) GetHistories() []*VersionHistory {
	if x != nil {
		return x.Histories
	}
	return nil
}

// VersionHistoryItem contains signal eventId and the corresponding version.
type VersionHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionHistoryItem) Reset() {
	*x = VersionHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionHistoryItem) ProtoMessage() {}

func (x *VersionHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionHistoryItem.ProtoReflect.Descriptor instead.
func (*VersionHistoryItem) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{82}
}

func (x *VersionHistoryItem) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *VersionHistoryItem) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type HistoryTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchInfo *HistoryBranch `protobuf:"bytes,1,opt,name=branch_info,json=branchInfo,proto3" json:"branch_info,omitempty"`
	// For fork operation to prevent race condition of leaking event data when forking branches fail. Also can be used for clean up leaked data.
	ForkTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=fork_time,json=forkTime,proto3" json:"fork_time,omitempty"`
	// For lookup back to workflow during debugging, also background cleanup when fork operation cannot finish self cleanup due to crash.
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *HistoryTreeInfo) Reset() {
	*x = HistoryTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryTreeInfo) ProtoMessage() {}

func (x *HistoryTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryTreeInfo.ProtoReflect.Descriptor instead.
func (*HistoryTreeInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{83}
}

func (x *HistoryTreeInfo) GetBranchInfo() *HistoryBranch {
	if x != nil {
		return x.BranchInfo
	}
	return nil
}

func (x *HistoryTreeInfo) GetForkTime() *timestamp.Timestamp {
	if x != nil {
		return x.ForkTime
	}
	return nil
}

func (x *HistoryTreeInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// For history persistence to serialize/deserialize branch details.
type HistoryBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeId    string                `protobuf:"bytes,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	BranchId  string                `protobuf:"bytes,2,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Ancestors []*HistoryBranchRange `protobuf:"bytes,3,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
}

func (x *HistoryBranch) Reset() {
	*x = HistoryBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryBranch) ProtoMessage() {}

func (x *HistoryBranch) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryBranch.ProtoReflect.Descriptor instead.
func (*HistoryBranch) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{84}
}

func (x *HistoryBranch) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *HistoryBranch) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *HistoryBranch) GetAncestors() []*HistoryBranchRange {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

// HistoryBranchRange represents a piece of range for a branch.
type HistoryBranchRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BranchId of original branch forked from.
	BranchId string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	// Beginning node for the range, inclusive.
	BeginNodeId int64 `protobuf:"varint,2,opt,name=begin_node_id,json=beginNodeId,proto3" json:"begin_node_id,omitempty"`
	// Ending node for the range, exclusive.
	EndNodeId int64 `protobuf:"varint,3,opt,name=end_node_id,json=endNodeId,proto3" json:"end_node_id,omitempty"`
}

func (x *HistoryBranchRange) Reset() {
	*x = HistoryBranchRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryBranchRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryBranchRange) ProtoMessage() {}

func (x *HistoryBranchRange) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryBranchRange.ProtoReflect.Descriptor instead.
func (*HistoryBranchRange) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{85}
}

func (x *HistoryBranchRange) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *HistoryBranchRange) GetBeginNodeId() int64 {
	if x != nil {
		return x.BeginNodeId
	}
	return 0
}

func (x *HistoryBranchRange) GetEndNodeId() int64 {
	if x != nil {
		return x.EndNodeId
	}
	return 0
}

type ReplicationTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType     ReplicationTaskType `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,enum=ReplicationTaskType" json:"task_type,omitempty"`
	SourceTaskId int64               `protobuf:"varint,2,opt,name=source_task_id,json=sourceTaskId,proto3" json:"source_task_id,omitempty"`
	// Types that are assignable to Attributes:
	//	*ReplicationTask_DomainTaskAttributes
	//	*ReplicationTask_HistoryTaskAttributes
	//	*ReplicationTask_SyncShardStatusTaskAttributes
	//	*ReplicationTask_SyncActivityTaskAttributes
	//	*ReplicationTask_HistoryMetadataTaskAttributes
	//	*ReplicationTask_HistoryTaskV2Attributes
	Attributes isReplicationTask_Attributes `protobuf_oneof:"attributes"`
}

func (x *ReplicationTask) Reset() {
	*x = ReplicationTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationTask) ProtoMessage() {}

func (x *ReplicationTask) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationTask.ProtoReflect.Descriptor instead.
func (*ReplicationTask) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{86}
}

func (x *ReplicationTask) GetTaskType() ReplicationTaskType {
	if x != nil {
		return x.TaskType
	}
	return ReplicationTaskType_REPLICATION_TASK_TYPE_UNSPECIFIED
}

func (x *ReplicationTask) GetSourceTaskId() int64 {
	if x != nil {
		return x.SourceTaskId
	}
	return 0
}

func (m *ReplicationTask) GetAttributes() isReplicationTask_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (x *ReplicationTask) GetDomainTaskAttributes() *DomainTaskAttributes {
	if x, ok := x.GetAttributes().(*ReplicationTask_DomainTaskAttributes); ok {
		return x.DomainTaskAttributes
	}
	return nil
}

func (x *ReplicationTask) GetHistoryTaskAttributes() *HistoryTaskAttributes {
	if x, ok := x.GetAttributes().(*ReplicationTask_HistoryTaskAttributes); ok {
		return x.HistoryTaskAttributes
	}
	return nil
}

func (x *ReplicationTask) GetSyncShardStatusTaskAttributes() *SyncShardStatusTaskAttributes {
	if x, ok := x.GetAttributes().(*ReplicationTask_SyncShardStatusTaskAttributes); ok {
		return x.SyncShardStatusTaskAttributes
	}
	return nil
}

func (x *ReplicationTask) GetSyncActivityTaskAttributes() *SyncActivityTaskAttributes {
	if x, ok := x.GetAttributes().(*ReplicationTask_SyncActivityTaskAttributes); ok {
		return x.SyncActivityTaskAttributes
	}
	return nil
}

func (x *ReplicationTask) GetHistoryMetadataTaskAttributes() *HistoryMetadataTaskAttributes {
	if x, ok := x.GetAttributes().(*ReplicationTask_HistoryMetadataTaskAttributes); ok {
		return x.HistoryMetadataTaskAttributes
	}
	return nil
}

func (x *ReplicationTask) GetHistoryTaskV2Attributes() *HistoryTaskV2Attributes {
	if x, ok := x.GetAttributes().(*ReplicationTask_HistoryTaskV2Attributes); ok {
		return x.HistoryTaskV2Attributes
	}
	return nil
}

type isReplicationTask_Attributes interface {
	isReplicationTask_Attributes()
}

type ReplicationTask_DomainTaskAttributes struct {
	DomainTaskAttributes *DomainTaskAttributes `protobuf:"bytes,3,opt,name=domain_task_attributes,json=domainTaskAttributes,proto3,oneof"`
}

type ReplicationTask_HistoryTaskAttributes struct {
	// TODO: deprecate once NDC migration is done.
	HistoryTaskAttributes *HistoryTaskAttributes `protobuf:"bytes,4,opt,name=history_task_attributes,json=historyTaskAttributes,proto3,oneof"`
}

type ReplicationTask_SyncShardStatusTaskAttributes struct {
	SyncShardStatusTaskAttributes *SyncShardStatusTaskAttributes `protobuf:"bytes,5,opt,name=sync_shard_status_task_attributes,json=syncShardStatusTaskAttributes,proto3,oneof"`
}

type ReplicationTask_SyncActivityTaskAttributes struct {
	SyncActivityTaskAttributes *SyncActivityTaskAttributes `protobuf:"bytes,6,opt,name=sync_activity_task_attributes,json=syncActivityTaskAttributes,proto3,oneof"`
}

type ReplicationTask_HistoryMetadataTaskAttributes struct {
	// TODO: deprecate once kafka deprecation is done.
	HistoryMetadataTaskAttributes *HistoryMetadataTaskAttributes `protobuf:"bytes,7,opt,name=history_metadata_task_attributes,json=historyMetadataTaskAttributes,proto3,oneof"`
}

type ReplicationTask_HistoryTaskV2Attributes struct {
	HistoryTaskV2Attributes *HistoryTaskV2Attributes `protobuf:"bytes,8,opt,name=history_task_v2_attributes,json=historyTaskV2Attributes,proto3,oneof"`
}

func (*ReplicationTask_DomainTaskAttributes) isReplicationTask_Attributes() {}

func (*ReplicationTask_HistoryTaskAttributes) isReplicationTask_Attributes() {}

func (*ReplicationTask_SyncShardStatusTaskAttributes) isReplicationTask_Attributes() {}

func (*ReplicationTask_SyncActivityTaskAttributes) isReplicationTask_Attributes() {}

func (*ReplicationTask_HistoryMetadataTaskAttributes) isReplicationTask_Attributes() {}

func (*ReplicationTask_HistoryTaskV2Attributes) isReplicationTask_Attributes() {}

type DomainTaskAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainOperation   DomainOperation          `protobuf:"varint,1,opt,name=domain_operation,json=domainOperation,proto3,enum=DomainOperation" json:"domain_operation,omitempty"`
	Id                string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Info              *DomainInfo              `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Config            *DomainConfig            `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig *DomainReplicationConfig `protobuf:"bytes,5,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	ConfigVersion     int64                    `protobuf:"varint,6,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	FailoverVersion   int64                    `protobuf:"varint,7,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
}

func (x *DomainTaskAttributes) Reset() {
	*x = DomainTaskAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTaskAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTaskAttributes) ProtoMessage() {}

func (x *DomainTaskAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTaskAttributes.ProtoReflect.Descriptor instead.
func (*DomainTaskAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{87}
}

func (x *DomainTaskAttributes) GetDomainOperation() DomainOperation {
	if x != nil {
		return x.DomainOperation
	}
	return DomainOperation_DOMAIN_OPERATION_UNSPECIFIED
}

func (x *DomainTaskAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DomainTaskAttributes) GetInfo() *DomainInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DomainTaskAttributes) GetConfig() *DomainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DomainTaskAttributes) GetReplicationConfig() *DomainReplicationConfig {
	if x != nil {
		return x.ReplicationConfig
	}
	return nil
}

func (x *DomainTaskAttributes) GetConfigVersion() int64 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *DomainTaskAttributes) GetFailoverVersion() int64 {
	if x != nil {
		return x.FailoverVersion
	}
	return 0
}

type HistoryTaskAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetClusters          []string `protobuf:"bytes,1,rep,name=target_clusters,json=targetClusters,proto3" json:"target_clusters,omitempty"`
	DomainId                string   `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId              string   `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId                   string   `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	FirstEventId            int64    `protobuf:"varint,5,opt,name=first_event_id,json=firstEventId,proto3" json:"first_event_id,omitempty"`
	NextEventId             int64    `protobuf:"varint,6,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	Version                 int64    `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	History                 *History `protobuf:"bytes,9,opt,name=history,proto3" json:"history,omitempty"`
	NewRunHistory           *History `protobuf:"bytes,10,opt,name=new_run_history,json=newRunHistory,proto3" json:"new_run_history,omitempty"`
	NewRunEventStoreVersion int32    `protobuf:"varint,12,opt,name=new_run_event_store_version,json=newRunEventStoreVersion,proto3" json:"new_run_event_store_version,omitempty"`
}

func (x *HistoryTaskAttributes) Reset() {
	*x = HistoryTaskAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryTaskAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryTaskAttributes) ProtoMessage() {}

func (x *HistoryTaskAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryTaskAttributes.ProtoReflect.Descriptor instead.
func (*HistoryTaskAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{88}
}

func (x *HistoryTaskAttributes) GetTargetClusters() []string {
	if x != nil {
		return x.TargetClusters
	}
	return nil
}

func (x *HistoryTaskAttributes) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *HistoryTaskAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *HistoryTaskAttributes) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *HistoryTaskAttributes) GetFirstEventId() int64 {
	if x != nil {
		return x.FirstEventId
	}
	return 0
}

func (x *HistoryTaskAttributes) GetNextEventId() int64 {
	if x != nil {
		return x.NextEventId
	}
	return 0
}

func (x *HistoryTaskAttributes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HistoryTaskAttributes) GetHistory() *History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *HistoryTaskAttributes) GetNewRunHistory() *History {
	if x != nil {
		return x.NewRunHistory
	}
	return nil
}

func (x *HistoryTaskAttributes) GetNewRunEventStoreVersion() int32 {
	if x != nil {
		return x.NewRunEventStoreVersion
	}
	return 0
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*HistoryEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{89}
}

func (x *History) GetEvents() []*HistoryEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type SyncShardStatusTaskAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCluster string               `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	ShardId       int64                `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	StatusTime    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
}

func (x *SyncShardStatusTaskAttributes) Reset() {
	*x = SyncShardStatusTaskAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncShardStatusTaskAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncShardStatusTaskAttributes) ProtoMessage() {}

func (x *SyncShardStatusTaskAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncShardStatusTaskAttributes.ProtoReflect.Descriptor instead.
func (*SyncShardStatusTaskAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{90}
}

func (x *SyncShardStatusTaskAttributes) GetSourceCluster() string {
	if x != nil {
		return x.SourceCluster
	}
	return ""
}

func (x *SyncShardStatusTaskAttributes) GetShardId() int64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *SyncShardStatusTaskAttributes) GetStatusTime() *timestamp.Timestamp {
	if x != nil {
		return x.StatusTime
	}
	return nil
}

type SyncActivityTaskAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId           string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId         string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId              string               `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Version            int64                `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ScheduledId        int64                `protobuf:"varint,5,opt,name=scheduled_id,json=scheduledId,proto3" json:"scheduled_id,omitempty"`
	ScheduledTime      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedId          int64                `protobuf:"varint,7,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	StartedTime        *timestamp.Timestamp `protobuf:"bytes,8,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	LastHeartbeatTime  *timestamp.Timestamp `protobuf:"bytes,9,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	Details            *Payloads            `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
	Attempt            int32                `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	LastFailure        *Failure             `protobuf:"bytes,12,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	LastWorkerIdentity string               `protobuf:"bytes,13,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
	VersionHistory     *VersionHistory      `protobuf:"bytes,14,opt,name=version_history,json=versionHistory,proto3" json:"version_history,omitempty"`
}

func (x *SyncActivityTaskAttributes) Reset() {
	*x = SyncActivityTaskAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncActivityTaskAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActivityTaskAttributes) ProtoMessage() {}

func (x *SyncActivityTaskAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActivityTaskAttributes.ProtoReflect.Descriptor instead.
func (*SyncActivityTaskAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{91}
}

func (x *SyncActivityTaskAttributes) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *SyncActivityTaskAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SyncActivityTaskAttributes) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SyncActivityTaskAttributes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SyncActivityTaskAttributes) GetScheduledId() int64 {
	if x != nil {
		return x.ScheduledId
	}
	return 0
}

func (x *SyncActivityTaskAttributes) GetScheduledTime() *timestamp.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *SyncActivityTaskAttributes) GetStartedId() int64 {
	if x != nil {
		return x.StartedId
	}
	return 0
}

func (x *SyncActivityTaskAttributes) GetStartedTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *SyncActivityTaskAttributes) GetLastHeartbeatTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return nil
}

func (x *SyncActivityTaskAttributes) GetDetails() *Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SyncActivityTaskAttributes) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *SyncActivityTaskAttributes) GetLastFailure() *Failure {
	if x != nil {
		return x.LastFailure
	}
	return nil
}

func (x *SyncActivityTaskAttributes) GetLastWorkerIdentity() string {
	if x != nil {
		return x.LastWorkerIdentity
	}
	return ""
}

func (x *SyncActivityTaskAttributes) GetVersionHistory() *VersionHistory {
	if x != nil {
		return x.VersionHistory
	}
	return nil
}

type HistoryMetadataTaskAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetClusters []string `protobuf:"bytes,1,rep,name=target_clusters,json=targetClusters,proto3" json:"target_clusters,omitempty"`
	DomainId       string   `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId     string   `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId          string   `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	FirstEventId   int64    `protobuf:"varint,5,opt,name=first_event_id,json=firstEventId,proto3" json:"first_event_id,omitempty"`
	NextEventId    int64    `protobuf:"varint,6,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	Version        int64    `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HistoryMetadataTaskAttributes) Reset() {
	*x = HistoryMetadataTaskAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryMetadataTaskAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryMetadataTaskAttributes) ProtoMessage() {}

func (x *HistoryMetadataTaskAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryMetadataTaskAttributes.ProtoReflect.Descriptor instead.
func (*HistoryMetadataTaskAttributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{92}
}

func (x *HistoryMetadataTaskAttributes) GetTargetClusters() []string {
	if x != nil {
		return x.TargetClusters
	}
	return nil
}

func (x *HistoryMetadataTaskAttributes) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *HistoryMetadataTaskAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *HistoryMetadataTaskAttributes) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *HistoryMetadataTaskAttributes) GetFirstEventId() int64 {
	if x != nil {
		return x.FirstEventId
	}
	return 0
}

func (x *HistoryMetadataTaskAttributes) GetNextEventId() int64 {
	if x != nil {
		return x.NextEventId
	}
	return 0
}

func (x *HistoryMetadataTaskAttributes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type HistoryTaskV2Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId              int64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DomainId            string                `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId          string                `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId               string                `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	VersionHistoryItems []*VersionHistoryItem `protobuf:"bytes,5,rep,name=version_history_items,json=versionHistoryItems,proto3" json:"version_history_items,omitempty"`
	Events              *DataBlob             `protobuf:"bytes,6,opt,name=events,proto3" json:"events,omitempty"`
	// New run events does not need version history since there is no prior events.
	NewRunEvents *DataBlob `protobuf:"bytes,7,opt,name=new_run_events,json=newRunEvents,proto3" json:"new_run_events,omitempty"`
}

func (x *HistoryTaskV2Attributes) Reset() {
	*x = HistoryTaskV2Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryTaskV2Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryTaskV2Attributes) ProtoMessage() {}

func (x *HistoryTaskV2Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryTaskV2Attributes.ProtoReflect.Descriptor instead.
func (*HistoryTaskV2Attributes) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{93}
}

func (x *HistoryTaskV2Attributes) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *HistoryTaskV2Attributes) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *HistoryTaskV2Attributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *HistoryTaskV2Attributes) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *HistoryTaskV2Attributes) GetVersionHistoryItems() []*VersionHistoryItem {
	if x != nil {
		return x.VersionHistoryItems
	}
	return nil
}

func (x *HistoryTaskV2Attributes) GetEvents() *DataBlob {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *HistoryTaskV2Attributes) GetNewRunEvents() *DataBlob {
	if x != nil {
		return x.NewRunEvents
	}
	return nil
}

type DataBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodingType EncodingType `protobuf:"varint,1,opt,name=encoding_type,json=encodingType,proto3,enum=EncodingType" json:"encoding_type,omitempty"`
	Data         []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataBlob) Reset() {
	*x = DataBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlob) ProtoMessage() {}

func (x *DataBlob) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlob.ProtoReflect.Descriptor instead.
func (*DataBlob) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{94}
}

func (x *DataBlob) GetEncodingType() EncodingType {
	if x != nil {
		return x.EncodingType
	}
	return EncodingType_ENCODING_TYPE_UNSPECIFIED
}

func (x *DataBlob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueueMetadataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterAckLevels map[string]int64 `protobuf:"bytes,1,rep,name=clusterAckLevels,proto3" json:"clusterAckLevels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QueueMetadataInfo) Reset() {
	*x = QueueMetadataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMetadataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMetadataInfo) ProtoMessage() {}

func (x *QueueMetadataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMetadataInfo.ProtoReflect.Descriptor instead.
func (*QueueMetadataInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{95}
}

func (x *QueueMetadataInfo) GetClusterAckLevels() map[string]int64 {
	if x != nil {
		return x.ClusterAckLevels
	}
	return nil
}

type ReplicationTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId                string   `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId              string   `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId                   string   `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType                TaskType `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=TaskType" json:"task_type,omitempty"`
	Version                 int64    `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	FirstEventId            int64    `protobuf:"varint,6,opt,name=first_event_id,json=firstEventId,proto3" json:"first_event_id,omitempty"`
	NextEventId             int64    `protobuf:"varint,7,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	ScheduledId             int64    `protobuf:"varint,8,opt,name=scheduled_id,json=scheduledId,proto3" json:"scheduled_id,omitempty"`
	EventStoreVersion       int32    `protobuf:"varint,9,opt,name=event_store_version,json=eventStoreVersion,proto3" json:"event_store_version,omitempty"`
	NewRunEventStoreVersion int32    `protobuf:"varint,10,opt,name=new_run_event_store_version,json=newRunEventStoreVersion,proto3" json:"new_run_event_store_version,omitempty"`
	BranchToken             []byte   `protobuf:"bytes,11,opt,name=branch_token,json=branchToken,proto3" json:"branch_token,omitempty"`
	NewRunBranchToken       []byte   `protobuf:"bytes,13,opt,name=new_run_branch_token,json=newRunBranchToken,proto3" json:"new_run_branch_token,omitempty"`
	TaskId                  int64    `protobuf:"varint,15,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ReplicationTaskInfo) Reset() {
	*x = ReplicationTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationTaskInfo) ProtoMessage() {}

func (x *ReplicationTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationTaskInfo.ProtoReflect.Descriptor instead.
func (*ReplicationTaskInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{96}
}

func (x *ReplicationTaskInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ReplicationTaskInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ReplicationTaskInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ReplicationTaskInfo) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_UNSPECIFIED
}

func (x *ReplicationTaskInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReplicationTaskInfo) GetFirstEventId() int64 {
	if x != nil {
		return x.FirstEventId
	}
	return 0
}

func (x *ReplicationTaskInfo) GetNextEventId() int64 {
	if x != nil {
		return x.NextEventId
	}
	return 0
}

func (x *ReplicationTaskInfo) GetScheduledId() int64 {
	if x != nil {
		return x.ScheduledId
	}
	return 0
}

func (x *ReplicationTaskInfo) GetEventStoreVersion() int32 {
	if x != nil {
		return x.EventStoreVersion
	}
	return 0
}

func (x *ReplicationTaskInfo) GetNewRunEventStoreVersion() int32 {
	if x != nil {
		return x.NewRunEventStoreVersion
	}
	return 0
}

func (x *ReplicationTaskInfo) GetBranchToken() []byte {
	if x != nil {
		return x.BranchToken
	}
	return nil
}

func (x *ReplicationTaskInfo) GetNewRunBranchToken() []byte {
	if x != nil {
		return x.NewRunBranchToken
	}
	return nil
}

func (x *ReplicationTaskInfo) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type RequestCancelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	InitiatedEventBatchId int64  `protobuf:"varint,2,opt,name=initiated_event_batch_id,json=initiatedEventBatchId,proto3" json:"initiated_event_batch_id,omitempty"`
	CancelRequestId       string `protobuf:"bytes,3,opt,name=cancel_request_id,json=cancelRequestId,proto3" json:"cancel_request_id,omitempty"`
	InitiatedId           int64  `protobuf:"varint,4,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (x *RequestCancelInfo) Reset() {
	*x = RequestCancelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelInfo) ProtoMessage() {}

func (x *RequestCancelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelInfo.ProtoReflect.Descriptor instead.
func (*RequestCancelInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{97}
}

func (x *RequestCancelInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RequestCancelInfo) GetInitiatedEventBatchId() int64 {
	if x != nil {
		return x.InitiatedEventBatchId
	}
	return 0
}

func (x *RequestCancelInfo) GetCancelRequestId() string {
	if x != nil {
		return x.CancelRequestId
	}
	return ""
}

func (x *RequestCancelInfo) GetInitiatedId() int64 {
	if x != nil {
		return x.InitiatedId
	}
	return 0
}

type ShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId             int32  `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	RangeId             int64  `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Owner               string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ReplicationAckLevel int64  `protobuf:"varint,4,opt,name=replication_ack_level,json=replicationAckLevel,proto3" json:"replication_ack_level,omitempty"`
	TransferAckLevel    int64  `protobuf:"varint,5,opt,name=transfer_ack_level,json=transferAckLevel,proto3" json:"transfer_ack_level,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "since" is needed here. --)
	StolenSinceRenew          int32                           `protobuf:"varint,6,opt,name=stolen_since_renew,json=stolenSinceRenew,proto3" json:"stolen_since_renew,omitempty"`
	UpdateTime                *timestamp.Timestamp            `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	TimerAckLevelTime         *timestamp.Timestamp            `protobuf:"bytes,8,opt,name=timer_ack_level_time,json=timerAckLevelTime,proto3" json:"timer_ack_level_time,omitempty"`
	DomainNotificationVersion int64                           `protobuf:"varint,9,opt,name=domain_notification_version,json=domainNotificationVersion,proto3" json:"domain_notification_version,omitempty"`
	ClusterTransferAckLevel   map[string]int64                `protobuf:"bytes,10,rep,name=cluster_transfer_ack_level,json=clusterTransferAckLevel,proto3" json:"cluster_transfer_ack_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ClusterTimerAckLevel      map[string]*timestamp.Timestamp `protobuf:"bytes,11,rep,name=cluster_timer_ack_level,json=clusterTimerAckLevel,proto3" json:"cluster_timer_ack_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterReplicationLevel   map[string]int64                `protobuf:"bytes,12,rep,name=cluster_replication_level,json=clusterReplicationLevel,proto3" json:"cluster_replication_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReplicationDlqAckLevel    map[string]int64                `protobuf:"bytes,13,rep,name=replication_dlq_ack_level,json=replicationDlqAckLevel,proto3" json:"replication_dlq_ack_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ShardInfo) Reset() {
	*x = ShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardInfo) ProtoMessage() {}

func (x *ShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardInfo.ProtoReflect.Descriptor instead.
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{98}
}

func (x *ShardInfo) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardInfo) GetRangeId() int64 {
	if x != nil {
		return x.RangeId
	}
	return 0
}

func (x *ShardInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ShardInfo) GetReplicationAckLevel() int64 {
	if x != nil {
		return x.ReplicationAckLevel
	}
	return 0
}

func (x *ShardInfo) GetTransferAckLevel() int64 {
	if x != nil {
		return x.TransferAckLevel
	}
	return 0
}

func (x *ShardInfo) GetStolenSinceRenew() int32 {
	if x != nil {
		return x.StolenSinceRenew
	}
	return 0
}

func (x *ShardInfo) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ShardInfo) GetTimerAckLevelTime() *timestamp.Timestamp {
	if x != nil {
		return x.TimerAckLevelTime
	}
	return nil
}

func (x *ShardInfo) GetDomainNotificationVersion() int64 {
	if x != nil {
		return x.DomainNotificationVersion
	}
	return 0
}

func (x *ShardInfo) GetClusterTransferAckLevel() map[string]int64 {
	if x != nil {
		return x.ClusterTransferAckLevel
	}
	return nil
}

func (x *ShardInfo) GetClusterTimerAckLevel() map[string]*timestamp.Timestamp {
	if x != nil {
		return x.ClusterTimerAckLevel
	}
	return nil
}

func (x *ShardInfo) GetClusterReplicationLevel() map[string]int64 {
	if x != nil {
		return x.ClusterReplicationLevel
	}
	return nil
}

func (x *ShardInfo) GetReplicationDlqAckLevel() map[string]int64 {
	if x != nil {
		return x.ReplicationDlqAckLevel
	}
	return nil
}

type SignalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               int64     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	InitiatedEventBatchId int64     `protobuf:"varint,2,opt,name=initiated_event_batch_id,json=initiatedEventBatchId,proto3" json:"initiated_event_batch_id,omitempty"`
	RequestId             string    `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Name                  string    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Input                 *Payloads `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Control               string    `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	InitiatedId           int64     `protobuf:"varint,7,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (x *SignalInfo) Reset() {
	*x = SignalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInfo) ProtoMessage() {}

func (x *SignalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInfo.ProtoReflect.Descriptor instead.
func (*SignalInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{99}
}

func (x *SignalInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SignalInfo) GetInitiatedEventBatchId() int64 {
	if x != nil {
		return x.InitiatedEventBatchId
	}
	return 0
}

func (x *SignalInfo) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignalInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalInfo) GetInput() *Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalInfo) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *SignalInfo) GetInitiatedId() int64 {
	if x != nil {
		return x.InitiatedId
	}
	return 0
}

type TaskListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId       string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TaskType       TaskListType         `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=TaskListType" json:"task_type,omitempty"`
	Kind           TaskListKind         `protobuf:"varint,4,opt,name=kind,proto3,enum=TaskListKind" json:"kind,omitempty"`
	AckLevel       int64                `protobuf:"varint,5,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	ExpiryTime     *timestamp.Timestamp `protobuf:"bytes,6,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	LastUpdateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (x *TaskListInfo) Reset() {
	*x = TaskListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListInfo) ProtoMessage() {}

func (x *TaskListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListInfo.ProtoReflect.Descriptor instead.
func (*TaskListInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{100}
}

func (x *TaskListInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *TaskListInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskListInfo) GetTaskType() TaskListType {
	if x != nil {
		return x.TaskType
	}
	return TaskListType_TASK_LIST_TYPE_UNSPECIFIED
}

func (x *TaskListInfo) GetKind() TaskListKind {
	if x != nil {
		return x.Kind
	}
	return TaskListKind_TASK_LIST_KIND_UNSPECIFIED
}

func (x *TaskListInfo) GetAckLevel() int64 {
	if x != nil {
		return x.AckLevel
	}
	return 0
}

func (x *TaskListInfo) GetExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *TaskListInfo) GetLastUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId   string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string               `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ScheduleId int64                `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpiryTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{101}
}

func (x *TaskInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *TaskInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TaskInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TaskInfo) GetScheduleId() int64 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *TaskInfo) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskInfo) GetExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

type AllocatedTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *TaskInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskId int64     `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *AllocatedTaskInfo) Reset() {
	*x = AllocatedTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocatedTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatedTaskInfo) ProtoMessage() {}

func (x *AllocatedTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatedTaskInfo.ProtoReflect.Descriptor instead.
func (*AllocatedTaskInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{102}
}

func (x *AllocatedTaskInfo) GetData() *TaskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AllocatedTaskInfo) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type TimerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int64                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	StartedId  int64                `protobuf:"varint,2,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	ExpiryTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	TaskStatus int64                `protobuf:"varint,4,opt,name=task_status,json=taskStatus,proto3" json:"task_status,omitempty"`
	// timerId serves the purpose of indicating whether a timer task is generated for this timer info.
	TimerId string `protobuf:"bytes,5,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
}

func (x *TimerInfo) Reset() {
	*x = TimerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerInfo) ProtoMessage() {}

func (x *TimerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerInfo.ProtoReflect.Descriptor instead.
func (*TimerInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{103}
}

func (x *TimerInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TimerInfo) GetStartedId() int64 {
	if x != nil {
		return x.StartedId
	}
	return 0
}

func (x *TimerInfo) GetExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *TimerInfo) GetTaskStatus() int64 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *TimerInfo) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

type TimerTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId            string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId          string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId               string               `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType            TaskType             `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=TaskType" json:"task_type,omitempty"`
	TimeoutType         TimeoutType          `protobuf:"varint,5,opt,name=timeout_type,json=timeoutType,proto3,enum=TimeoutType" json:"timeout_type,omitempty"`
	WorkflowBackoffType WorkflowBackoffType  `protobuf:"varint,6,opt,name=workflow_backoff_type,json=workflowBackoffType,proto3,enum=WorkflowBackoffType" json:"workflow_backoff_type,omitempty"`
	Version             int64                `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	ScheduleAttempt     int32                `protobuf:"varint,8,opt,name=schedule_attempt,json=scheduleAttempt,proto3" json:"schedule_attempt,omitempty"`
	EventId             int64                `protobuf:"varint,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TaskId              int64                `protobuf:"varint,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskTimestamp       *timestamp.Timestamp `protobuf:"bytes,11,opt,name=task_timestamp,json=taskTimestamp,proto3" json:"task_timestamp,omitempty"`
}

func (x *TimerTaskInfo) Reset() {
	*x = TimerTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerTaskInfo) ProtoMessage() {}

func (x *TimerTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerTaskInfo.ProtoReflect.Descriptor instead.
func (*TimerTaskInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{104}
}

func (x *TimerTaskInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *TimerTaskInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TimerTaskInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TimerTaskInfo) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_UNSPECIFIED
}

func (x *TimerTaskInfo) GetTimeoutType() TimeoutType {
	if x != nil {
		return x.TimeoutType
	}
	return TimeoutType_TIMEOUT_TYPE_UNSPECIFIED
}

func (x *TimerTaskInfo) GetWorkflowBackoffType() WorkflowBackoffType {
	if x != nil {
		return x.WorkflowBackoffType
	}
	return WorkflowBackoffType_WORKFLOW_BACKOFF_TYPE_UNSPECIFIED
}

func (x *TimerTaskInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TimerTaskInfo) GetScheduleAttempt() int32 {
	if x != nil {
		return x.ScheduleAttempt
	}
	return 0
}

func (x *TimerTaskInfo) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *TimerTaskInfo) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TimerTaskInfo) GetTaskTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.TaskTimestamp
	}
	return nil
}

type TransferTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId                string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowId              string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId                   string               `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType                TaskType             `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=TaskType" json:"task_type,omitempty"`
	TargetDomainId          string               `protobuf:"bytes,5,opt,name=target_domain_id,json=targetDomainId,proto3" json:"target_domain_id,omitempty"`
	TargetWorkflowId        string               `protobuf:"bytes,6,opt,name=target_workflow_id,json=targetWorkflowId,proto3" json:"target_workflow_id,omitempty"`
	TargetRunId             string               `protobuf:"bytes,7,opt,name=target_run_id,json=targetRunId,proto3" json:"target_run_id,omitempty"`
	TaskList                string               `protobuf:"bytes,8,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	TargetChildWorkflowOnly bool                 `protobuf:"varint,9,opt,name=target_child_workflow_only,json=targetChildWorkflowOnly,proto3" json:"target_child_workflow_only,omitempty"`
	ScheduleId              int64                `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Version                 int64                `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	TaskId                  int64                `protobuf:"varint,12,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskTimestamp           *timestamp.Timestamp `protobuf:"bytes,13,opt,name=task_timestamp,json=taskTimestamp,proto3" json:"task_timestamp,omitempty"`
	RecordVisibility        bool                 `protobuf:"varint,14,opt,name=record_visibility,json=recordVisibility,proto3" json:"record_visibility,omitempty"`
}

func (x *TransferTaskInfo) Reset() {
	*x = TransferTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTaskInfo) ProtoMessage() {}

func (x *TransferTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTaskInfo.ProtoReflect.Descriptor instead.
func (*TransferTaskInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{105}
}

func (x *TransferTaskInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *TransferTaskInfo) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TransferTaskInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TransferTaskInfo) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_UNSPECIFIED
}

func (x *TransferTaskInfo) GetTargetDomainId() string {
	if x != nil {
		return x.TargetDomainId
	}
	return ""
}

func (x *TransferTaskInfo) GetTargetWorkflowId() string {
	if x != nil {
		return x.TargetWorkflowId
	}
	return ""
}

func (x *TransferTaskInfo) GetTargetRunId() string {
	if x != nil {
		return x.TargetRunId
	}
	return ""
}

func (x *TransferTaskInfo) GetTaskList() string {
	if x != nil {
		return x.TaskList
	}
	return ""
}

func (x *TransferTaskInfo) GetTargetChildWorkflowOnly() bool {
	if x != nil {
		return x.TargetChildWorkflowOnly
	}
	return false
}

func (x *TransferTaskInfo) GetScheduleId() int64 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *TransferTaskInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TransferTaskInfo) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TransferTaskInfo) GetTaskTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.TaskTimestamp
	}
	return nil
}

func (x *TransferTaskInfo) GetRecordVisibility() bool {
	if x != nil {
		return x.RecordVisibility
	}
	return false
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x03, 0x0a,
	0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x25,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x03, 0x0a,
	0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a,
	0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61,
	0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x4a,
	0x0a, 0x19, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x17, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x55,
	0x72, 0x69, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x42, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0d, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42,
	0x61, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x64, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x94, 0x0d, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f,
	0x01, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x16, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x55, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01,
	0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x15,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x1f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x2f, 0x0a, 0x0c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x2b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x27, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x29, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x85,
	0x01, 0x0a, 0x2a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x26,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x28, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x28, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x24, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x26, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x22, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x7f, 0x0a, 0x28, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x24, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x7d, 0x0a, 0x28, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x23, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x76, 0x0a, 0x25, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x21, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x28, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x24, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x26, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x28, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x24, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x25, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x21, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7d,
	0x0a, 0x28, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x23, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x63, 0x0a,
	0x1e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x27, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x23, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x1f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1c,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x20,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x2c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x28, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x34, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x2c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x45,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x3e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc7,
	0x01, 0x0a, 0x42, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x3b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x3d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x37, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x34, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x64, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x64, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x39, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x33, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x36, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x30,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x31, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x33,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2e, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a,
	0x30, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x32, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x33, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x2d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xa1, 0x01, 0x0a, 0x34, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x2f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x3d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x37, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x3a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x34, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x35, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x30, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x32, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2d, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe4, 0x0b, 0x0a, 0x27, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x4e, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f,
	0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a,
	0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x6d, 0x0a,
	0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x1f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x12, 0x19, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x3e, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x16,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x96, 0x01, 0x0a, 0x29, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x26, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x58,
	0x0a, 0x28, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x06, 0x0a, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6e,
	0x65, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73,
	0x4e, 0x65, 0x77, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x24, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22,
	0xae, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x80, 0x03, 0x0a, 0x21, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x22, 0xd2, 0x05, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x5a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98,
	0xdf, 0x1f, 0x01, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22,
	0xbd, 0x01, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xe9, 0x01, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x23,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x2a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x23, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x46, 0x0a, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x1b,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x46,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x60, 0x0a, 0x19, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xf6,
	0x01, 0x0a, 0x2f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x28, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xdb, 0x02, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x88, 0x01, 0x0a, 0x28, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x2a, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0xad, 0x02, 0x0a, 0x3e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0xeb, 0x02, 0x0a, 0x3b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x22, 0xc2, 0x01, 0x0a, 0x37, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x02, 0x0a, 0x37, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0xe4, 0x02, 0x0a, 0x34, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x20,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xd5, 0x01, 0x0a, 0x30, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22,
	0xb7, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xbb, 0x07, 0x0a, 0x33, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x18, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x42,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x20,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x30, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x2c, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xba, 0x02, 0x0a, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x2b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbb, 0x02,
	0x0a, 0x2d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x2d,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x2f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41,
	0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30,
	0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x22, 0x8e, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x3a, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x5b, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8c,
	0x02, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb8, 0x02,
	0x0a, 0x21, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xae, 0x06, 0x0a, 0x07, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x14,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x50, 0x0a, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x1b, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x76, 0x0a, 0x25, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x4a, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x04, 0x4d,
	0x65, 0x6d, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x43,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x43, 0x0a, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbc, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x41,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x61, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x0b, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x19,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x36, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa1, 0x04, 0x0a, 0x12, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x22, 0xbc,
	0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x1a,
	0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf,
	0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x62, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x1a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52,
	0x13, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x17,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x19, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x25, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x21, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x20, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98,
	0xdf, 0x1f, 0x01, 0x52, 0x1c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a,
	0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x14,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61,
	0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x12, 0x38, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x3e, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x58, 0x0a, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4f, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x5e, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x08, 0x66,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x0d, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xab, 0x05, 0x0a,
	0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x16, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x14, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x17, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x21, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x1d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x79,
	0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x20, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x76, 0x32, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x56, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x14, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x03, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x52,
	0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x05, 0x0a,
	0x1a, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x1d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x17, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x52, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x1a,
	0x43, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x6e, 0x65, 0x77, 0x52, 0x75, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x22, 0x96, 0x09, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x6f,
	0x6c, 0x65, 0x6e, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x41, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x61, 0x0a, 0x17, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x63, 0x0a, 0x19,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x61, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x6c, 0x71, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6c, 0x71, 0x41,
	0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6c, 0x71, 0x41, 0x63, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x1a, 0x4a, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x63, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6c, 0x71, 0x41, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a,
	0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x22,
	0xba, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x03, 0x0a, 0x0d, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xaf, 0x04, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2a, 0x68, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x7f, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xd7, 0x0e, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x26, 0x0a,
	0x22, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x0e,
	0x12, 0x2d, 0x0a, 0x29, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12,
	0x32, 0x0a, 0x2e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x14, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x15, 0x12,
	0x43, 0x0a, 0x3f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x16, 0x12, 0x40, 0x0a, 0x3c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12, 0x3b, 0x0a, 0x37, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x45,
	0x44, 0x10, 0x19, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x1a, 0x12,
	0x2c, 0x0a, 0x28, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x32, 0x0a,
	0x2e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0x1c, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x1d, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1e,
	0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x1f, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x20, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x21, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x22, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x23, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x24, 0x12, 0x3b, 0x0a,
	0x37, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x25, 0x12, 0x38, 0x0a, 0x34, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x26, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x27, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x28, 0x2a, 0x9f, 0x02, 0x0a, 0x0a,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x54, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x4d, 0x50, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xb0, 0x01,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x04,
	0x2a, 0xae, 0x01, 0x0a, 0x26, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x37, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x43, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x2a, 0xc8, 0x01, 0x0a, 0x2a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x3b, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x59, 0x0a, 0x55, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0xc8, 0x01, 0x0a,
	0x2a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x3b, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x59, 0x0a, 0x55,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0xd8, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x57, 0x4f, 0x52,
	0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x2a, 0xa4, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x59, 0x10, 0x02, 0x2a,
	0x68, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x2a, 0xd7, 0x0b, 0x0a, 0x17, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x3f, 0x0a, 0x3b, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x53, 0x10, 0x02, 0x12, 0x45, 0x0a, 0x41, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x39, 0x0a, 0x35, 0x44,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x04, 0x12, 0x3a, 0x0a, 0x36, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53,
	0x10, 0x05, 0x12, 0x3b, 0x0a, 0x37, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12,
	0x49, 0x0a, 0x45, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x45, 0x0a, 0x41, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10,
	0x08, 0x12, 0x47, 0x0a, 0x43, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x09, 0x12, 0x58, 0x0a, 0x54, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x53, 0x10, 0x0a, 0x12, 0x3d, 0x0a, 0x39, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f,
	0x41, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x0b, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x35, 0x0a, 0x31,
	0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x0d, 0x12, 0x40, 0x0a, 0x3c, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x47, 0x0a, 0x43, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x43,
	0x0a, 0x3f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x10, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x45, 0x43, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x34,
	0x0a, 0x30, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x13, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x14, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x15, 0x12, 0x3d,
	0x0a, 0x39, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x16, 0x12, 0x34, 0x0a,
	0x30, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x17, 0x2a, 0xbd, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x73, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x41, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e,
	0x55, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x03, 0x2a, 0xe5, 0x02, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x25, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x45, 0x57,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x2a, 0xc7, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x52,
	0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x56, 0x32, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x06, 0x2a, 0x6d, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x33, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0xe7, 0x05, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a,
	0x23, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x2e, 0x0a,
	0x2a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x10, 0x0a, 0x12, 0x38, 0x0a, 0x34, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52,
	0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x52,
	0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x12, 0x2a,
	0x7d, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46,
	0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x4f,
	0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_message_proto_goTypes = []interface{}{
	(ArchivalState)(0), // 0: ArchivalState
	(DomainState)(0),   // 1: DomainState
	(EventType)(0),     // 2: EventType
	(RetryState)(0),    // 3: RetryState
	(TimeoutType)(0),   // 4: TimeoutType
	(StartChildWorkflowExecutionFailedCause)(0),                            // 5: StartChildWorkflowExecutionFailedCause
	(CancelExternalWorkflowExecutionFailedCause)(0),                        // 6: CancelExternalWorkflowExecutionFailedCause
	(SignalExternalWorkflowExecutionFailedCause)(0),                        // 7: SignalExternalWorkflowExecutionFailedCause
	(WorkflowIdReusePolicy)(0),                                             // 8: WorkflowIdReusePolicy
	(ParentClosePolicy)(0),                                                 // 9: ParentClosePolicy
	(TaskListKind)(0),                                                      // 10: TaskListKind
	(TaskListType)(0),                                                      // 11: TaskListType
	(DecisionTaskFailedCause)(0),                                           // 12: DecisionTaskFailedCause
	(ContinueAsNewInitiator)(0),                                            // 13: ContinueAsNewInitiator
	(WorkflowExecutionStatus)(0),                                           // 14: WorkflowExecutionStatus
	(ReplicationTaskType)(0),                                               // 15: ReplicationTaskType
	(DomainOperation)(0),                                                   // 16: DomainOperation
	(EncodingType)(0),                                                      // 17: EncodingType
	(TaskType)(0),                                                          // 18: TaskType
	(WorkflowBackoffType)(0),                                               // 19: WorkflowBackoffType
	(*DomainDetail)(nil),                                                   // 20: DomainDetail
	(*DomainInfo)(nil),                                                     // 21: DomainInfo
	(*DomainReplicationConfig)(nil),                                        // 22: DomainReplicationConfig
	(*DomainConfig)(nil),                                                   // 23: DomainConfig
	(*BadBinaries)(nil),                                                    // 24: BadBinaries
	(*BadBinaryInfo)(nil),                                                  // 25: BadBinaryInfo
	(*ActivityInfo)(nil),                                                   // 26: ActivityInfo
	(*HistoryEvent)(nil),                                                   // 27: HistoryEvent
	(*WorkflowExecutionStartedEventAttributes)(nil),                        // 28: WorkflowExecutionStartedEventAttributes
	(*WorkflowExecutionCompletedEventAttributes)(nil),                      // 29: WorkflowExecutionCompletedEventAttributes
	(*WorkflowExecutionFailedEventAttributes)(nil),                         // 30: WorkflowExecutionFailedEventAttributes
	(*WorkflowExecutionTimedOutEventAttributes)(nil),                       // 31: WorkflowExecutionTimedOutEventAttributes
	(*WorkflowExecutionContinuedAsNewEventAttributes)(nil),                 // 32: WorkflowExecutionContinuedAsNewEventAttributes
	(*DecisionTaskScheduledEventAttributes)(nil),                           // 33: DecisionTaskScheduledEventAttributes
	(*DecisionTaskStartedEventAttributes)(nil),                             // 34: DecisionTaskStartedEventAttributes
	(*DecisionTaskCompletedEventAttributes)(nil),                           // 35: DecisionTaskCompletedEventAttributes
	(*DecisionTaskTimedOutEventAttributes)(nil),                            // 36: DecisionTaskTimedOutEventAttributes
	(*DecisionTaskFailedEventAttributes)(nil),                              // 37: DecisionTaskFailedEventAttributes
	(*ActivityTaskScheduledEventAttributes)(nil),                           // 38: ActivityTaskScheduledEventAttributes
	(*ActivityTaskStartedEventAttributes)(nil),                             // 39: ActivityTaskStartedEventAttributes
	(*ActivityTaskCompletedEventAttributes)(nil),                           // 40: ActivityTaskCompletedEventAttributes
	(*ActivityTaskFailedEventAttributes)(nil),                              // 41: ActivityTaskFailedEventAttributes
	(*ActivityTaskTimedOutEventAttributes)(nil),                            // 42: ActivityTaskTimedOutEventAttributes
	(*ActivityTaskCancelRequestedEventAttributes)(nil),                     // 43: ActivityTaskCancelRequestedEventAttributes
	(*ActivityTaskCanceledEventAttributes)(nil),                            // 44: ActivityTaskCanceledEventAttributes
	(*TimerStartedEventAttributes)(nil),                                    // 45: TimerStartedEventAttributes
	(*TimerFiredEventAttributes)(nil),                                      // 46: TimerFiredEventAttributes
	(*TimerCanceledEventAttributes)(nil),                                   // 47: TimerCanceledEventAttributes
	(*WorkflowExecutionCancelRequestedEventAttributes)(nil),                // 48: WorkflowExecutionCancelRequestedEventAttributes
	(*WorkflowExecutionCanceledEventAttributes)(nil),                       // 49: WorkflowExecutionCanceledEventAttributes
	(*MarkerRecordedEventAttributes)(nil),                                  // 50: MarkerRecordedEventAttributes
	(*WorkflowExecutionSignaledEventAttributes)(nil),                       // 51: WorkflowExecutionSignaledEventAttributes
	(*WorkflowExecutionTerminatedEventAttributes)(nil),                     // 52: WorkflowExecutionTerminatedEventAttributes
	(*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)(nil), // 53: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	(*RequestCancelExternalWorkflowExecutionFailedEventAttributes)(nil),    // 54: RequestCancelExternalWorkflowExecutionFailedEventAttributes
	(*ExternalWorkflowExecutionCancelRequestedEventAttributes)(nil),        // 55: ExternalWorkflowExecutionCancelRequestedEventAttributes
	(*SignalExternalWorkflowExecutionInitiatedEventAttributes)(nil),        // 56: SignalExternalWorkflowExecutionInitiatedEventAttributes
	(*SignalExternalWorkflowExecutionFailedEventAttributes)(nil),           // 57: SignalExternalWorkflowExecutionFailedEventAttributes
	(*ExternalWorkflowExecutionSignaledEventAttributes)(nil),               // 58: ExternalWorkflowExecutionSignaledEventAttributes
	(*UpsertWorkflowSearchAttributesEventAttributes)(nil),                  // 59: UpsertWorkflowSearchAttributesEventAttributes
	(*StartChildWorkflowExecutionInitiatedEventAttributes)(nil),            // 60: StartChildWorkflowExecutionInitiatedEventAttributes
	(*StartChildWorkflowExecutionFailedEventAttributes)(nil),               // 61: StartChildWorkflowExecutionFailedEventAttributes
	(*ChildWorkflowExecutionStartedEventAttributes)(nil),                   // 62: ChildWorkflowExecutionStartedEventAttributes
	(*ChildWorkflowExecutionCompletedEventAttributes)(nil),                 // 63: ChildWorkflowExecutionCompletedEventAttributes
	(*ChildWorkflowExecutionFailedEventAttributes)(nil),                    // 64: ChildWorkflowExecutionFailedEventAttributes
	(*ChildWorkflowExecutionCanceledEventAttributes)(nil),                  // 65: ChildWorkflowExecutionCanceledEventAttributes
	(*ChildWorkflowExecutionTimedOutEventAttributes)(nil),                  // 66: ChildWorkflowExecutionTimedOutEventAttributes
	(*ChildWorkflowExecutionTerminatedEventAttributes)(nil),                // 67: ChildWorkflowExecutionTerminatedEventAttributes
	(*WorkflowExecution)(nil),                                              // 68: WorkflowExecution
	(*WorkflowType)(nil),                                                   // 69: WorkflowType
	(*Payloads)(nil),                                                       // 70: Payloads
	(*Payload)(nil),                                                        // 71: Payload
	(*ApplicationFailureInfo)(nil),                                         // 72: ApplicationFailureInfo
	(*TimeoutFailureInfo)(nil),                                             // 73: TimeoutFailureInfo
	(*CanceledFailureInfo)(nil),                                            // 74: CanceledFailureInfo
	(*TerminatedFailureInfo)(nil),                                          // 75: TerminatedFailureInfo
	(*ServerFailureInfo)(nil),                                              // 76: ServerFailureInfo
	(*ResetWorkflowFailureInfo)(nil),                                       // 77: ResetWorkflowFailureInfo
	(*ActivityFailureInfo)(nil),                                            // 78: ActivityFailureInfo
	(*ChildWorkflowExecutionFailureInfo)(nil),                              // 79: ChildWorkflowExecutionFailureInfo
	(*Failure)(nil),                                                        // 80: Failure
	(*ActivityType)(nil),                                                   // 81: ActivityType
	(*SearchAttributes)(nil),                                               // 82: SearchAttributes
	(*Memo)(nil),                                                           // 83: Memo
	(*Header)(nil),                                                         // 84: Header
	(*RetryPolicy)(nil),                                                    // 85: RetryPolicy
	(*TaskList)(nil),                                                       // 86: TaskList
	(*TaskListMetadata)(nil),                                               // 87: TaskListMetadata
	(*TaskListStatus)(nil),                                                 // 88: TaskListStatus
	(*TaskIdBlock)(nil),                                                    // 89: TaskIdBlock
	(*TaskListPartitionMetadata)(nil),                                      // 90: TaskListPartitionMetadata
	(*PollerInfo)(nil),                                                     // 91: PollerInfo
	(*StickyExecutionAttributes)(nil),                                      // 92: StickyExecutionAttributes
	(*ResetPoints)(nil),                                                    // 93: ResetPoints
	(*ResetPointInfo)(nil),                                                 // 94: ResetPointInfo
	(*ChildExecutionInfo)(nil),                                             // 95: ChildExecutionInfo
	(*WorkflowExecutionState)(nil),                                         // 96: WorkflowExecutionState
	(*WorkflowExecutionInfo)(nil),                                          // 97: WorkflowExecutionInfo
	(*ReplicationData)(nil),                                                // 98: ReplicationData
	(*ReplicationInfo)(nil),                                                // 99: ReplicationInfo
	(*VersionHistory)(nil),                                                 // 100: VersionHistory
	(*VersionHistories)(nil),                                               // 101: VersionHistories
	(*VersionHistoryItem)(nil),                                             // 102: VersionHistoryItem
	(*HistoryTreeInfo)(nil),                                                // 103: HistoryTreeInfo
	(*HistoryBranch)(nil),                                                  // 104: HistoryBranch
	(*HistoryBranchRange)(nil),                                             // 105: HistoryBranchRange
	(*ReplicationTask)(nil),                                                // 106: ReplicationTask
	(*DomainTaskAttributes)(nil),                                           // 107: DomainTaskAttributes
	(*HistoryTaskAttributes)(nil),                                          // 108: HistoryTaskAttributes
	(*History)(nil),                                                        // 109: History
	(*SyncShardStatusTaskAttributes)(nil),                                  // 110: SyncShardStatusTaskAttributes
	(*SyncActivityTaskAttributes)(nil),                                     // 111: SyncActivityTaskAttributes
	(*HistoryMetadataTaskAttributes)(nil),                                  // 112: HistoryMetadataTaskAttributes
	(*HistoryTaskV2Attributes)(nil),                                        // 113: HistoryTaskV2Attributes
	(*DataBlob)(nil),                                                       // 114: DataBlob
	(*QueueMetadataInfo)(nil),                                              // 115: QueueMetadataInfo
	(*ReplicationTaskInfo)(nil),                                            // 116: ReplicationTaskInfo
	(*RequestCancelInfo)(nil),                                              // 117: RequestCancelInfo
	(*ShardInfo)(nil),                                                      // 118: ShardInfo
	(*SignalInfo)(nil),                                                     // 119: SignalInfo
	(*TaskListInfo)(nil),                                                   // 120: TaskListInfo
	(*TaskInfo)(nil),                                                       // 121: TaskInfo
	(*AllocatedTaskInfo)(nil),                                              // 122: AllocatedTaskInfo
	(*TimerInfo)(nil),                                                      // 123: TimerInfo
	(*TimerTaskInfo)(nil),                                                  // 124: TimerTaskInfo
	(*TransferTaskInfo)(nil),                                               // 125: TransferTaskInfo
	nil,                                                                    // 126: DomainInfo.DataEntry
	nil,                                                                    // 127: BadBinaries.BinariesEntry
	nil,                                                                    // 128: MarkerRecordedEventAttributes.DetailsEntry
	nil,                                                                    // 129: Payload.MetadataEntry
	nil,                                                                    // 130: SearchAttributes.IndexedFieldsEntry
	nil,                                                                    // 131: Memo.FieldsEntry
	nil,                                                                    // 132: Header.FieldsEntry
	nil,                                                                    // 133: WorkflowExecutionInfo.SearchAttributesEntry
	nil,                                                                    // 134: WorkflowExecutionInfo.MemoEntry
	nil,                                                                    // 135: ReplicationData.LastReplicationInfoEntry
	nil,                                                                    // 136: QueueMetadataInfo.ClusterAckLevelsEntry
	nil,                                                                    // 137: ShardInfo.ClusterTransferAckLevelEntry
	nil,                                                                    // 138: ShardInfo.ClusterTimerAckLevelEntry
	nil,                                                                    // 139: ShardInfo.ClusterReplicationLevelEntry
	nil,                                                                    // 140: ShardInfo.ReplicationDlqAckLevelEntry
	(*timestamp.Timestamp)(nil),                                            // 141: google.protobuf.Timestamp
	(*duration.Duration)(nil),                                              // 142: google.protobuf.Duration
	(*wrappers.DoubleValue)(nil),                                           // 143: google.protobuf.DoubleValue
}
var file_message_proto_depIdxs = []int32{
	21,  // 0: DomainDetail.info:type_name -> DomainInfo
	23,  // 1: DomainDetail.config:type_name -> DomainConfig
	22,  // 2: DomainDetail.replication_config:type_name -> DomainReplicationConfig
	141, // 3: DomainDetail.failover_end_time:type_name -> google.protobuf.Timestamp
	1,   // 4: DomainInfo.state:type_name -> DomainState
	126, // 5: DomainInfo.data:type_name -> DomainInfo.DataEntry
	142, // 6: DomainConfig.retention:type_name -> google.protobuf.Duration
	24,  // 7: DomainConfig.bad_binaries:type_name -> BadBinaries
	0,   // 8: DomainConfig.history_archival_state:type_name -> ArchivalState
	0,   // 9: DomainConfig.visibility_archival_state:type_name -> ArchivalState
	127, // 10: BadBinaries.binaries:type_name -> BadBinaries.BinariesEntry
	141, // 11: BadBinaryInfo.create_time:type_name -> google.protobuf.Timestamp
	27,  // 12: ActivityInfo.scheduled_event:type_name -> HistoryEvent
	141, // 13: ActivityInfo.scheduled_time:type_name -> google.protobuf.Timestamp
	27,  // 14: ActivityInfo.started_event:type_name -> HistoryEvent
	141, // 15: ActivityInfo.started_time:type_name -> google.protobuf.Timestamp
	142, // 16: ActivityInfo.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	142, // 17: ActivityInfo.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	142, // 18: ActivityInfo.start_to_close_timeout:type_name -> google.protobuf.Duration
	142, // 19: ActivityInfo.heartbeat_timeout:type_name -> google.protobuf.Duration
	142, // 20: ActivityInfo.retry_initial_interval:type_name -> google.protobuf.Duration
	142, // 21: ActivityInfo.retry_maximum_interval:type_name -> google.protobuf.Duration
	141, // 22: ActivityInfo.retry_expiration_time:type_name -> google.protobuf.Timestamp
	80,  // 23: ActivityInfo.retry_last_failure:type_name -> Failure
	141, // 24: HistoryEvent.event_time:type_name -> google.protobuf.Timestamp
	2,   // 25: HistoryEvent.event_type:type_name -> EventType
	28,  // 26: HistoryEvent.workflow_execution_started_event_attributes:type_name -> WorkflowExecutionStartedEventAttributes
	29,  // 27: HistoryEvent.workflow_execution_completed_event_attributes:type_name -> WorkflowExecutionCompletedEventAttributes
	30,  // 28: HistoryEvent.workflow_execution_failed_event_attributes:type_name -> WorkflowExecutionFailedEventAttributes
	31,  // 29: HistoryEvent.workflow_execution_timed_out_event_attributes:type_name -> WorkflowExecutionTimedOutEventAttributes
	33,  // 30: HistoryEvent.decision_task_scheduled_event_attributes:type_name -> DecisionTaskScheduledEventAttributes
	34,  // 31: HistoryEvent.decision_task_started_event_attributes:type_name -> DecisionTaskStartedEventAttributes
	35,  // 32: HistoryEvent.decision_task_completed_event_attributes:type_name -> DecisionTaskCompletedEventAttributes
	36,  // 33: HistoryEvent.decision_task_timed_out_event_attributes:type_name -> DecisionTaskTimedOutEventAttributes
	37,  // 34: HistoryEvent.decision_task_failed_event_attributes:type_name -> DecisionTaskFailedEventAttributes
	38,  // 35: HistoryEvent.activity_task_scheduled_event_attributes:type_name -> ActivityTaskScheduledEventAttributes
	39,  // 36: HistoryEvent.activity_task_started_event_attributes:type_name -> ActivityTaskStartedEventAttributes
	40,  // 37: HistoryEvent.activity_task_completed_event_attributes:type_name -> ActivityTaskCompletedEventAttributes
	41,  // 38: HistoryEvent.activity_task_failed_event_attributes:type_name -> ActivityTaskFailedEventAttributes
	42,  // 39: HistoryEvent.activity_task_timed_out_event_attributes:type_name -> ActivityTaskTimedOutEventAttributes
	45,  // 40: HistoryEvent.timer_started_event_attributes:type_name -> TimerStartedEventAttributes
	46,  // 41: HistoryEvent.timer_fired_event_attributes:type_name -> TimerFiredEventAttributes
	43,  // 42: HistoryEvent.activity_task_cancel_requested_event_attributes:type_name -> ActivityTaskCancelRequestedEventAttributes
	44,  // 43: HistoryEvent.activity_task_canceled_event_attributes:type_name -> ActivityTaskCanceledEventAttributes
	47,  // 44: HistoryEvent.timer_canceled_event_attributes:type_name -> TimerCanceledEventAttributes
	50,  // 45: HistoryEvent.marker_recorded_event_attributes:type_name -> MarkerRecordedEventAttributes
	51,  // 46: HistoryEvent.workflow_execution_signaled_event_attributes:type_name -> WorkflowExecutionSignaledEventAttributes
	52,  // 47: HistoryEvent.workflow_execution_terminated_event_attributes:type_name -> WorkflowExecutionTerminatedEventAttributes
	48,  // 48: HistoryEvent.workflow_execution_cancel_requested_event_attributes:type_name -> WorkflowExecutionCancelRequestedEventAttributes
	49,  // 49: HistoryEvent.workflow_execution_canceled_event_attributes:type_name -> WorkflowExecutionCanceledEventAttributes
	53,  // 50: HistoryEvent.request_cancel_external_workflow_execution_initiated_event_attributes:type_name -> RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	54,  // 51: HistoryEvent.request_cancel_external_workflow_execution_failed_event_attributes:type_name -> RequestCancelExternalWorkflowExecutionFailedEventAttributes
	55,  // 52: HistoryEvent.external_workflow_execution_cancel_requested_event_attributes:type_name -> ExternalWorkflowExecutionCancelRequestedEventAttributes
	32,  // 53: HistoryEvent.workflow_execution_continued_as_new_event_attributes:type_name -> WorkflowExecutionContinuedAsNewEventAttributes
	60,  // 54: HistoryEvent.start_child_workflow_execution_initiated_event_attributes:type_name -> StartChildWorkflowExecutionInitiatedEventAttributes
	61,  // 55: HistoryEvent.start_child_workflow_execution_failed_event_attributes:type_name -> StartChildWorkflowExecutionFailedEventAttributes
	62,  // 56: HistoryEvent.child_workflow_execution_started_event_attributes:type_name -> ChildWorkflowExecutionStartedEventAttributes
	63,  // 57: HistoryEvent.child_workflow_execution_completed_event_attributes:type_name -> ChildWorkflowExecutionCompletedEventAttributes
	64,  // 58: HistoryEvent.child_workflow_execution_failed_event_attributes:type_name -> ChildWorkflowExecutionFailedEventAttributes
	65,  // 59: HistoryEvent.child_workflow_execution_canceled_event_attributes:type_name -> ChildWorkflowExecutionCanceledEventAttributes
	66,  // 60: HistoryEvent.child_workflow_execution_timed_out_event_attributes:type_name -> ChildWorkflowExecutionTimedOutEventAttributes
	67,  // 61: HistoryEvent.child_workflow_execution_terminated_event_attributes:type_name -> ChildWorkflowExecutionTerminatedEventAttributes
	56,  // 62: HistoryEvent.signal_external_workflow_execution_initiated_event_attributes:type_name -> SignalExternalWorkflowExecutionInitiatedEventAttributes
	57,  // 63: HistoryEvent.signal_external_workflow_execution_failed_event_attributes:type_name -> SignalExternalWorkflowExecutionFailedEventAttributes
	58,  // 64: HistoryEvent.external_workflow_execution_signaled_event_attributes:type_name -> ExternalWorkflowExecutionSignaledEventAttributes
	59,  // 65: HistoryEvent.upsert_workflow_search_attributes_event_attributes:type_name -> UpsertWorkflowSearchAttributesEventAttributes
	69,  // 66: WorkflowExecutionStartedEventAttributes.workflow_type:type_name -> WorkflowType
	68,  // 67: WorkflowExecutionStartedEventAttributes.parent_workflow_execution:type_name -> WorkflowExecution
	86,  // 68: WorkflowExecutionStartedEventAttributes.task_list:type_name -> TaskList
	70,  // 69: WorkflowExecutionStartedEventAttributes.input:type_name -> Payloads
	142, // 70: WorkflowExecutionStartedEventAttributes.workflow_execution_timeout:type_name -> google.protobuf.Duration
	142, // 71: WorkflowExecutionStartedEventAttributes.workflow_run_timeout:type_name -> google.protobuf.Duration
	142, // 72: WorkflowExecutionStartedEventAttributes.decision_task_timeout:type_name -> google.protobuf.Duration
	13,  // 73: WorkflowExecutionStartedEventAttributes.initiator:type_name -> ContinueAsNewInitiator
	80,  // 74: WorkflowExecutionStartedEventAttributes.continued_failure:type_name -> Failure
	70,  // 75: WorkflowExecutionStartedEventAttributes.last_completion_result:type_name -> Payloads
	85,  // 76: WorkflowExecutionStartedEventAttributes.retry_policy:type_name -> RetryPolicy
	141, // 77: WorkflowExecutionStartedEventAttributes.workflow_execution_expiration_time:type_name -> google.protobuf.Timestamp
	142, // 78: WorkflowExecutionStartedEventAttributes.first_decision_task_backoff:type_name -> google.protobuf.Duration
	83,  // 79: WorkflowExecutionStartedEventAttributes.memo:type_name -> Memo
	82,  // 80: WorkflowExecutionStartedEventAttributes.search_attributes:type_name -> SearchAttributes
	93,  // 81: WorkflowExecutionStartedEventAttributes.prev_auto_reset_points:type_name -> ResetPoints
	84,  // 82: WorkflowExecutionStartedEventAttributes.header:type_name -> Header
	70,  // 83: WorkflowExecutionCompletedEventAttributes.result:type_name -> Payloads
	80,  // 84: WorkflowExecutionFailedEventAttributes.failure:type_name -> Failure
	3,   // 85: WorkflowExecutionFailedEventAttributes.retry_state:type_name -> RetryState
	3,   // 86: WorkflowExecutionTimedOutEventAttributes.retry_state:type_name -> RetryState
	69,  // 87: WorkflowExecutionContinuedAsNewEventAttributes.workflow_type:type_name -> WorkflowType
	86,  // 88: WorkflowExecutionContinuedAsNewEventAttributes.task_list:type_name -> TaskList
	70,  // 89: WorkflowExecutionContinuedAsNewEventAttributes.input:type_name -> Payloads
	142, // 90: WorkflowExecutionContinuedAsNewEventAttributes.workflow_run_timeout:type_name -> google.protobuf.Duration
	142, // 91: WorkflowExecutionContinuedAsNewEventAttributes.decision_task_timeout:type_name -> google.protobuf.Duration
	142, // 92: WorkflowExecutionContinuedAsNewEventAttributes.backoff_start_interval:type_name -> google.protobuf.Duration
	13,  // 93: WorkflowExecutionContinuedAsNewEventAttributes.initiator:type_name -> ContinueAsNewInitiator
	80,  // 94: WorkflowExecutionContinuedAsNewEventAttributes.failure:type_name -> Failure
	70,  // 95: WorkflowExecutionContinuedAsNewEventAttributes.last_completion_result:type_name -> Payloads
	84,  // 96: WorkflowExecutionContinuedAsNewEventAttributes.header:type_name -> Header
	83,  // 97: WorkflowExecutionContinuedAsNewEventAttributes.memo:type_name -> Memo
	82,  // 98: WorkflowExecutionContinuedAsNewEventAttributes.search_attributes:type_name -> SearchAttributes
	86,  // 99: DecisionTaskScheduledEventAttributes.task_list:type_name -> TaskList
	142, // 100: DecisionTaskScheduledEventAttributes.start_to_close_timeout:type_name -> google.protobuf.Duration
	4,   // 101: DecisionTaskTimedOutEventAttributes.timeout_type:type_name -> TimeoutType
	12,  // 102: DecisionTaskFailedEventAttributes.cause:type_name -> DecisionTaskFailedCause
	80,  // 103: DecisionTaskFailedEventAttributes.failure:type_name -> Failure
	81,  // 104: ActivityTaskScheduledEventAttributes.activity_type:type_name -> ActivityType
	86,  // 105: ActivityTaskScheduledEventAttributes.task_list:type_name -> TaskList
	84,  // 106: ActivityTaskScheduledEventAttributes.header:type_name -> Header
	70,  // 107: ActivityTaskScheduledEventAttributes.input:type_name -> Payloads
	142, // 108: ActivityTaskScheduledEventAttributes.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	142, // 109: ActivityTaskScheduledEventAttributes.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	142, // 110: ActivityTaskScheduledEventAttributes.start_to_close_timeout:type_name -> google.protobuf.Duration
	142, // 111: ActivityTaskScheduledEventAttributes.heartbeat_timeout:type_name -> google.protobuf.Duration
	85,  // 112: ActivityTaskScheduledEventAttributes.retry_policy:type_name -> RetryPolicy
	80,  // 113: ActivityTaskStartedEventAttributes.last_failure:type_name -> Failure
	70,  // 114: ActivityTaskCompletedEventAttributes.result:type_name -> Payloads
	80,  // 115: ActivityTaskFailedEventAttributes.failure:type_name -> Failure
	3,   // 116: ActivityTaskFailedEventAttributes.retry_state:type_name -> RetryState
	80,  // 117: ActivityTaskTimedOutEventAttributes.failure:type_name -> Failure
	3,   // 118: ActivityTaskTimedOutEventAttributes.retry_state:type_name -> RetryState
	70,  // 119: ActivityTaskCanceledEventAttributes.details:type_name -> Payloads
	142, // 120: TimerStartedEventAttributes.start_to_fire_timeout:type_name -> google.protobuf.Duration
	68,  // 121: WorkflowExecutionCancelRequestedEventAttributes.external_workflow_execution:type_name -> WorkflowExecution
	70,  // 122: WorkflowExecutionCanceledEventAttributes.details:type_name -> Payloads
	128, // 123: MarkerRecordedEventAttributes.details:type_name -> MarkerRecordedEventAttributes.DetailsEntry
	84,  // 124: MarkerRecordedEventAttributes.header:type_name -> Header
	80,  // 125: MarkerRecordedEventAttributes.failure:type_name -> Failure
	70,  // 126: WorkflowExecutionSignaledEventAttributes.input:type_name -> Payloads
	70,  // 127: WorkflowExecutionTerminatedEventAttributes.details:type_name -> Payloads
	68,  // 128: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	6,   // 129: RequestCancelExternalWorkflowExecutionFailedEventAttributes.cause:type_name -> CancelExternalWorkflowExecutionFailedCause
	68,  // 130: RequestCancelExternalWorkflowExecutionFailedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	68,  // 131: ExternalWorkflowExecutionCancelRequestedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	68,  // 132: SignalExternalWorkflowExecutionInitiatedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	70,  // 133: SignalExternalWorkflowExecutionInitiatedEventAttributes.input:type_name -> Payloads
	7,   // 134: SignalExternalWorkflowExecutionFailedEventAttributes.cause:type_name -> SignalExternalWorkflowExecutionFailedCause
	68,  // 135: SignalExternalWorkflowExecutionFailedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	68,  // 136: ExternalWorkflowExecutionSignaledEventAttributes.workflow_execution:type_name -> WorkflowExecution
	82,  // 137: UpsertWorkflowSearchAttributesEventAttributes.search_attributes:type_name -> SearchAttributes
	69,  // 138: StartChildWorkflowExecutionInitiatedEventAttributes.workflow_type:type_name -> WorkflowType
	86,  // 139: StartChildWorkflowExecutionInitiatedEventAttributes.task_list:type_name -> TaskList
	70,  // 140: StartChildWorkflowExecutionInitiatedEventAttributes.input:type_name -> Payloads
	142, // 141: StartChildWorkflowExecutionInitiatedEventAttributes.workflow_execution_timeout:type_name -> google.protobuf.Duration
	142, // 142: StartChildWorkflowExecutionInitiatedEventAttributes.workflow_run_timeout:type_name -> google.protobuf.Duration
	142, // 143: StartChildWorkflowExecutionInitiatedEventAttributes.decision_task_timeout:type_name -> google.protobuf.Duration
	9,   // 144: StartChildWorkflowExecutionInitiatedEventAttributes.parent_close_policy:type_name -> ParentClosePolicy
	8,   // 145: StartChildWorkflowExecutionInitiatedEventAttributes.workflow_id_reuse_policy:type_name -> WorkflowIdReusePolicy
	85,  // 146: StartChildWorkflowExecutionInitiatedEventAttributes.retry_policy:type_name -> RetryPolicy
	84,  // 147: StartChildWorkflowExecutionInitiatedEventAttributes.header:type_name -> Header
	83,  // 148: StartChildWorkflowExecutionInitiatedEventAttributes.memo:type_name -> Memo
	82,  // 149: StartChildWorkflowExecutionInitiatedEventAttributes.search_attributes:type_name -> SearchAttributes
	69,  // 150: StartChildWorkflowExecutionFailedEventAttributes.workflow_type:type_name -> WorkflowType
	5,   // 151: StartChildWorkflowExecutionFailedEventAttributes.cause:type_name -> StartChildWorkflowExecutionFailedCause
	68,  // 152: ChildWorkflowExecutionStartedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	69,  // 153: ChildWorkflowExecutionStartedEventAttributes.workflow_type:type_name -> WorkflowType
	84,  // 154: ChildWorkflowExecutionStartedEventAttributes.header:type_name -> Header
	70,  // 155: ChildWorkflowExecutionCompletedEventAttributes.result:type_name -> Payloads
	68,  // 156: ChildWorkflowExecutionCompletedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	69,  // 157: ChildWorkflowExecutionCompletedEventAttributes.workflow_type:type_name -> WorkflowType
	80,  // 158: ChildWorkflowExecutionFailedEventAttributes.failure:type_name -> Failure
	68,  // 159: ChildWorkflowExecutionFailedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	69,  // 160: ChildWorkflowExecutionFailedEventAttributes.workflow_type:type_name -> WorkflowType
	3,   // 161: ChildWorkflowExecutionFailedEventAttributes.retry_state:type_name -> RetryState
	70,  // 162: ChildWorkflowExecutionCanceledEventAttributes.details:type_name -> Payloads
	68,  // 163: ChildWorkflowExecutionCanceledEventAttributes.workflow_execution:type_name -> WorkflowExecution
	69,  // 164: ChildWorkflowExecutionCanceledEventAttributes.workflow_type:type_name -> WorkflowType
	68,  // 165: ChildWorkflowExecutionTimedOutEventAttributes.workflow_execution:type_name -> WorkflowExecution
	69,  // 166: ChildWorkflowExecutionTimedOutEventAttributes.workflow_type:type_name -> WorkflowType
	3,   // 167: ChildWorkflowExecutionTimedOutEventAttributes.retry_state:type_name -> RetryState
	68,  // 168: ChildWorkflowExecutionTerminatedEventAttributes.workflow_execution:type_name -> WorkflowExecution
	69,  // 169: ChildWorkflowExecutionTerminatedEventAttributes.workflow_type:type_name -> WorkflowType
	71,  // 170: Payloads.payloads:type_name -> Payload
	129, // 171: Payload.metadata:type_name -> Payload.MetadataEntry
	70,  // 172: ApplicationFailureInfo.details:type_name -> Payloads
	4,   // 173: TimeoutFailureInfo.timeout_type:type_name -> TimeoutType
	70,  // 174: TimeoutFailureInfo.last_heartbeat_details:type_name -> Payloads
	70,  // 175: CanceledFailureInfo.details:type_name -> Payloads
	70,  // 176: ResetWorkflowFailureInfo.last_heartbeat_details:type_name -> Payloads
	81,  // 177: ActivityFailureInfo.activity_type:type_name -> ActivityType
	3,   // 178: ActivityFailureInfo.retry_state:type_name -> RetryState
	68,  // 179: ChildWorkflowExecutionFailureInfo.workflow_execution:type_name -> WorkflowExecution
	69,  // 180: ChildWorkflowExecutionFailureInfo.workflow_type:type_name -> WorkflowType
	3,   // 181: ChildWorkflowExecutionFailureInfo.retry_state:type_name -> RetryState
	80,  // 182: Failure.cause:type_name -> Failure
	72,  // 183: Failure.application_failure_info:type_name -> ApplicationFailureInfo
	73,  // 184: Failure.timeout_failure_info:type_name -> TimeoutFailureInfo
	74,  // 185: Failure.canceled_failure_info:type_name -> CanceledFailureInfo
	75,  // 186: Failure.terminated_failure_info:type_name -> TerminatedFailureInfo
	76,  // 187: Failure.server_failure_info:type_name -> ServerFailureInfo
	77,  // 188: Failure.reset_workflow_failure_info:type_name -> ResetWorkflowFailureInfo
	78,  // 189: Failure.activity_failure_info:type_name -> ActivityFailureInfo
	79,  // 190: Failure.child_workflow_execution_failure_info:type_name -> ChildWorkflowExecutionFailureInfo
	130, // 191: SearchAttributes.indexed_fields:type_name -> SearchAttributes.IndexedFieldsEntry
	131, // 192: Memo.fields:type_name -> Memo.FieldsEntry
	132, // 193: Header.fields:type_name -> Header.FieldsEntry
	142, // 194: RetryPolicy.initial_interval:type_name -> google.protobuf.Duration
	142, // 195: RetryPolicy.maximum_interval:type_name -> google.protobuf.Duration
	10,  // 196: TaskList.kind:type_name -> TaskListKind
	143, // 197: TaskListMetadata.max_tasks_per_second:type_name -> google.protobuf.DoubleValue
	89,  // 198: TaskListStatus.task_id_block:type_name -> TaskIdBlock
	141, // 199: PollerInfo.last_access_time:type_name -> google.protobuf.Timestamp
	86,  // 200: StickyExecutionAttributes.worker_task_list:type_name -> TaskList
	142, // 201: StickyExecutionAttributes.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	94,  // 202: ResetPoints.points:type_name -> ResetPointInfo
	141, // 203: ResetPointInfo.create_time:type_name -> google.protobuf.Timestamp
	141, // 204: ResetPointInfo.expire_time:type_name -> google.protobuf.Timestamp
	27,  // 205: ChildExecutionInfo.initiated_event:type_name -> HistoryEvent
	27,  // 206: ChildExecutionInfo.started_event:type_name -> HistoryEvent
	9,   // 207: ChildExecutionInfo.parent_close_policy:type_name -> ParentClosePolicy
	96,  // 208: WorkflowExecutionState.state:type_name -> WorkflowExecutionState
	14,  // 209: WorkflowExecutionState.status:type_name -> WorkflowExecutionStatus
	27,  // 210: WorkflowExecutionInfo.completion_event:type_name -> HistoryEvent
	142, // 211: WorkflowExecutionInfo.workflow_execution_timeout:type_name -> google.protobuf.Duration
	142, // 212: WorkflowExecutionInfo.workflow_run_timeout:type_name -> google.protobuf.Duration
	142, // 213: WorkflowExecutionInfo.default_decision_task_timeout:type_name -> google.protobuf.Duration
	98,  // 214: WorkflowExecutionInfo.replication_data:type_name -> ReplicationData
	141, // 215: WorkflowExecutionInfo.start_time:type_name -> google.protobuf.Timestamp
	141, // 216: WorkflowExecutionInfo.last_update_time:type_name -> google.protobuf.Timestamp
	142, // 217: WorkflowExecutionInfo.decision_task_timeout:type_name -> google.protobuf.Duration
	141, // 218: WorkflowExecutionInfo.decision_task_started_time:type_name -> google.protobuf.Timestamp
	141, // 219: WorkflowExecutionInfo.decision_task_scheduled_time:type_name -> google.protobuf.Timestamp
	141, // 220: WorkflowExecutionInfo.decision_task_original_scheduled_time:type_name -> google.protobuf.Timestamp
	142, // 221: WorkflowExecutionInfo.sticky_schedule_to_start_timeout:type_name -> google.protobuf.Duration
	142, // 222: WorkflowExecutionInfo.retry_initial_interval:type_name -> google.protobuf.Duration
	142, // 223: WorkflowExecutionInfo.retry_maximum_interval:type_name -> google.protobuf.Duration
	141, // 224: WorkflowExecutionInfo.retry_expiration_time:type_name -> google.protobuf.Timestamp
	93,  // 225: WorkflowExecutionInfo.auto_reset_points:type_name -> ResetPoints
	133, // 226: WorkflowExecutionInfo.search_attributes:type_name -> WorkflowExecutionInfo.SearchAttributesEntry
	134, // 227: WorkflowExecutionInfo.memo:type_name -> WorkflowExecutionInfo.MemoEntry
	101, // 228: WorkflowExecutionInfo.version_histories:type_name -> VersionHistories
	135, // 229: ReplicationData.last_replication_info:type_name -> ReplicationData.LastReplicationInfoEntry
	102, // 230: VersionHistory.items:type_name -> VersionHistoryItem
	100, // 231: VersionHistories.histories:type_name -> VersionHistory
	104, // 232: HistoryTreeInfo.branch_info:type_name -> HistoryBranch
	141, // 233: HistoryTreeInfo.fork_time:type_name -> google.protobuf.Timestamp
	105, // 234: HistoryBranch.ancestors:type_name -> HistoryBranchRange
	15,  // 235: ReplicationTask.task_type:type_name -> ReplicationTaskType
	107, // 236: ReplicationTask.domain_task_attributes:type_name -> DomainTaskAttributes
	108, // 237: ReplicationTask.history_task_attributes:type_name -> HistoryTaskAttributes
	110, // 238: ReplicationTask.sync_shard_status_task_attributes:type_name -> SyncShardStatusTaskAttributes
	111, // 239: ReplicationTask.sync_activity_task_attributes:type_name -> SyncActivityTaskAttributes
	112, // 240: ReplicationTask.history_metadata_task_attributes:type_name -> HistoryMetadataTaskAttributes
	113, // 241: ReplicationTask.history_task_v2_attributes:type_name -> HistoryTaskV2Attributes
	16,  // 242: DomainTaskAttributes.domain_operation:type_name -> DomainOperation
	21,  // 243: DomainTaskAttributes.info:type_name -> DomainInfo
	23,  // 244: DomainTaskAttributes.config:type_name -> DomainConfig
	22,  // 245: DomainTaskAttributes.replication_config:type_name -> DomainReplicationConfig
	109, // 246: HistoryTaskAttributes.history:type_name -> History
	109, // 247: HistoryTaskAttributes.new_run_history:type_name -> History
	27,  // 248: History.events:type_name -> HistoryEvent
	141, // 249: SyncShardStatusTaskAttributes.status_time:type_name -> google.protobuf.Timestamp
	141, // 250: SyncActivityTaskAttributes.scheduled_time:type_name -> google.protobuf.Timestamp
	141, // 251: SyncActivityTaskAttributes.started_time:type_name -> google.protobuf.Timestamp
	141, // 252: SyncActivityTaskAttributes.last_heartbeat_time:type_name -> google.protobuf.Timestamp
	70,  // 253: SyncActivityTaskAttributes.details:type_name -> Payloads
	80,  // 254: SyncActivityTaskAttributes.last_failure:type_name -> Failure
	100, // 255: SyncActivityTaskAttributes.version_history:type_name -> VersionHistory
	102, // 256: HistoryTaskV2Attributes.version_history_items:type_name -> VersionHistoryItem
	114, // 257: HistoryTaskV2Attributes.events:type_name -> DataBlob
	114, // 258: HistoryTaskV2Attributes.new_run_events:type_name -> DataBlob
	17,  // 259: DataBlob.encoding_type:type_name -> EncodingType
	136, // 260: QueueMetadataInfo.clusterAckLevels:type_name -> QueueMetadataInfo.ClusterAckLevelsEntry
	18,  // 261: ReplicationTaskInfo.task_type:type_name -> TaskType
	141, // 262: ShardInfo.update_time:type_name -> google.protobuf.Timestamp
	141, // 263: ShardInfo.timer_ack_level_time:type_name -> google.protobuf.Timestamp
	137, // 264: ShardInfo.cluster_transfer_ack_level:type_name -> ShardInfo.ClusterTransferAckLevelEntry
	138, // 265: ShardInfo.cluster_timer_ack_level:type_name -> ShardInfo.ClusterTimerAckLevelEntry
	139, // 266: ShardInfo.cluster_replication_level:type_name -> ShardInfo.ClusterReplicationLevelEntry
	140, // 267: ShardInfo.replication_dlq_ack_level:type_name -> ShardInfo.ReplicationDlqAckLevelEntry
	70,  // 268: SignalInfo.input:type_name -> Payloads
	11,  // 269: TaskListInfo.task_type:type_name -> TaskListType
	10,  // 270: TaskListInfo.kind:type_name -> TaskListKind
	141, // 271: TaskListInfo.expiry_time:type_name -> google.protobuf.Timestamp
	141, // 272: TaskListInfo.last_update_time:type_name -> google.protobuf.Timestamp
	141, // 273: TaskInfo.create_time:type_name -> google.protobuf.Timestamp
	141, // 274: TaskInfo.expiry_time:type_name -> google.protobuf.Timestamp
	121, // 275: AllocatedTaskInfo.data:type_name -> TaskInfo
	141, // 276: TimerInfo.expiry_time:type_name -> google.protobuf.Timestamp
	18,  // 277: TimerTaskInfo.task_type:type_name -> TaskType
	4,   // 278: TimerTaskInfo.timeout_type:type_name -> TimeoutType
	19,  // 279: TimerTaskInfo.workflow_backoff_type:type_name -> WorkflowBackoffType
	141, // 280: TimerTaskInfo.task_timestamp:type_name -> google.protobuf.Timestamp
	18,  // 281: TransferTaskInfo.task_type:type_name -> TaskType
	141, // 282: TransferTaskInfo.task_timestamp:type_name -> google.protobuf.Timestamp
	25,  // 283: BadBinaries.BinariesEntry.value:type_name -> BadBinaryInfo
	70,  // 284: MarkerRecordedEventAttributes.DetailsEntry.value:type_name -> Payloads
	71,  // 285: SearchAttributes.IndexedFieldsEntry.value:type_name -> Payload
	71,  // 286: Memo.FieldsEntry.value:type_name -> Payload
	71,  // 287: Header.FieldsEntry.value:type_name -> Payload
	71,  // 288: WorkflowExecutionInfo.SearchAttributesEntry.value:type_name -> Payload
	71,  // 289: WorkflowExecutionInfo.MemoEntry.value:type_name -> Payload
	99,  // 290: ReplicationData.LastReplicationInfoEntry.value:type_name -> ReplicationInfo
	141, // 291: ShardInfo.ClusterTimerAckLevelEntry.value:type_name -> google.protobuf.Timestamp
	292, // [292:292] is the sub-list for method output_type
	292, // [292:292] is the sub-list for method input_type
	292, // [292:292] is the sub-list for extension type_name
	292, // [292:292] is the sub-list for extension extendee
	0,   // [0:292] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_gogo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainReplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadBinaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadBinaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionStartedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionCompletedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionTimedOutEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionContinuedAsNewEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTaskScheduledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTaskStartedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTaskCompletedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTaskTimedOutEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTaskFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskScheduledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskStartedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskCompletedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskTimedOutEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskCancelRequestedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTaskCanceledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerStartedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerFiredEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerCanceledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionCancelRequestedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionCanceledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkerRecordedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionSignaledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionTerminatedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelExternalWorkflowExecutionFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkflowExecutionCancelRequestedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalExternalWorkflowExecutionInitiatedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalExternalWorkflowExecutionFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkflowExecutionSignaledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertWorkflowSearchAttributesEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChildWorkflowExecutionInitiatedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChildWorkflowExecutionFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionStartedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionCompletedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionFailedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionCanceledEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionTimedOutEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionTerminatedEventAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanceledFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminatedFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetWorkflowFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildWorkflowExecutionFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListPartitionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickyExecutionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildExecutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionHistories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryBranchRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTaskAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryTaskAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncShardStatusTaskAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncActivityTaskAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryMetadataTaskAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryTaskV2Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMetadataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocatedTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HistoryEvent_WorkflowExecutionStartedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCompletedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskScheduledEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskStartedEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskCompletedEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskTimedOutEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskScheduledEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskStartedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCompletedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskTimedOutEventAttributes)(nil),
		(*HistoryEvent_TimerStartedEventAttributes)(nil),
		(*HistoryEvent_TimerFiredEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCanceledEventAttributes)(nil),
		(*HistoryEvent_TimerCanceledEventAttributes)(nil),
		(*HistoryEvent_MarkerRecordedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionSignaledEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCanceledEventAttributes)(nil),
		(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes)(nil),
		(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes)(nil),
		(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes)(nil),
		(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes)(nil),
	}
	file_message_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*Failure_ApplicationFailureInfo)(nil),
		(*Failure_TimeoutFailureInfo)(nil),
		(*Failure_CanceledFailureInfo)(nil),
		(*Failure_TerminatedFailureInfo)(nil),
		(*Failure_ServerFailureInfo)(nil),
		(*Failure_ResetWorkflowFailureInfo)(nil),
		(*Failure_ActivityFailureInfo)(nil),
		(*Failure_ChildWorkflowExecutionFailureInfo)(nil),
	}
	file_message_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*ReplicationTask_DomainTaskAttributes)(nil),
		(*ReplicationTask_HistoryTaskAttributes)(nil),
		(*ReplicationTask_SyncShardStatusTaskAttributes)(nil),
		(*ReplicationTask_SyncActivityTaskAttributes)(nil),
		(*ReplicationTask_HistoryMetadataTaskAttributes)(nil),
		(*ReplicationTask_HistoryTaskV2Attributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
