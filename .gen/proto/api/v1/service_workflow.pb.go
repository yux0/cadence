// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: uber/cadence/api/v1/service_workflow.proto

package apiv1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StartWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                       string                `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId                   string                `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType                 *WorkflowType         `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList                     *TaskList             `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                        *Payload              `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeout *durationpb.Duration  `protobuf:"bytes,6,opt,name=execution_start_to_close_timeout,json=executionStartToCloseTimeout,proto3" json:"execution_start_to_close_timeout,omitempty"`
	TaskStartToCloseTimeout      *durationpb.Duration  `protobuf:"bytes,7,opt,name=task_start_to_close_timeout,json=taskStartToCloseTimeout,proto3" json:"task_start_to_close_timeout,omitempty"`
	Identity                     string                `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId                    string                `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	WorkflowIdReusePolicy        WorkflowIdReusePolicy `protobuf:"varint,10,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=uber.cadence.api.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy                  *RetryPolicy          `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule                 string                `protobuf:"bytes,12,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Memo                         *Memo                 `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes             *SearchAttributes     `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	Header                       *Header               `protobuf:"bytes,15,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *StartWorkflowExecutionRequest) Reset() {
	*x = StartWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowExecutionRequest) ProtoMessage() {}

func (x *StartWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*StartWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *StartWorkflowExecutionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetExecutionStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionStartToCloseTimeout
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetTaskStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskStartToCloseTimeout
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetWorkflowIdReusePolicy() WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_INVALID
}

func (x *StartWorkflowExecutionRequest) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type StartWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *StartWorkflowExecutionResponse) Reset() {
	*x = StartWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowExecutionResponse) ProtoMessage() {}

func (x *StartWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*StartWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *StartWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type SignalWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Identity          string             `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId         string             `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SignalName        string             `protobuf:"bytes,5,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	SignalInput       *Payload           `protobuf:"bytes,6,opt,name=signal_input,json=signalInput,proto3" json:"signal_input,omitempty"`
	Control           []byte             `protobuf:"bytes,7,opt,name=control,proto3" json:"control,omitempty"`
}

func (x *SignalWorkflowExecutionRequest) Reset() {
	*x = SignalWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowExecutionRequest) ProtoMessage() {}

func (x *SignalWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*SignalWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *SignalWorkflowExecutionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *SignalWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetSignalInput() *Payload {
	if x != nil {
		return x.SignalInput
	}
	return nil
}

func (x *SignalWorkflowExecutionRequest) GetControl() []byte {
	if x != nil {
		return x.Control
	}
	return nil
}

type SignalWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalWorkflowExecutionResponse) Reset() {
	*x = SignalWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowExecutionResponse) ProtoMessage() {}

func (x *SignalWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*SignalWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{3}
}

type SignalWithStartWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartRequest *StartWorkflowExecutionRequest `protobuf:"bytes,1,opt,name=start_request,json=startRequest,proto3" json:"start_request,omitempty"`
	SignalName   string                         `protobuf:"bytes,2,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	SignalInput  *Payload                       `protobuf:"bytes,3,opt,name=signal_input,json=signalInput,proto3" json:"signal_input,omitempty"`
	Control      []byte                         `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
}

func (x *SignalWithStartWorkflowExecutionRequest) Reset() {
	*x = SignalWithStartWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWithStartWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartWorkflowExecutionRequest) ProtoMessage() {}

func (x *SignalWithStartWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*SignalWithStartWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *SignalWithStartWorkflowExecutionRequest) GetStartRequest() *StartWorkflowExecutionRequest {
	if x != nil {
		return x.StartRequest
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetSignalInput() *Payload {
	if x != nil {
		return x.SignalInput
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetControl() []byte {
	if x != nil {
		return x.Control
	}
	return nil
}

type SignalWithStartWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *SignalWithStartWorkflowExecutionResponse) Reset() {
	*x = SignalWithStartWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWithStartWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartWorkflowExecutionResponse) ProtoMessage() {}

func (x *SignalWithStartWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*SignalWithStartWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *SignalWithStartWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ResetWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution     *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Reason                string             `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	DecisionFinishEventId int64              `protobuf:"varint,4,opt,name=decision_finish_event_id,json=decisionFinishEventId,proto3" json:"decision_finish_event_id,omitempty"`
	RequestId             string             `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ResetWorkflowExecutionRequest) Reset() {
	*x = ResetWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetWorkflowExecutionRequest) ProtoMessage() {}

func (x *ResetWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*ResetWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *ResetWorkflowExecutionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ResetWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ResetWorkflowExecutionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResetWorkflowExecutionRequest) GetDecisionFinishEventId() int64 {
	if x != nil {
		return x.DecisionFinishEventId
	}
	return 0
}

func (x *ResetWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ResetWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *ResetWorkflowExecutionResponse) Reset() {
	*x = ResetWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetWorkflowExecutionResponse) ProtoMessage() {}

func (x *ResetWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*ResetWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *ResetWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type TerminateWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Reason            string             `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Details           *Payload           `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity          string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *TerminateWorkflowExecutionRequest) Reset() {
	*x = TerminateWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateWorkflowExecutionRequest) ProtoMessage() {}

func (x *TerminateWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*TerminateWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *TerminateWorkflowExecutionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TerminateWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *TerminateWorkflowExecutionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TerminateWorkflowExecutionRequest) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TerminateWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type TerminateWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateWorkflowExecutionResponse) Reset() {
	*x = TerminateWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateWorkflowExecutionResponse) ProtoMessage() {}

func (x *TerminateWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*TerminateWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{9}
}

type DescribeWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *DescribeWorkflowExecutionRequest) Reset() {
	*x = DescribeWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowExecutionRequest) ProtoMessage() {}

func (x *DescribeWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeWorkflowExecutionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DescribeWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type DescribeWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionConfiguration *WorkflowExecutionConfiguration `protobuf:"bytes,1,opt,name=execution_configuration,json=executionConfiguration,proto3" json:"execution_configuration,omitempty"`
	WorkflowExecutionInfo  *WorkflowExecutionInfo          `protobuf:"bytes,2,opt,name=workflow_execution_info,json=workflowExecutionInfo,proto3" json:"workflow_execution_info,omitempty"`
	PendingActivities      []*PendingActivityInfo          `protobuf:"bytes,3,rep,name=pending_activities,json=pendingActivities,proto3" json:"pending_activities,omitempty"`
	PendingChildren        []*PendingChildExecutionInfo    `protobuf:"bytes,4,rep,name=pending_children,json=pendingChildren,proto3" json:"pending_children,omitempty"`
	PendingDecision        *PendingDecisionInfo            `protobuf:"bytes,5,opt,name=pending_decision,json=pendingDecision,proto3" json:"pending_decision,omitempty"`
}

func (x *DescribeWorkflowExecutionResponse) Reset() {
	*x = DescribeWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowExecutionResponse) ProtoMessage() {}

func (x *DescribeWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeWorkflowExecutionResponse) GetExecutionConfiguration() *WorkflowExecutionConfiguration {
	if x != nil {
		return x.ExecutionConfiguration
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetWorkflowExecutionInfo() *WorkflowExecutionInfo {
	if x != nil {
		return x.WorkflowExecutionInfo
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetPendingActivities() []*PendingActivityInfo {
	if x != nil {
		return x.PendingActivities
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetPendingChildren() []*PendingChildExecutionInfo {
	if x != nil {
		return x.PendingChildren
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetPendingDecision() *PendingDecisionInfo {
	if x != nil {
		return x.PendingDecision
	}
	return nil
}

type QueryWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                string                `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution     *WorkflowExecution    `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Query                 *WorkflowQuery        `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	QueryRejectCondition  QueryRejectCondition  `protobuf:"varint,4,opt,name=query_reject_condition,json=queryRejectCondition,proto3,enum=uber.cadence.api.v1.QueryRejectCondition" json:"query_reject_condition,omitempty"`
	QueryConsistencyLevel QueryConsistencyLevel `protobuf:"varint,5,opt,name=query_consistency_level,json=queryConsistencyLevel,proto3,enum=uber.cadence.api.v1.QueryConsistencyLevel" json:"query_consistency_level,omitempty"`
}

func (x *QueryWorkflowRequest) Reset() {
	*x = QueryWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowRequest) ProtoMessage() {}

func (x *QueryWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowRequest.ProtoReflect.Descriptor instead.
func (*QueryWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *QueryWorkflowRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *QueryWorkflowRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *QueryWorkflowRequest) GetQuery() *WorkflowQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryWorkflowRequest) GetQueryRejectCondition() QueryRejectCondition {
	if x != nil {
		return x.QueryRejectCondition
	}
	return QueryRejectCondition_QUERY_REJECT_CONDITION_INVALID
}

func (x *QueryWorkflowRequest) GetQueryConsistencyLevel() QueryConsistencyLevel {
	if x != nil {
		return x.QueryConsistencyLevel
	}
	return QueryConsistencyLevel_QUERY_CONSISTENCY_LEVEL_INVALID
}

type QueryWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryResult   *Payload       `protobuf:"bytes,1,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
	QueryRejected *QueryRejected `protobuf:"bytes,2,opt,name=query_rejected,json=queryRejected,proto3" json:"query_rejected,omitempty"`
}

func (x *QueryWorkflowResponse) Reset() {
	*x = QueryWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowResponse) ProtoMessage() {}

func (x *QueryWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowResponse.ProtoReflect.Descriptor instead.
func (*QueryWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *QueryWorkflowResponse) GetQueryResult() *Payload {
	if x != nil {
		return x.QueryResult
	}
	return nil
}

func (x *QueryWorkflowResponse) GetQueryRejected() *QueryRejected {
	if x != nil {
		return x.QueryRejected
	}
	return nil
}

type DescribeTaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                string       `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList              *TaskList    `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	TaskListType          TaskListType `protobuf:"varint,3,opt,name=task_list_type,json=taskListType,proto3,enum=uber.cadence.api.v1.TaskListType" json:"task_list_type,omitempty"`
	IncludeTaskListStatus bool         `protobuf:"varint,4,opt,name=include_task_list_status,json=includeTaskListStatus,proto3" json:"include_task_list_status,omitempty"`
}

func (x *DescribeTaskListRequest) Reset() {
	*x = DescribeTaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTaskListRequest) ProtoMessage() {}

func (x *DescribeTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTaskListRequest.ProtoReflect.Descriptor instead.
func (*DescribeTaskListRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeTaskListRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DescribeTaskListRequest) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *DescribeTaskListRequest) GetTaskListType() TaskListType {
	if x != nil {
		return x.TaskListType
	}
	return TaskListType_TASK_LIST_TYPE_INVALID
}

func (x *DescribeTaskListRequest) GetIncludeTaskListStatus() bool {
	if x != nil {
		return x.IncludeTaskListStatus
	}
	return false
}

type DescribeTaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pollers        []*PollerInfo   `protobuf:"bytes,1,rep,name=pollers,proto3" json:"pollers,omitempty"`
	TaskListStatus *TaskListStatus `protobuf:"bytes,2,opt,name=task_list_status,json=taskListStatus,proto3" json:"task_list_status,omitempty"`
}

func (x *DescribeTaskListResponse) Reset() {
	*x = DescribeTaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTaskListResponse) ProtoMessage() {}

func (x *DescribeTaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTaskListResponse.ProtoReflect.Descriptor instead.
func (*DescribeTaskListResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeTaskListResponse) GetPollers() []*PollerInfo {
	if x != nil {
		return x.Pollers
	}
	return nil
}

func (x *DescribeTaskListResponse) GetTaskListStatus() *TaskListStatus {
	if x != nil {
		return x.TaskListStatus
	}
	return nil
}

type ListTaskListPartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain   string    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList *TaskList `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *ListTaskListPartitionsRequest) Reset() {
	*x = ListTaskListPartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskListPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskListPartitionsRequest) ProtoMessage() {}

func (x *ListTaskListPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskListPartitionsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskListPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *ListTaskListPartitionsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ListTaskListPartitionsRequest) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type ListTaskListPartitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityTaskListPartitions []*TaskListPartitionMetadata `protobuf:"bytes,1,rep,name=activity_task_list_partitions,json=activityTaskListPartitions,proto3" json:"activity_task_list_partitions,omitempty"`
	DecisionTaskListPartitions []*TaskListPartitionMetadata `protobuf:"bytes,2,rep,name=decision_task_list_partitions,json=decisionTaskListPartitions,proto3" json:"decision_task_list_partitions,omitempty"`
}

func (x *ListTaskListPartitionsResponse) Reset() {
	*x = ListTaskListPartitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskListPartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskListPartitionsResponse) ProtoMessage() {}

func (x *ListTaskListPartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskListPartitionsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskListPartitionsResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *ListTaskListPartitionsResponse) GetActivityTaskListPartitions() []*TaskListPartitionMetadata {
	if x != nil {
		return x.ActivityTaskListPartitions
	}
	return nil
}

func (x *ListTaskListPartitionsResponse) GetDecisionTaskListPartitions() []*TaskListPartitionMetadata {
	if x != nil {
		return x.DecisionTaskListPartitions
	}
	return nil
}

type ResetStickyTaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *ResetStickyTaskListRequest) Reset() {
	*x = ResetStickyTaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStickyTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStickyTaskListRequest) ProtoMessage() {}

func (x *ResetStickyTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStickyTaskListRequest.ProtoReflect.Descriptor instead.
func (*ResetStickyTaskListRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *ResetStickyTaskListRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ResetStickyTaskListRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type ResetStickyTaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetStickyTaskListResponse) Reset() {
	*x = ResetStickyTaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStickyTaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStickyTaskListResponse) ProtoMessage() {}

func (x *ResetStickyTaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStickyTaskListResponse.ProtoReflect.Descriptor instead.
func (*ResetStickyTaskListResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{19}
}

type GetClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClusterInfoRequest) Reset() {
	*x = GetClusterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoRequest) ProtoMessage() {}

func (x *GetClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{20}
}

type GetClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedClientVersions *SupportedClientVersions `protobuf:"bytes,1,opt,name=supported_client_versions,json=supportedClientVersions,proto3" json:"supported_client_versions,omitempty"`
}

func (x *GetClusterInfoResponse) Reset() {
	*x = GetClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoResponse) ProtoMessage() {}

func (x *GetClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *GetClusterInfoResponse) GetSupportedClientVersions() *SupportedClientVersions {
	if x != nil {
		return x.SupportedClientVersions
	}
	return nil
}

type GetWorkflowExecutionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                 string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution      *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	PageSize               int32              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken          []byte             `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	WaitForNewEvent        bool               `protobuf:"varint,5,opt,name=wait_for_new_event,json=waitForNewEvent,proto3" json:"wait_for_new_event,omitempty"`
	HistoryEventFilterType EventFilterType    `protobuf:"varint,6,opt,name=history_event_filter_type,json=historyEventFilterType,proto3,enum=uber.cadence.api.v1.EventFilterType" json:"history_event_filter_type,omitempty"`
	SkipArchival           bool               `protobuf:"varint,7,opt,name=skip_archival,json=skipArchival,proto3" json:"skip_archival,omitempty"`
}

func (x *GetWorkflowExecutionHistoryRequest) Reset() {
	*x = GetWorkflowExecutionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowExecutionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionHistoryRequest) ProtoMessage() {}

func (x *GetWorkflowExecutionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *GetWorkflowExecutionHistoryRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetWorkflowExecutionHistoryRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWorkflowExecutionHistoryRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryRequest) GetWaitForNewEvent() bool {
	if x != nil {
		return x.WaitForNewEvent
	}
	return false
}

func (x *GetWorkflowExecutionHistoryRequest) GetHistoryEventFilterType() EventFilterType {
	if x != nil {
		return x.HistoryEventFilterType
	}
	return EventFilterType_EVENT_FILTER_TYPE_INVALID
}

func (x *GetWorkflowExecutionHistoryRequest) GetSkipArchival() bool {
	if x != nil {
		return x.SkipArchival
	}
	return false
}

type GetWorkflowExecutionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History       *History    `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	RawHistory    []*DataBlob `protobuf:"bytes,2,rep,name=raw_history,json=rawHistory,proto3" json:"raw_history,omitempty"`
	NextPageToken []byte      `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Archived      bool        `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *GetWorkflowExecutionHistoryResponse) Reset() {
	*x = GetWorkflowExecutionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowExecutionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionHistoryResponse) ProtoMessage() {}

func (x *GetWorkflowExecutionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_workflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *GetWorkflowExecutionHistoryResponse) GetHistory() *History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryResponse) GetRawHistory() []*DataBlob {
	if x != nil {
		return x.RawHistory
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryResponse) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

var File_uber_cadence_api_v1_service_workflow_proto protoreflect.FileDescriptor

var file_uber_cadence_api_v1_service_workflow_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x75, 0x62, 0x65,
	0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8e, 0x07, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x61, 0x0a, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x18, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x43,
	0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x37, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x1e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x27, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x41, 0x0a, 0x28, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x21, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x24, 0x0a, 0x22, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe,
	0x03, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x59, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x84, 0x03, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75,
	0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x5f, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x49, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xef, 0x01, 0x0a,
	0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x70,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75,
	0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x73, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a,
	0x1d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x71, 0x0a, 0x1d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8b,
	0x03, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65,
	0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x22, 0xe1, 0x01, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b,
	0x72, 0x61, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x0a, 0x72, 0x61, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x32, 0xb0, 0x0c, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x50, 0x49,
	0x12, 0x81, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x20,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75,
	0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x29, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x90, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x37, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x56, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x08,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x2e, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_uber_cadence_api_v1_service_workflow_proto_rawDescOnce sync.Once
	file_uber_cadence_api_v1_service_workflow_proto_rawDescData = file_uber_cadence_api_v1_service_workflow_proto_rawDesc
)

func file_uber_cadence_api_v1_service_workflow_proto_rawDescGZIP() []byte {
	file_uber_cadence_api_v1_service_workflow_proto_rawDescOnce.Do(func() {
		file_uber_cadence_api_v1_service_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_uber_cadence_api_v1_service_workflow_proto_rawDescData)
	})
	return file_uber_cadence_api_v1_service_workflow_proto_rawDescData
}

var file_uber_cadence_api_v1_service_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_uber_cadence_api_v1_service_workflow_proto_goTypes = []interface{}{
	(*StartWorkflowExecutionRequest)(nil),            // 0: uber.cadence.api.v1.StartWorkflowExecutionRequest
	(*StartWorkflowExecutionResponse)(nil),           // 1: uber.cadence.api.v1.StartWorkflowExecutionResponse
	(*SignalWorkflowExecutionRequest)(nil),           // 2: uber.cadence.api.v1.SignalWorkflowExecutionRequest
	(*SignalWorkflowExecutionResponse)(nil),          // 3: uber.cadence.api.v1.SignalWorkflowExecutionResponse
	(*SignalWithStartWorkflowExecutionRequest)(nil),  // 4: uber.cadence.api.v1.SignalWithStartWorkflowExecutionRequest
	(*SignalWithStartWorkflowExecutionResponse)(nil), // 5: uber.cadence.api.v1.SignalWithStartWorkflowExecutionResponse
	(*ResetWorkflowExecutionRequest)(nil),            // 6: uber.cadence.api.v1.ResetWorkflowExecutionRequest
	(*ResetWorkflowExecutionResponse)(nil),           // 7: uber.cadence.api.v1.ResetWorkflowExecutionResponse
	(*TerminateWorkflowExecutionRequest)(nil),        // 8: uber.cadence.api.v1.TerminateWorkflowExecutionRequest
	(*TerminateWorkflowExecutionResponse)(nil),       // 9: uber.cadence.api.v1.TerminateWorkflowExecutionResponse
	(*DescribeWorkflowExecutionRequest)(nil),         // 10: uber.cadence.api.v1.DescribeWorkflowExecutionRequest
	(*DescribeWorkflowExecutionResponse)(nil),        // 11: uber.cadence.api.v1.DescribeWorkflowExecutionResponse
	(*QueryWorkflowRequest)(nil),                     // 12: uber.cadence.api.v1.QueryWorkflowRequest
	(*QueryWorkflowResponse)(nil),                    // 13: uber.cadence.api.v1.QueryWorkflowResponse
	(*DescribeTaskListRequest)(nil),                  // 14: uber.cadence.api.v1.DescribeTaskListRequest
	(*DescribeTaskListResponse)(nil),                 // 15: uber.cadence.api.v1.DescribeTaskListResponse
	(*ListTaskListPartitionsRequest)(nil),            // 16: uber.cadence.api.v1.ListTaskListPartitionsRequest
	(*ListTaskListPartitionsResponse)(nil),           // 17: uber.cadence.api.v1.ListTaskListPartitionsResponse
	(*ResetStickyTaskListRequest)(nil),               // 18: uber.cadence.api.v1.ResetStickyTaskListRequest
	(*ResetStickyTaskListResponse)(nil),              // 19: uber.cadence.api.v1.ResetStickyTaskListResponse
	(*GetClusterInfoRequest)(nil),                    // 20: uber.cadence.api.v1.GetClusterInfoRequest
	(*GetClusterInfoResponse)(nil),                   // 21: uber.cadence.api.v1.GetClusterInfoResponse
	(*GetWorkflowExecutionHistoryRequest)(nil),       // 22: uber.cadence.api.v1.GetWorkflowExecutionHistoryRequest
	(*GetWorkflowExecutionHistoryResponse)(nil),      // 23: uber.cadence.api.v1.GetWorkflowExecutionHistoryResponse
	(*WorkflowType)(nil),                             // 24: uber.cadence.api.v1.WorkflowType
	(*TaskList)(nil),                                 // 25: uber.cadence.api.v1.TaskList
	(*Payload)(nil),                                  // 26: uber.cadence.api.v1.Payload
	(*durationpb.Duration)(nil),                      // 27: google.protobuf.Duration
	(WorkflowIdReusePolicy)(0),                       // 28: uber.cadence.api.v1.WorkflowIdReusePolicy
	(*RetryPolicy)(nil),                              // 29: uber.cadence.api.v1.RetryPolicy
	(*Memo)(nil),                                     // 30: uber.cadence.api.v1.Memo
	(*SearchAttributes)(nil),                         // 31: uber.cadence.api.v1.SearchAttributes
	(*Header)(nil),                                   // 32: uber.cadence.api.v1.Header
	(*WorkflowExecution)(nil),                        // 33: uber.cadence.api.v1.WorkflowExecution
	(*WorkflowExecutionConfiguration)(nil),           // 34: uber.cadence.api.v1.WorkflowExecutionConfiguration
	(*WorkflowExecutionInfo)(nil),                    // 35: uber.cadence.api.v1.WorkflowExecutionInfo
	(*PendingActivityInfo)(nil),                      // 36: uber.cadence.api.v1.PendingActivityInfo
	(*PendingChildExecutionInfo)(nil),                // 37: uber.cadence.api.v1.PendingChildExecutionInfo
	(*PendingDecisionInfo)(nil),                      // 38: uber.cadence.api.v1.PendingDecisionInfo
	(*WorkflowQuery)(nil),                            // 39: uber.cadence.api.v1.WorkflowQuery
	(QueryRejectCondition)(0),                        // 40: uber.cadence.api.v1.QueryRejectCondition
	(QueryConsistencyLevel)(0),                       // 41: uber.cadence.api.v1.QueryConsistencyLevel
	(*QueryRejected)(nil),                            // 42: uber.cadence.api.v1.QueryRejected
	(TaskListType)(0),                                // 43: uber.cadence.api.v1.TaskListType
	(*PollerInfo)(nil),                               // 44: uber.cadence.api.v1.PollerInfo
	(*TaskListStatus)(nil),                           // 45: uber.cadence.api.v1.TaskListStatus
	(*TaskListPartitionMetadata)(nil),                // 46: uber.cadence.api.v1.TaskListPartitionMetadata
	(*SupportedClientVersions)(nil),                  // 47: uber.cadence.api.v1.SupportedClientVersions
	(EventFilterType)(0),                             // 48: uber.cadence.api.v1.EventFilterType
	(*History)(nil),                                  // 49: uber.cadence.api.v1.History
	(*DataBlob)(nil),                                 // 50: uber.cadence.api.v1.DataBlob
}
var file_uber_cadence_api_v1_service_workflow_proto_depIdxs = []int32{
	24, // 0: uber.cadence.api.v1.StartWorkflowExecutionRequest.workflow_type:type_name -> uber.cadence.api.v1.WorkflowType
	25, // 1: uber.cadence.api.v1.StartWorkflowExecutionRequest.task_list:type_name -> uber.cadence.api.v1.TaskList
	26, // 2: uber.cadence.api.v1.StartWorkflowExecutionRequest.input:type_name -> uber.cadence.api.v1.Payload
	27, // 3: uber.cadence.api.v1.StartWorkflowExecutionRequest.execution_start_to_close_timeout:type_name -> google.protobuf.Duration
	27, // 4: uber.cadence.api.v1.StartWorkflowExecutionRequest.task_start_to_close_timeout:type_name -> google.protobuf.Duration
	28, // 5: uber.cadence.api.v1.StartWorkflowExecutionRequest.workflow_id_reuse_policy:type_name -> uber.cadence.api.v1.WorkflowIdReusePolicy
	29, // 6: uber.cadence.api.v1.StartWorkflowExecutionRequest.retry_policy:type_name -> uber.cadence.api.v1.RetryPolicy
	30, // 7: uber.cadence.api.v1.StartWorkflowExecutionRequest.memo:type_name -> uber.cadence.api.v1.Memo
	31, // 8: uber.cadence.api.v1.StartWorkflowExecutionRequest.search_attributes:type_name -> uber.cadence.api.v1.SearchAttributes
	32, // 9: uber.cadence.api.v1.StartWorkflowExecutionRequest.header:type_name -> uber.cadence.api.v1.Header
	33, // 10: uber.cadence.api.v1.SignalWorkflowExecutionRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	26, // 11: uber.cadence.api.v1.SignalWorkflowExecutionRequest.signal_input:type_name -> uber.cadence.api.v1.Payload
	0,  // 12: uber.cadence.api.v1.SignalWithStartWorkflowExecutionRequest.start_request:type_name -> uber.cadence.api.v1.StartWorkflowExecutionRequest
	26, // 13: uber.cadence.api.v1.SignalWithStartWorkflowExecutionRequest.signal_input:type_name -> uber.cadence.api.v1.Payload
	33, // 14: uber.cadence.api.v1.ResetWorkflowExecutionRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	33, // 15: uber.cadence.api.v1.TerminateWorkflowExecutionRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	26, // 16: uber.cadence.api.v1.TerminateWorkflowExecutionRequest.details:type_name -> uber.cadence.api.v1.Payload
	33, // 17: uber.cadence.api.v1.DescribeWorkflowExecutionRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	34, // 18: uber.cadence.api.v1.DescribeWorkflowExecutionResponse.execution_configuration:type_name -> uber.cadence.api.v1.WorkflowExecutionConfiguration
	35, // 19: uber.cadence.api.v1.DescribeWorkflowExecutionResponse.workflow_execution_info:type_name -> uber.cadence.api.v1.WorkflowExecutionInfo
	36, // 20: uber.cadence.api.v1.DescribeWorkflowExecutionResponse.pending_activities:type_name -> uber.cadence.api.v1.PendingActivityInfo
	37, // 21: uber.cadence.api.v1.DescribeWorkflowExecutionResponse.pending_children:type_name -> uber.cadence.api.v1.PendingChildExecutionInfo
	38, // 22: uber.cadence.api.v1.DescribeWorkflowExecutionResponse.pending_decision:type_name -> uber.cadence.api.v1.PendingDecisionInfo
	33, // 23: uber.cadence.api.v1.QueryWorkflowRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	39, // 24: uber.cadence.api.v1.QueryWorkflowRequest.query:type_name -> uber.cadence.api.v1.WorkflowQuery
	40, // 25: uber.cadence.api.v1.QueryWorkflowRequest.query_reject_condition:type_name -> uber.cadence.api.v1.QueryRejectCondition
	41, // 26: uber.cadence.api.v1.QueryWorkflowRequest.query_consistency_level:type_name -> uber.cadence.api.v1.QueryConsistencyLevel
	26, // 27: uber.cadence.api.v1.QueryWorkflowResponse.query_result:type_name -> uber.cadence.api.v1.Payload
	42, // 28: uber.cadence.api.v1.QueryWorkflowResponse.query_rejected:type_name -> uber.cadence.api.v1.QueryRejected
	25, // 29: uber.cadence.api.v1.DescribeTaskListRequest.task_list:type_name -> uber.cadence.api.v1.TaskList
	43, // 30: uber.cadence.api.v1.DescribeTaskListRequest.task_list_type:type_name -> uber.cadence.api.v1.TaskListType
	44, // 31: uber.cadence.api.v1.DescribeTaskListResponse.pollers:type_name -> uber.cadence.api.v1.PollerInfo
	45, // 32: uber.cadence.api.v1.DescribeTaskListResponse.task_list_status:type_name -> uber.cadence.api.v1.TaskListStatus
	25, // 33: uber.cadence.api.v1.ListTaskListPartitionsRequest.task_list:type_name -> uber.cadence.api.v1.TaskList
	46, // 34: uber.cadence.api.v1.ListTaskListPartitionsResponse.activity_task_list_partitions:type_name -> uber.cadence.api.v1.TaskListPartitionMetadata
	46, // 35: uber.cadence.api.v1.ListTaskListPartitionsResponse.decision_task_list_partitions:type_name -> uber.cadence.api.v1.TaskListPartitionMetadata
	33, // 36: uber.cadence.api.v1.ResetStickyTaskListRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	47, // 37: uber.cadence.api.v1.GetClusterInfoResponse.supported_client_versions:type_name -> uber.cadence.api.v1.SupportedClientVersions
	33, // 38: uber.cadence.api.v1.GetWorkflowExecutionHistoryRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	48, // 39: uber.cadence.api.v1.GetWorkflowExecutionHistoryRequest.history_event_filter_type:type_name -> uber.cadence.api.v1.EventFilterType
	49, // 40: uber.cadence.api.v1.GetWorkflowExecutionHistoryResponse.history:type_name -> uber.cadence.api.v1.History
	50, // 41: uber.cadence.api.v1.GetWorkflowExecutionHistoryResponse.raw_history:type_name -> uber.cadence.api.v1.DataBlob
	0,  // 42: uber.cadence.api.v1.WorkflowAPI.StartWorkflowExecution:input_type -> uber.cadence.api.v1.StartWorkflowExecutionRequest
	2,  // 43: uber.cadence.api.v1.WorkflowAPI.SignalWorkflowExecution:input_type -> uber.cadence.api.v1.SignalWorkflowExecutionRequest
	4,  // 44: uber.cadence.api.v1.WorkflowAPI.SignalWithStartWorkflowExecution:input_type -> uber.cadence.api.v1.SignalWithStartWorkflowExecutionRequest
	6,  // 45: uber.cadence.api.v1.WorkflowAPI.ResetWorkflowExecution:input_type -> uber.cadence.api.v1.ResetWorkflowExecutionRequest
	8,  // 46: uber.cadence.api.v1.WorkflowAPI.TerminateWorkflowExecution:input_type -> uber.cadence.api.v1.TerminateWorkflowExecutionRequest
	10, // 47: uber.cadence.api.v1.WorkflowAPI.DescribeWorkflowExecution:input_type -> uber.cadence.api.v1.DescribeWorkflowExecutionRequest
	12, // 48: uber.cadence.api.v1.WorkflowAPI.QueryWorkflow:input_type -> uber.cadence.api.v1.QueryWorkflowRequest
	14, // 49: uber.cadence.api.v1.WorkflowAPI.DescribeTaskList:input_type -> uber.cadence.api.v1.DescribeTaskListRequest
	16, // 50: uber.cadence.api.v1.WorkflowAPI.ListTaskListPartitions:input_type -> uber.cadence.api.v1.ListTaskListPartitionsRequest
	18, // 51: uber.cadence.api.v1.WorkflowAPI.ResetStickyTaskList:input_type -> uber.cadence.api.v1.ResetStickyTaskListRequest
	20, // 52: uber.cadence.api.v1.WorkflowAPI.GetClusterInfo:input_type -> uber.cadence.api.v1.GetClusterInfoRequest
	22, // 53: uber.cadence.api.v1.WorkflowAPI.GetWorkflowExecutionHistory:input_type -> uber.cadence.api.v1.GetWorkflowExecutionHistoryRequest
	1,  // 54: uber.cadence.api.v1.WorkflowAPI.StartWorkflowExecution:output_type -> uber.cadence.api.v1.StartWorkflowExecutionResponse
	3,  // 55: uber.cadence.api.v1.WorkflowAPI.SignalWorkflowExecution:output_type -> uber.cadence.api.v1.SignalWorkflowExecutionResponse
	5,  // 56: uber.cadence.api.v1.WorkflowAPI.SignalWithStartWorkflowExecution:output_type -> uber.cadence.api.v1.SignalWithStartWorkflowExecutionResponse
	7,  // 57: uber.cadence.api.v1.WorkflowAPI.ResetWorkflowExecution:output_type -> uber.cadence.api.v1.ResetWorkflowExecutionResponse
	9,  // 58: uber.cadence.api.v1.WorkflowAPI.TerminateWorkflowExecution:output_type -> uber.cadence.api.v1.TerminateWorkflowExecutionResponse
	11, // 59: uber.cadence.api.v1.WorkflowAPI.DescribeWorkflowExecution:output_type -> uber.cadence.api.v1.DescribeWorkflowExecutionResponse
	13, // 60: uber.cadence.api.v1.WorkflowAPI.QueryWorkflow:output_type -> uber.cadence.api.v1.QueryWorkflowResponse
	15, // 61: uber.cadence.api.v1.WorkflowAPI.DescribeTaskList:output_type -> uber.cadence.api.v1.DescribeTaskListResponse
	17, // 62: uber.cadence.api.v1.WorkflowAPI.ListTaskListPartitions:output_type -> uber.cadence.api.v1.ListTaskListPartitionsResponse
	19, // 63: uber.cadence.api.v1.WorkflowAPI.ResetStickyTaskList:output_type -> uber.cadence.api.v1.ResetStickyTaskListResponse
	21, // 64: uber.cadence.api.v1.WorkflowAPI.GetClusterInfo:output_type -> uber.cadence.api.v1.GetClusterInfoResponse
	23, // 65: uber.cadence.api.v1.WorkflowAPI.GetWorkflowExecutionHistory:output_type -> uber.cadence.api.v1.GetWorkflowExecutionHistoryResponse
	54, // [54:66] is the sub-list for method output_type
	42, // [42:54] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_uber_cadence_api_v1_service_workflow_proto_init() }
func file_uber_cadence_api_v1_service_workflow_proto_init() {
	if File_uber_cadence_api_v1_service_workflow_proto != nil {
		return
	}
	file_uber_cadence_api_v1_common_proto_init()
	file_uber_cadence_api_v1_history_proto_init()
	file_uber_cadence_api_v1_query_proto_init()
	file_uber_cadence_api_v1_tasklist_proto_init()
	file_uber_cadence_api_v1_workflow_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWithStartWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWithStartWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskListPartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskListPartitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStickyTaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStickyTaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowExecutionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_workflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowExecutionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uber_cadence_api_v1_service_workflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uber_cadence_api_v1_service_workflow_proto_goTypes,
		DependencyIndexes: file_uber_cadence_api_v1_service_workflow_proto_depIdxs,
		MessageInfos:      file_uber_cadence_api_v1_service_workflow_proto_msgTypes,
	}.Build()
	File_uber_cadence_api_v1_service_workflow_proto = out.File
	file_uber_cadence_api_v1_service_workflow_proto_rawDesc = nil
	file_uber_cadence_api_v1_service_workflow_proto_goTypes = nil
	file_uber_cadence_api_v1_service_workflow_proto_depIdxs = nil
}
