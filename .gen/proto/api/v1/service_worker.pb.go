// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/service_worker.proto

package apiv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollForDecisionTaskRequest struct {
	Domain               string    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList             *TaskList `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Identity             string    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum       string    `protobuf:"bytes,4,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PollForDecisionTaskRequest) Reset()         { *m = PollForDecisionTaskRequest{} }
func (m *PollForDecisionTaskRequest) String() string { return proto.CompactTextString(m) }
func (*PollForDecisionTaskRequest) ProtoMessage()    {}
func (*PollForDecisionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{0}
}
func (m *PollForDecisionTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForDecisionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForDecisionTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForDecisionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForDecisionTaskRequest.Merge(m, src)
}
func (m *PollForDecisionTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollForDecisionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForDecisionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollForDecisionTaskRequest proto.InternalMessageInfo

func (m *PollForDecisionTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PollForDecisionTaskRequest) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PollForDecisionTaskRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollForDecisionTaskRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type PollForDecisionTaskResponse struct {
	TaskToken                 []byte                    `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution         *WorkflowExecution        `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType              *WorkflowType             `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	PreviousStartedEventId    *types.Int64Value         `protobuf:"bytes,4,opt,name=previous_started_event_id,json=previousStartedEventId,proto3" json:"previous_started_event_id,omitempty"`
	StartedEventId            int64                     `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Attempt                   int64                     `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	BacklogCountHint          int64                     `protobuf:"varint,7,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	History                   *History                  `protobuf:"bytes,8,opt,name=history,proto3" json:"history,omitempty"`
	NextPageToken             []byte                    `protobuf:"bytes,9,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query                     *WorkflowQuery            `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	WorkflowExecutionTaskList *TaskList                 `protobuf:"bytes,11,opt,name=workflow_execution_task_list,json=workflowExecutionTaskList,proto3" json:"workflow_execution_task_list,omitempty"`
	ScheduledTime             *types.Timestamp          `protobuf:"bytes,12,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedTime               *types.Timestamp          `protobuf:"bytes,13,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	Queries                   map[string]*WorkflowQuery `protobuf:"bytes,14,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral      struct{}                  `json:"-"`
	XXX_unrecognized          []byte                    `json:"-"`
	XXX_sizecache             int32                     `json:"-"`
}

func (m *PollForDecisionTaskResponse) Reset()         { *m = PollForDecisionTaskResponse{} }
func (m *PollForDecisionTaskResponse) String() string { return proto.CompactTextString(m) }
func (*PollForDecisionTaskResponse) ProtoMessage()    {}
func (*PollForDecisionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{1}
}
func (m *PollForDecisionTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForDecisionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForDecisionTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForDecisionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForDecisionTaskResponse.Merge(m, src)
}
func (m *PollForDecisionTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollForDecisionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForDecisionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollForDecisionTaskResponse proto.InternalMessageInfo

func (m *PollForDecisionTaskResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowType() *WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetPreviousStartedEventId() *types.Int64Value {
	if m != nil {
		return m.PreviousStartedEventId
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetAttempt() int64 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetQuery() *WorkflowQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowExecutionTaskList() *TaskList {
	if m != nil {
		return m.WorkflowExecutionTaskList
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetScheduledTime() *types.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetStartedTime() *types.Timestamp {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetQueries() map[string]*WorkflowQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

type RespondDecisionTaskCompletedRequest struct {
	TaskToken                  []byte                          `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Decisions                  []*Decision                     `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty"`
	ExecutionContext           []byte                          `protobuf:"bytes,3,opt,name=execution_context,json=executionContext,proto3" json:"execution_context,omitempty"`
	Identity                   string                          `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	StickyAttributes           *StickyExecutionAttributes      `protobuf:"bytes,5,opt,name=sticky_attributes,json=stickyAttributes,proto3" json:"sticky_attributes,omitempty"`
	ReturnNewDecisionTask      bool                            `protobuf:"varint,6,opt,name=return_new_decision_task,json=returnNewDecisionTask,proto3" json:"return_new_decision_task,omitempty"`
	ForceCreateNewDecisionTask bool                            `protobuf:"varint,7,opt,name=force_create_new_decision_task,json=forceCreateNewDecisionTask,proto3" json:"force_create_new_decision_task,omitempty"`
	BinaryChecksum             string                          `protobuf:"bytes,8,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	QueryResults               map[string]*WorkflowQueryResult `protobuf:"bytes,9,rep,name=query_results,json=queryResults,proto3" json:"query_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral       struct{}                        `json:"-"`
	XXX_unrecognized           []byte                          `json:"-"`
	XXX_sizecache              int32                           `json:"-"`
}

func (m *RespondDecisionTaskCompletedRequest) Reset()         { *m = RespondDecisionTaskCompletedRequest{} }
func (m *RespondDecisionTaskCompletedRequest) String() string { return proto.CompactTextString(m) }
func (*RespondDecisionTaskCompletedRequest) ProtoMessage()    {}
func (*RespondDecisionTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{2}
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskCompletedRequest.Merge(m, src)
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondDecisionTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetDecisions() []*Decision {
	if m != nil {
		return m.Decisions
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetExecutionContext() []byte {
	if m != nil {
		return m.ExecutionContext
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RespondDecisionTaskCompletedRequest) GetStickyAttributes() *StickyExecutionAttributes {
	if m != nil {
		return m.StickyAttributes
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetReturnNewDecisionTask() bool {
	if m != nil {
		return m.ReturnNewDecisionTask
	}
	return false
}

func (m *RespondDecisionTaskCompletedRequest) GetForceCreateNewDecisionTask() bool {
	if m != nil {
		return m.ForceCreateNewDecisionTask
	}
	return false
}

func (m *RespondDecisionTaskCompletedRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *RespondDecisionTaskCompletedRequest) GetQueryResults() map[string]*WorkflowQueryResult {
	if m != nil {
		return m.QueryResults
	}
	return nil
}

type RespondDecisionTaskCompletedResponse struct {
	DecisionTask                *PollForDecisionTaskResponse          `protobuf:"bytes,1,opt,name=decision_task,json=decisionTask,proto3" json:"decision_task,omitempty"`
	ActivitiesToDispatchLocally map[string]*ActivityLocalDispatchInfo `protobuf:"bytes,2,rep,name=activities_to_dispatch_locally,json=activitiesToDispatchLocally,proto3" json:"activities_to_dispatch_locally,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral        struct{}                              `json:"-"`
	XXX_unrecognized            []byte                                `json:"-"`
	XXX_sizecache               int32                                 `json:"-"`
}

func (m *RespondDecisionTaskCompletedResponse) Reset()         { *m = RespondDecisionTaskCompletedResponse{} }
func (m *RespondDecisionTaskCompletedResponse) String() string { return proto.CompactTextString(m) }
func (*RespondDecisionTaskCompletedResponse) ProtoMessage()    {}
func (*RespondDecisionTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{3}
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskCompletedResponse.Merge(m, src)
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskCompletedResponse proto.InternalMessageInfo

func (m *RespondDecisionTaskCompletedResponse) GetDecisionTask() *PollForDecisionTaskResponse {
	if m != nil {
		return m.DecisionTask
	}
	return nil
}

func (m *RespondDecisionTaskCompletedResponse) GetActivitiesToDispatchLocally() map[string]*ActivityLocalDispatchInfo {
	if m != nil {
		return m.ActivitiesToDispatchLocally
	}
	return nil
}

type RespondDecisionTaskFailedRequest struct {
	TaskToken            []byte                  `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Cause                DecisionTaskFailedCause `protobuf:"varint,2,opt,name=cause,proto3,enum=uber.cadence.api.v1.DecisionTaskFailedCause" json:"cause,omitempty"`
	Details              *Payload                `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Identity             string                  `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum       string                  `protobuf:"bytes,5,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RespondDecisionTaskFailedRequest) Reset()         { *m = RespondDecisionTaskFailedRequest{} }
func (m *RespondDecisionTaskFailedRequest) String() string { return proto.CompactTextString(m) }
func (*RespondDecisionTaskFailedRequest) ProtoMessage()    {}
func (*RespondDecisionTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{4}
}
func (m *RespondDecisionTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskFailedRequest.Merge(m, src)
}
func (m *RespondDecisionTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskFailedRequest proto.InternalMessageInfo

func (m *RespondDecisionTaskFailedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondDecisionTaskFailedRequest) GetCause() DecisionTaskFailedCause {
	if m != nil {
		return m.Cause
	}
	return DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_INVALID
}

func (m *RespondDecisionTaskFailedRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondDecisionTaskFailedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RespondDecisionTaskFailedRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type RespondDecisionTaskFailedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondDecisionTaskFailedResponse) Reset()         { *m = RespondDecisionTaskFailedResponse{} }
func (m *RespondDecisionTaskFailedResponse) String() string { return proto.CompactTextString(m) }
func (*RespondDecisionTaskFailedResponse) ProtoMessage()    {}
func (*RespondDecisionTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{5}
}
func (m *RespondDecisionTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskFailedResponse.Merge(m, src)
}
func (m *RespondDecisionTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskFailedResponse proto.InternalMessageInfo

type PollForActivityTaskRequest struct {
	Domain               string            `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList             *TaskList         `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Identity             string            `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	TaskListMetadata     *TaskListMetadata `protobuf:"bytes,4,opt,name=task_list_metadata,json=taskListMetadata,proto3" json:"task_list_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PollForActivityTaskRequest) Reset()         { *m = PollForActivityTaskRequest{} }
func (m *PollForActivityTaskRequest) String() string { return proto.CompactTextString(m) }
func (*PollForActivityTaskRequest) ProtoMessage()    {}
func (*PollForActivityTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{6}
}
func (m *PollForActivityTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForActivityTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForActivityTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForActivityTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForActivityTaskRequest.Merge(m, src)
}
func (m *PollForActivityTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollForActivityTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForActivityTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollForActivityTaskRequest proto.InternalMessageInfo

func (m *PollForActivityTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PollForActivityTaskRequest) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PollForActivityTaskRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollForActivityTaskRequest) GetTaskListMetadata() *TaskListMetadata {
	if m != nil {
		return m.TaskListMetadata
	}
	return nil
}

type PollForActivityTaskResponse struct {
	TaskToken                  []byte             `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution          *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId                 string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType               *ActivityType      `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Input                      *Payload           `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTime              *types.Timestamp   `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedTime                *types.Timestamp   `protobuf:"bytes,7,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	ScheduleToCloseTimeout     *types.Duration    `protobuf:"bytes,8,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	StartToCloseTimeout        *types.Duration    `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout           *types.Duration    `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	Attempt                    int32              `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	ScheduledTimeOfThisAttempt *types.Timestamp   `protobuf:"bytes,12,opt,name=scheduled_time_of_this_attempt,json=scheduledTimeOfThisAttempt,proto3" json:"scheduled_time_of_this_attempt,omitempty"`
	HeartbeatDetails           *Payload           `protobuf:"bytes,13,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	WorkflowType               *WorkflowType      `protobuf:"bytes,14,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowDomain             string             `protobuf:"bytes,15,opt,name=workflow_domain,json=workflowDomain,proto3" json:"workflow_domain,omitempty"`
	Header                     *Header            `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}           `json:"-"`
	XXX_unrecognized           []byte             `json:"-"`
	XXX_sizecache              int32              `json:"-"`
}

func (m *PollForActivityTaskResponse) Reset()         { *m = PollForActivityTaskResponse{} }
func (m *PollForActivityTaskResponse) String() string { return proto.CompactTextString(m) }
func (*PollForActivityTaskResponse) ProtoMessage()    {}
func (*PollForActivityTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{7}
}
func (m *PollForActivityTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForActivityTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForActivityTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForActivityTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForActivityTaskResponse.Merge(m, src)
}
func (m *PollForActivityTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollForActivityTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForActivityTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollForActivityTaskResponse proto.InternalMessageInfo

func (m *PollForActivityTaskResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PollForActivityTaskResponse) GetActivityType() *ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetInput() *Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetScheduledTime() *types.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetStartedTime() *types.Timestamp {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetScheduleToCloseTimeout() *types.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetStartToCloseTimeout() *types.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetHeartbeatTimeout() *types.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetScheduledTimeOfThisAttempt() *types.Timestamp {
	if m != nil {
		return m.ScheduledTimeOfThisAttempt
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetHeartbeatDetails() *Payload {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowType() *WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowDomain() string {
	if m != nil {
		return m.WorkflowDomain
	}
	return ""
}

func (m *PollForActivityTaskResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type RespondActivityTaskCompletedRequest struct {
	TaskToken            []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Result               *Payload `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Identity             string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskCompletedRequest) Reset()         { *m = RespondActivityTaskCompletedRequest{} }
func (m *RespondActivityTaskCompletedRequest) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCompletedRequest) ProtoMessage()    {}
func (*RespondActivityTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{8}
}
func (m *RespondActivityTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedRequest.Merge(m, src)
}
func (m *RespondActivityTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskCompletedRequest) GetResult() *Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondActivityTaskCompletedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCompletedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskCompletedResponse) Reset()         { *m = RespondActivityTaskCompletedResponse{} }
func (m *RespondActivityTaskCompletedResponse) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCompletedResponse) ProtoMessage()    {}
func (*RespondActivityTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{9}
}
func (m *RespondActivityTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedResponse.Merge(m, src)
}
func (m *RespondActivityTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedResponse proto.InternalMessageInfo

type RespondActivityTaskCompletedByIDRequest struct {
	Domain               string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId           string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Result               *Payload           `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Identity             string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RespondActivityTaskCompletedByIDRequest) Reset() {
	*m = RespondActivityTaskCompletedByIDRequest{}
}
func (m *RespondActivityTaskCompletedByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCompletedByIDRequest) ProtoMessage()    {}
func (*RespondActivityTaskCompletedByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{10}
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCompletedByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RespondActivityTaskCompletedByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetResult() *Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondActivityTaskCompletedByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCompletedByIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskCompletedByIDResponse) Reset() {
	*m = RespondActivityTaskCompletedByIDResponse{}
}
func (m *RespondActivityTaskCompletedByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCompletedByIDResponse) ProtoMessage()    {}
func (*RespondActivityTaskCompletedByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{11}
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedByIDResponse proto.InternalMessageInfo

type RespondActivityTaskFailedRequest struct {
	TaskToken            []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Failure              *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity             string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskFailedRequest) Reset()         { *m = RespondActivityTaskFailedRequest{} }
func (m *RespondActivityTaskFailedRequest) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskFailedRequest) ProtoMessage()    {}
func (*RespondActivityTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{12}
}
func (m *RespondActivityTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedRequest.Merge(m, src)
}
func (m *RespondActivityTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedRequest proto.InternalMessageInfo

func (m *RespondActivityTaskFailedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskFailedRequest) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *RespondActivityTaskFailedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskFailedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskFailedResponse) Reset()         { *m = RespondActivityTaskFailedResponse{} }
func (m *RespondActivityTaskFailedResponse) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskFailedResponse) ProtoMessage()    {}
func (*RespondActivityTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{13}
}
func (m *RespondActivityTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedResponse.Merge(m, src)
}
func (m *RespondActivityTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedResponse proto.InternalMessageInfo

type RespondActivityTaskFailedByIDRequest struct {
	Domain               string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId           string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Failure              *Failure           `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity             string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RespondActivityTaskFailedByIDRequest) Reset()         { *m = RespondActivityTaskFailedByIDRequest{} }
func (m *RespondActivityTaskFailedByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskFailedByIDRequest) ProtoMessage()    {}
func (*RespondActivityTaskFailedByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{14}
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskFailedByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RespondActivityTaskFailedByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *RespondActivityTaskFailedByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskFailedByIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskFailedByIDResponse) Reset()         { *m = RespondActivityTaskFailedByIDResponse{} }
func (m *RespondActivityTaskFailedByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskFailedByIDResponse) ProtoMessage()    {}
func (*RespondActivityTaskFailedByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{15}
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedByIDResponse proto.InternalMessageInfo

type RespondActivityTaskCanceledRequest struct {
	TaskToken            []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Details              *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity             string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskCanceledRequest) Reset()         { *m = RespondActivityTaskCanceledRequest{} }
func (m *RespondActivityTaskCanceledRequest) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCanceledRequest) ProtoMessage()    {}
func (*RespondActivityTaskCanceledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{16}
}
func (m *RespondActivityTaskCanceledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledRequest.Merge(m, src)
}
func (m *RespondActivityTaskCanceledRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCanceledRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskCanceledRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskCanceledRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCanceledResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskCanceledResponse) Reset()         { *m = RespondActivityTaskCanceledResponse{} }
func (m *RespondActivityTaskCanceledResponse) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCanceledResponse) ProtoMessage()    {}
func (*RespondActivityTaskCanceledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{17}
}
func (m *RespondActivityTaskCanceledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledResponse.Merge(m, src)
}
func (m *RespondActivityTaskCanceledResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledResponse proto.InternalMessageInfo

type RespondActivityTaskCanceledByIDRequest struct {
	Domain               string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId           string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Details              *Payload           `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity             string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RespondActivityTaskCanceledByIDRequest) Reset() {
	*m = RespondActivityTaskCanceledByIDRequest{}
}
func (m *RespondActivityTaskCanceledByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCanceledByIDRequest) ProtoMessage()    {}
func (*RespondActivityTaskCanceledByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{18}
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCanceledByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RespondActivityTaskCanceledByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskCanceledByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCanceledByIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondActivityTaskCanceledByIDResponse) Reset() {
	*m = RespondActivityTaskCanceledByIDResponse{}
}
func (m *RespondActivityTaskCanceledByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RespondActivityTaskCanceledByIDResponse) ProtoMessage()    {}
func (*RespondActivityTaskCanceledByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{19}
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledByIDResponse proto.InternalMessageInfo

type RecordActivityTaskHeartbeatRequest struct {
	TaskToken            []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Details              *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity             string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordActivityTaskHeartbeatRequest) Reset()         { *m = RecordActivityTaskHeartbeatRequest{} }
func (m *RecordActivityTaskHeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*RecordActivityTaskHeartbeatRequest) ProtoMessage()    {}
func (*RecordActivityTaskHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{20}
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatRequest.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatRequest proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatResponse struct {
	CancelRequested      bool     `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordActivityTaskHeartbeatResponse) Reset()         { *m = RecordActivityTaskHeartbeatResponse{} }
func (m *RecordActivityTaskHeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*RecordActivityTaskHeartbeatResponse) ProtoMessage()    {}
func (*RecordActivityTaskHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{21}
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatResponse.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatResponse proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatResponse) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

type RecordActivityTaskHeartbeatByIDRequest struct {
	Domain               string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId           string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Details              *Payload           `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity             string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Reset() {
	*m = RecordActivityTaskHeartbeatByIDRequest{}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RecordActivityTaskHeartbeatByIDRequest) ProtoMessage()    {}
func (*RecordActivityTaskHeartbeatByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{22}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatByIDResponse struct {
	CancelRequested      bool     `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Reset() {
	*m = RecordActivityTaskHeartbeatByIDResponse{}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RecordActivityTaskHeartbeatByIDResponse) ProtoMessage()    {}
func (*RecordActivityTaskHeartbeatByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{23}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatByIDResponse) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

type RespondQueryTaskCompletedRequest struct {
	TaskToken            []byte               `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Result               *WorkflowQueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	WorkerVersionInfo    *WorkerVersionInfo   `protobuf:"bytes,3,opt,name=worker_version_info,json=workerVersionInfo,proto3" json:"worker_version_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RespondQueryTaskCompletedRequest) Reset()         { *m = RespondQueryTaskCompletedRequest{} }
func (m *RespondQueryTaskCompletedRequest) String() string { return proto.CompactTextString(m) }
func (*RespondQueryTaskCompletedRequest) ProtoMessage()    {}
func (*RespondQueryTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{24}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.Merge(m, src)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondQueryTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetResult() *WorkflowQueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetWorkerVersionInfo() *WorkerVersionInfo {
	if m != nil {
		return m.WorkerVersionInfo
	}
	return nil
}

type RespondQueryTaskCompletedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondQueryTaskCompletedResponse) Reset()         { *m = RespondQueryTaskCompletedResponse{} }
func (m *RespondQueryTaskCompletedResponse) String() string { return proto.CompactTextString(m) }
func (*RespondQueryTaskCompletedResponse) ProtoMessage()    {}
func (*RespondQueryTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{25}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.Merge(m, src)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedResponse proto.InternalMessageInfo

type RequestCancelWorkflowExecutionRequest struct {
	Domain               string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Identity             string             `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId            string             `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RequestCancelWorkflowExecutionRequest) Reset()         { *m = RequestCancelWorkflowExecutionRequest{} }
func (m *RequestCancelWorkflowExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*RequestCancelWorkflowExecutionRequest) ProtoMessage()    {}
func (*RequestCancelWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{26}
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelWorkflowExecutionRequest.Merge(m, src)
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelWorkflowExecutionRequest proto.InternalMessageInfo

func (m *RequestCancelWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RequestCancelWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestCancelWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type RequestCancelWorkflowExecutionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestCancelWorkflowExecutionResponse) Reset() {
	*m = RequestCancelWorkflowExecutionResponse{}
}
func (m *RequestCancelWorkflowExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*RequestCancelWorkflowExecutionResponse) ProtoMessage()    {}
func (*RequestCancelWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{27}
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelWorkflowExecutionResponse.Merge(m, src)
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelWorkflowExecutionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PollForDecisionTaskRequest)(nil), "uber.cadence.api.v1.PollForDecisionTaskRequest")
	proto.RegisterType((*PollForDecisionTaskResponse)(nil), "uber.cadence.api.v1.PollForDecisionTaskResponse")
	proto.RegisterMapType((map[string]*WorkflowQuery)(nil), "uber.cadence.api.v1.PollForDecisionTaskResponse.QueriesEntry")
	proto.RegisterType((*RespondDecisionTaskCompletedRequest)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedRequest")
	proto.RegisterMapType((map[string]*WorkflowQueryResult)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.QueryResultsEntry")
	proto.RegisterType((*RespondDecisionTaskCompletedResponse)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedResponse")
	proto.RegisterMapType((map[string]*ActivityLocalDispatchInfo)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.ActivitiesToDispatchLocallyEntry")
	proto.RegisterType((*RespondDecisionTaskFailedRequest)(nil), "uber.cadence.api.v1.RespondDecisionTaskFailedRequest")
	proto.RegisterType((*RespondDecisionTaskFailedResponse)(nil), "uber.cadence.api.v1.RespondDecisionTaskFailedResponse")
	proto.RegisterType((*PollForActivityTaskRequest)(nil), "uber.cadence.api.v1.PollForActivityTaskRequest")
	proto.RegisterType((*PollForActivityTaskResponse)(nil), "uber.cadence.api.v1.PollForActivityTaskResponse")
	proto.RegisterType((*RespondActivityTaskCompletedRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedRequest")
	proto.RegisterType((*RespondActivityTaskCompletedResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedResponse")
	proto.RegisterType((*RespondActivityTaskCompletedByIDRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedByIDRequest")
	proto.RegisterType((*RespondActivityTaskCompletedByIDResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedByIDResponse")
	proto.RegisterType((*RespondActivityTaskFailedRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedRequest")
	proto.RegisterType((*RespondActivityTaskFailedResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedResponse")
	proto.RegisterType((*RespondActivityTaskFailedByIDRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedByIDRequest")
	proto.RegisterType((*RespondActivityTaskFailedByIDResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedByIDResponse")
	proto.RegisterType((*RespondActivityTaskCanceledRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledRequest")
	proto.RegisterType((*RespondActivityTaskCanceledResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledResponse")
	proto.RegisterType((*RespondActivityTaskCanceledByIDRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledByIDRequest")
	proto.RegisterType((*RespondActivityTaskCanceledByIDResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledByIDResponse")
	proto.RegisterType((*RecordActivityTaskHeartbeatRequest)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatRequest")
	proto.RegisterType((*RecordActivityTaskHeartbeatResponse)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatResponse")
	proto.RegisterType((*RecordActivityTaskHeartbeatByIDRequest)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDRequest")
	proto.RegisterType((*RecordActivityTaskHeartbeatByIDResponse)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDResponse")
	proto.RegisterType((*RespondQueryTaskCompletedRequest)(nil), "uber.cadence.api.v1.RespondQueryTaskCompletedRequest")
	proto.RegisterType((*RespondQueryTaskCompletedResponse)(nil), "uber.cadence.api.v1.RespondQueryTaskCompletedResponse")
	proto.RegisterType((*RequestCancelWorkflowExecutionRequest)(nil), "uber.cadence.api.v1.RequestCancelWorkflowExecutionRequest")
	proto.RegisterType((*RequestCancelWorkflowExecutionResponse)(nil), "uber.cadence.api.v1.RequestCancelWorkflowExecutionResponse")
}

func init() {
	proto.RegisterFile("uber/cadence/api/v1/service_worker.proto", fileDescriptor_00684e887839a48c)
}

var fileDescriptor_00684e887839a48c = []byte{
	// 1991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x5b, 0x6f, 0x1b, 0xc7,
	0x15, 0xc6, 0xca, 0xba, 0x1e, 0xdd, 0xa8, 0x31, 0xea, 0x52, 0xb4, 0x2d, 0xcb, 0x4c, 0x6d, 0x2b,
	0x6d, 0x40, 0xd6, 0x4a, 0xea, 0x38, 0x76, 0x5c, 0x54, 0x17, 0x0b, 0x56, 0x91, 0xa6, 0xca, 0x9a,
	0x71, 0x80, 0x14, 0xf0, 0x62, 0xb8, 0x3b, 0x12, 0x07, 0x5a, 0xee, 0xd0, 0xbb, 0xb3, 0x94, 0xf9,
	0xd2, 0x87, 0x3e, 0x26, 0x2d, 0x50, 0xa0, 0x68, 0x8a, 0x02, 0x05, 0xfc, 0xdc, 0x1f, 0xd0, 0xff,
	0xd0, 0xc7, 0xf6, 0xb5, 0x7d, 0x69, 0xfd, 0x4b, 0x8a, 0x9d, 0x99, 0x5d, 0x2e, 0xc9, 0xe1, 0xf0,
	0xd2, 0x07, 0x05, 0xc8, 0x9b, 0x76, 0xf6, 0x3b, 0xdf, 0x9e, 0x39, 0xe7, 0xcc, 0x99, 0x6f, 0x46,
	0x84, 0x9d, 0xb8, 0x4e, 0xc2, 0xaa, 0x8b, 0x3d, 0x12, 0xb8, 0xa4, 0x8a, 0x5b, 0xb4, 0xda, 0xbe,
	0x5f, 0x8d, 0x48, 0xd8, 0xa6, 0x2e, 0x71, 0x2e, 0x58, 0x78, 0x4e, 0xc2, 0x4a, 0x2b, 0x64, 0x9c,
	0xa1, 0xab, 0x09, 0xb2, 0xa2, 0x90, 0x15, 0xdc, 0xa2, 0x95, 0xf6, 0xfd, 0xd2, 0xd6, 0x19, 0x63,
	0x67, 0x3e, 0xa9, 0x0a, 0x48, 0x3d, 0x3e, 0xad, 0x7a, 0x71, 0x88, 0x39, 0x65, 0x81, 0x34, 0x2a,
	0xdd, 0xea, 0x7f, 0xcf, 0x69, 0x93, 0x44, 0x1c, 0x37, 0x5b, 0x0a, 0x30, 0x40, 0x70, 0x11, 0xe2,
	0x56, 0x8b, 0x84, 0x91, 0x7a, 0xbf, 0xad, 0xf3, 0xcf, 0x65, 0xcd, 0x66, 0xf6, 0x89, 0xb2, 0x0e,
	0xe1, 0x11, 0x97, 0x46, 0x5d, 0x37, 0x6e, 0xeb, 0x30, 0x0d, 0x1a, 0x71, 0x16, 0x76, 0x52, 0x4f,
	0x75, 0x90, 0x57, 0x31, 0xc9, 0x00, 0xda, 0xef, 0x70, 0x1c, 0x9d, 0xfb, 0x34, 0xe2, 0x26, 0x4c,
	0x12, 0xc5, 0x53, 0x9f, 0x5d, 0x48, 0x4c, 0xf9, 0x6f, 0x16, 0x94, 0x4e, 0x98, 0xef, 0x1f, 0xb1,
	0xf0, 0x50, 0x79, 0x59, 0xc3, 0xd1, 0xb9, 0x4d, 0x5e, 0xc5, 0x24, 0xe2, 0xe8, 0x1a, 0xcc, 0x7b,
	0xac, 0x89, 0x69, 0x50, 0xb4, 0xb6, 0xad, 0x9d, 0x25, 0x5b, 0x3d, 0xa1, 0x47, 0xb0, 0x94, 0x7c,
	0xcc, 0x49, 0xbe, 0x56, 0x9c, 0xd9, 0xb6, 0x76, 0x96, 0x77, 0x6f, 0x56, 0x34, 0x29, 0xa9, 0x24,
	0x64, 0x9f, 0xd0, 0x88, 0xdb, 0x8b, 0x5c, 0xfd, 0x85, 0x4a, 0xb0, 0x48, 0x3d, 0x12, 0x70, 0xca,
	0x3b, 0xc5, 0x2b, 0x82, 0x35, 0x7b, 0x46, 0xf7, 0x60, 0xbd, 0x4e, 0x03, 0x1c, 0x76, 0x1c, 0xb7,
	0x41, 0xdc, 0xf3, 0x28, 0x6e, 0x16, 0x67, 0x05, 0x64, 0x4d, 0x0e, 0x1f, 0xa8, 0xd1, 0xf2, 0xbf,
	0x16, 0xe0, 0xba, 0xd6, 0xef, 0xa8, 0xc5, 0x82, 0x88, 0xa0, 0x9b, 0x00, 0xc2, 0x41, 0xce, 0xce,
	0x89, 0x74, 0x7e, 0xc5, 0x16, 0x2e, 0xd7, 0x92, 0x01, 0xf4, 0x39, 0xa0, 0x34, 0x10, 0x0e, 0x79,
	0x4d, 0xdc, 0x38, 0xa9, 0x12, 0x35, 0x91, 0xbb, 0xda, 0x89, 0x7c, 0xa1, 0xe0, 0x4f, 0x53, 0xb4,
	0xbd, 0x71, 0xd1, 0x3f, 0x84, 0x8e, 0x60, 0x35, 0xa3, 0xe5, 0x9d, 0x16, 0x11, 0xf3, 0x5b, 0xde,
	0xbd, 0x6d, 0x64, 0xac, 0x75, 0x5a, 0xc4, 0x5e, 0xb9, 0xc8, 0x3d, 0xa1, 0x17, 0xb0, 0xd9, 0x0a,
	0x49, 0x9b, 0xb2, 0x38, 0x72, 0x22, 0x8e, 0x43, 0x4e, 0x3c, 0x87, 0xb4, 0x49, 0xc0, 0x1d, 0xea,
	0x89, 0x80, 0x2c, 0xef, 0x5e, 0xaf, 0xc8, 0x5a, 0xad, 0xa4, 0xb5, 0x5a, 0x39, 0x0e, 0xf8, 0x83,
	0x0f, 0x5e, 0x60, 0x3f, 0x26, 0xf6, 0xb5, 0xd4, 0xfa, 0xb9, 0x34, 0x7e, 0x9a, 0xd8, 0x1e, 0x7b,
	0x68, 0x07, 0x0a, 0x03, 0x74, 0x73, 0xdb, 0xd6, 0xce, 0x15, 0x7b, 0x2d, 0xea, 0x45, 0x16, 0x61,
	0x01, 0x73, 0x4e, 0x9a, 0x2d, 0x5e, 0x9c, 0x17, 0x80, 0xf4, 0x11, 0xbd, 0x07, 0xa8, 0x8e, 0xdd,
	0x73, 0x9f, 0x9d, 0x39, 0x2e, 0x8b, 0x03, 0xee, 0x34, 0x68, 0xc0, 0x8b, 0x0b, 0x02, 0x54, 0x50,
	0x6f, 0x0e, 0x92, 0x17, 0xcf, 0x68, 0xc0, 0xd1, 0x03, 0x58, 0x50, 0x95, 0x5d, 0x5c, 0x14, 0x7e,
	0xdf, 0xd0, 0xc6, 0xe2, 0x99, 0xc4, 0xd8, 0x29, 0x18, 0xdd, 0x85, 0xf5, 0x80, 0xbc, 0xe6, 0x4e,
	0x0b, 0x9f, 0x11, 0x95, 0xc4, 0x25, 0x91, 0xc4, 0xd5, 0x64, 0xf8, 0x04, 0x9f, 0x11, 0x99, 0xc8,
	0x87, 0x30, 0x27, 0x96, 0x45, 0x11, 0x04, 0x7b, 0xd9, 0x18, 0xe9, 0xcf, 0x12, 0xa4, 0x2d, 0x0d,
	0xd0, 0x4b, 0xb8, 0x31, 0x58, 0x02, 0x4e, 0xb7, 0xaa, 0x97, 0xc7, 0xa9, 0xea, 0xcd, 0x81, 0x1a,
	0x48, 0x5f, 0xa1, 0x3d, 0x58, 0x8b, 0xdc, 0x06, 0xf1, 0x62, 0x9f, 0x78, 0x4e, 0xd2, 0x68, 0x8a,
	0x2b, 0x82, 0xb1, 0x34, 0x90, 0xb8, 0x5a, 0xda, 0x85, 0xec, 0xd5, 0xcc, 0x22, 0x19, 0x43, 0x4f,
	0x60, 0x25, 0x4d, 0x97, 0x20, 0x58, 0x1d, 0x49, 0xb0, 0xac, 0xf0, 0xc2, 0xfc, 0x0b, 0x58, 0x48,
	0xa6, 0x4a, 0x49, 0x54, 0x5c, 0xdb, 0xbe, 0xb2, 0xb3, 0xbc, 0xfb, 0x44, 0x3b, 0x19, 0xc3, 0x32,
	0xaa, 0x7c, 0x26, 0xed, 0x9f, 0x06, 0x3c, 0x49, 0x8e, 0x62, 0x2b, 0xbd, 0x84, 0x95, 0xfc, 0x0b,
	0x54, 0x80, 0x2b, 0xe7, 0xa4, 0xa3, 0x5a, 0x44, 0xf2, 0x67, 0x92, 0x96, 0x76, 0x52, 0x89, 0x6a,
	0x49, 0x8d, 0x95, 0x16, 0x61, 0xf0, 0x68, 0xe6, 0xa1, 0x55, 0xfe, 0xeb, 0x1c, 0xbc, 0x23, 0x5d,
	0xf0, 0xf2, 0x5e, 0x1d, 0xb0, 0x66, 0xcb, 0x27, 0x9c, 0x78, 0x69, 0x77, 0x1a, 0xb1, 0xc8, 0x1f,
	0xc3, 0x52, 0xda, 0x79, 0xa3, 0xe2, 0x8c, 0x88, 0x80, 0x3e, 0x9d, 0xe9, 0x47, 0xec, 0x2e, 0x1e,
	0xfd, 0x08, 0x36, 0xba, 0x55, 0xe1, 0xb2, 0x80, 0x93, 0xd7, 0x5c, 0x2c, 0xe7, 0x15, 0xbb, 0x90,
	0xbd, 0x38, 0x90, 0xe3, 0x3d, 0x2d, 0x6d, 0xb6, 0xaf, 0xa5, 0xfd, 0x0a, 0x36, 0x22, 0x4e, 0xdd,
	0xf3, 0x8e, 0x83, 0x39, 0x0f, 0x69, 0x3d, 0xe6, 0x24, 0x12, 0x8b, 0x6e, 0x79, 0xb7, 0xa2, 0xf5,
	0xe6, 0xb9, 0x40, 0x67, 0x05, 0xb5, 0x97, 0x59, 0xd9, 0x05, 0x49, 0xd4, 0x1d, 0x41, 0x1f, 0x42,
	0x31, 0x24, 0x3c, 0x0e, 0x03, 0x27, 0x20, 0x17, 0x4e, 0xea, 0xbd, 0xa8, 0x62, 0xb1, 0x6e, 0x17,
	0xed, 0xef, 0xc9, 0xf7, 0x9f, 0x92, 0x8b, 0x7c, 0x28, 0xd1, 0x3e, 0x6c, 0x9d, 0xb2, 0xd0, 0x25,
	0x8e, 0x1b, 0x12, 0xcc, 0x89, 0xc6, 0x7c, 0x41, 0x98, 0x97, 0x04, 0xea, 0x40, 0x80, 0xfa, 0x39,
	0x34, 0xcd, 0x7a, 0x51, 0xd7, 0xac, 0x11, 0x83, 0x55, 0xb1, 0xe6, 0x9c, 0x90, 0x44, 0xb1, 0xcf,
	0xa3, 0xe2, 0x92, 0x48, 0xc6, 0xcf, 0xb5, 0xd3, 0x1f, 0x23, 0xf1, 0x15, 0x59, 0x31, 0x92, 0x4c,
	0xd6, 0xe6, 0xca, 0xab, 0xdc, 0x50, 0x89, 0xc2, 0xc6, 0x00, 0x44, 0x53, 0xa5, 0x3f, 0xed, 0xad,
	0xd2, 0x9d, 0x31, 0xaa, 0x54, 0x10, 0xe6, 0x6b, 0xf5, 0xcd, 0x15, 0xf8, 0x81, 0xd9, 0x65, 0xb5,
	0x23, 0x7d, 0x0e, 0xab, 0xbd, 0x01, 0xb6, 0xc4, 0x47, 0x7f, 0x3c, 0xe9, 0x9a, 0xb4, 0x57, 0xbc,
	0x7c, 0x12, 0xde, 0x58, 0xb0, 0x85, 0x5d, 0x4e, 0xdb, 0x94, 0x53, 0x12, 0x39, 0x9c, 0x39, 0x1e,
	0x8d, 0x5a, 0x98, 0xbb, 0x0d, 0xc7, 0x67, 0x2e, 0xf6, 0xfd, 0x8e, 0x2a, 0xfd, 0x2f, 0xa7, 0x88,
	0xb6, 0xea, 0x02, 0x7b, 0x19, 0x7f, 0x8d, 0x1d, 0x2a, 0xf6, 0x4f, 0x24, 0xb9, 0x8c, 0xfe, 0x75,
	0x3c, 0x1c, 0x51, 0xfa, 0x35, 0x6c, 0x8f, 0x22, 0xd0, 0xe4, 0xe6, 0xb0, 0x37, 0x37, 0xfa, 0xa5,
	0xa2, 0x78, 0x3b, 0x82, 0x2b, 0x25, 0x3e, 0x0e, 0x4e, 0x59, 0x3e, 0x43, 0xbf, 0x99, 0x81, 0x6d,
	0xcd, 0x34, 0x8f, 0x30, 0xf5, 0xc7, 0x6e, 0x25, 0xfb, 0x30, 0xe7, 0xe2, 0x38, 0x92, 0xde, 0xac,
	0xed, 0xbe, 0x67, 0x6c, 0x23, 0x5d, 0xf6, 0x83, 0xc4, 0xc6, 0x96, 0xa6, 0xc9, 0x56, 0xe8, 0x11,
	0x8e, 0xa9, 0x1f, 0x29, 0x59, 0xa0, 0xdf, 0x0a, 0x4f, 0x70, 0xc7, 0x67, 0xd8, 0xb3, 0x53, 0xb0,
	0xb1, 0xb9, 0x68, 0x96, 0xe0, 0x9c, 0x56, 0x2f, 0xbd, 0x03, 0xb7, 0x0d, 0x31, 0x90, 0x79, 0x2e,
	0xff, 0xb7, 0x2b, 0x06, 0xd3, 0xc8, 0x5e, 0xa6, 0x18, 0x7c, 0x0e, 0x28, 0xe3, 0x75, 0x9a, 0x84,
	0x63, 0x0f, 0x73, 0xac, 0xe4, 0xcf, 0x1d, 0xe3, 0x07, 0x7e, 0xa1, 0xc0, 0x76, 0x81, 0xf7, 0x8d,
	0x94, 0xbf, 0x5e, 0xcc, 0x84, 0x63, 0xef, 0x1c, 0x2f, 0x55, 0x38, 0xde, 0x82, 0x65, 0xb5, 0x84,
	0x3a, 0x89, 0x26, 0x93, 0x91, 0x80, 0x74, 0xe8, 0xd8, 0x4b, 0x94, 0x65, 0x06, 0x10, 0xca, 0x72,
	0xd6, 0xa0, 0x2c, 0xb3, 0x89, 0x09, 0x65, 0x89, 0x73, 0x4f, 0x68, 0x17, 0xe6, 0x68, 0xd0, 0x8a,
	0xb9, 0xda, 0x81, 0xcc, 0x25, 0x28, 0xa1, 0x1a, 0x25, 0x33, 0xff, 0xff, 0x2a, 0x99, 0x85, 0xc9,
	0x94, 0x4c, 0x0d, 0x36, 0x53, 0xbe, 0xa4, 0xc3, 0xb9, 0x3e, 0x8b, 0x88, 0x20, 0x62, 0x31, 0x57,
	0xba, 0x72, 0x73, 0x80, 0xeb, 0x50, 0x1d, 0xfe, 0xec, 0x6b, 0xa9, 0x6d, 0x8d, 0x1d, 0x24, 0x96,
	0x35, 0x69, 0x88, 0x3e, 0x85, 0x6b, 0xe2, 0x23, 0x83, 0x94, 0x4b, 0xa3, 0x28, 0xaf, 0x0a, 0xc3,
	0x3e, 0xbe, 0x23, 0xd8, 0x68, 0x10, 0x1c, 0xf2, 0x3a, 0xc1, 0x3c, 0xa3, 0x82, 0x51, 0x54, 0x85,
	0xcc, 0x26, 0xe5, 0xc9, 0x69, 0xef, 0x44, 0x84, 0xce, 0x75, 0xb5, 0xf7, 0x4b, 0xd8, 0xea, 0xcd,
	0x84, 0xc3, 0x4e, 0x1d, 0xde, 0xa0, 0x91, 0x93, 0x1a, 0x8c, 0xd6, 0x98, 0xa5, 0x9e, 0xcc, 0xfc,
	0xf2, 0xb4, 0xd6, 0xa0, 0xd1, 0x9e, 0xe2, 0x3f, 0xce, 0xcf, 0x20, 0x6d, 0x56, 0xab, 0x63, 0x54,
	0x4a, 0x77, 0x12, 0x87, 0xaa, 0x6b, 0x0d, 0x1c, 0x85, 0xd6, 0xa6, 0x3b, 0x0a, 0xdd, 0x83, 0xf5,
	0x8c, 0x47, 0x75, 0x9f, 0x75, 0xd9, 0xe1, 0xd2, 0xe1, 0x43, 0xd9, 0x85, 0xde, 0x87, 0xf9, 0x06,
	0xc1, 0x1e, 0x09, 0x8b, 0x05, 0x75, 0x40, 0xd2, 0x1e, 0x34, 0x04, 0xc4, 0x56, 0xd0, 0xf2, 0x37,
	0x56, 0xa6, 0x34, 0xf3, 0xdd, 0x60, 0x52, 0xa5, 0xf9, 0x01, 0xcc, 0x4b, 0x69, 0xa3, 0x3a, 0x81,
	0x39, 0x58, 0x0a, 0x6b, 0xea, 0x7d, 0xe5, 0xbb, 0x99, 0xaa, 0x18, 0xe2, 0x97, 0x6a, 0xd9, 0x5f,
	0xcf, 0xc0, 0x3d, 0x13, 0x70, 0xbf, 0x73, 0x7c, 0x38, 0xaa, 0x7f, 0x5f, 0x56, 0x4f, 0xeb, 0x46,
	0x6d, 0x76, 0xca, 0xa8, 0xcd, 0xf5, 0x45, 0xed, 0x87, 0xb0, 0x33, 0x3a, 0x18, 0x2a, 0x72, 0x7f,
	0xb4, 0x32, 0x59, 0x90, 0x07, 0x4f, 0x24, 0x0b, 0x1e, 0xc0, 0xc2, 0x29, 0xa6, 0x7e, 0x1c, 0x12,
	0x63, 0xe2, 0x8f, 0x24, 0xc6, 0x4e, 0xc1, 0xc6, 0xcc, 0x77, 0x77, 0x6a, 0x9d, 0x5b, 0xca, 0xf9,
	0xaf, 0x66, 0xb4, 0xf5, 0x21, 0x51, 0xdf, 0xe6, 0x9c, 0xe7, 0x22, 0x36, 0x3b, 0x6d, 0xc4, 0xfa,
	0xb3, 0x7e, 0x0f, 0xee, 0x8c, 0x88, 0x85, 0x8a, 0xda, 0x9f, 0x2c, 0x28, 0xeb, 0xea, 0x03, 0x07,
	0x2e, 0x99, 0x28, 0xe9, 0x69, 0x6b, 0x9c, 0x99, 0x56, 0xc7, 0xf5, 0x27, 0xfd, 0x8e, 0xbe, 0x0d,
	0x65, 0x8e, 0xa9, 0x09, 0xfc, 0x76, 0x06, 0xee, 0x1a, 0x70, 0xdf, 0xf2, 0xc4, 0xa7, 0x51, 0x9b,
	0x9d, 0x36, 0x6a, 0xfd, 0x89, 0x7f, 0x57, 0xdf, 0xfb, 0x7a, 0xa2, 0xd1, 0x93, 0x7a, 0x97, 0x85,
	0x3d, 0xd0, 0x67, 0xe9, 0xae, 0x75, 0x89, 0xa9, 0x3f, 0x49, 0x52, 0x6f, 0x70, 0x4c, 0xe9, 0xd2,
	0x77, 0xa1, 0xe0, 0x8a, 0x89, 0x39, 0xa1, 0xf4, 0x95, 0x78, 0xc2, 0xbf, 0x45, 0x7b, 0x5d, 0x8e,
	0xdb, 0xe9, 0xb0, 0xaa, 0x92, 0xa1, 0x94, 0xdf, 0xb5, 0x2a, 0xa9, 0x25, 0x55, 0x32, 0x22, 0x1a,
	0x93, 0x07, 0xf9, 0xdf, 0xdd, 0xed, 0x43, 0xdc, 0x0c, 0x4c, 0x23, 0x1b, 0x7e, 0xd6, 0x27, 0x1b,
	0xc6, 0xbf, 0x80, 0x48, 0x37, 0xc3, 0x17, 0x70, 0x55, 0xfe, 0x5b, 0xc4, 0x69, 0x93, 0x50, 0x5c,
	0x2d, 0xd0, 0xe0, 0x94, 0xa9, 0xf3, 0xe5, 0xf0, 0x44, 0x91, 0xf0, 0x85, 0x84, 0x8b, 0xb3, 0xf2,
	0xc6, 0x45, 0xff, 0x50, 0x6e, 0x13, 0xd2, 0x4d, 0x4e, 0xad, 0xa9, 0x7f, 0x5a, 0x49, 0xe3, 0x15,
	0x33, 0x95, 0x6b, 0x6e, 0xb0, 0x06, 0x2e, 0xa7, 0xcc, 0x4c, 0x87, 0xca, 0x9b, 0x00, 0x2a, 0xb7,
	0xe9, 0x5d, 0xfa, 0x92, 0xbd, 0xa4, 0x46, 0x8e, 0xbd, 0xf2, 0x4e, 0xb2, 0x74, 0xcc, 0x53, 0x92,
	0xb3, 0xdf, 0xfd, 0x5d, 0x01, 0x96, 0x64, 0x2c, 0xf7, 0x4e, 0x8e, 0xd1, 0x6b, 0xb8, 0xaa, 0xb9,
	0xb3, 0x41, 0xd5, 0xf1, 0x6f, 0x77, 0xc4, 0x47, 0x4b, 0x13, 0x5f, 0x07, 0xa1, 0x3f, 0x58, 0x70,
	0xc3, 0x74, 0x8b, 0x83, 0x1e, 0x4e, 0x7b, 0xcd, 0x56, 0xfa, 0x68, 0xea, 0x2b, 0x23, 0xf4, 0x95,
	0x05, 0x9b, 0x43, 0x2f, 0x1c, 0xd0, 0x4f, 0xc6, 0x25, 0xee, 0x51, 0x63, 0xa5, 0x07, 0x93, 0x9a,
	0x29, 0x67, 0xba, 0xc9, 0xc9, 0xb7, 0x00, 0x73, 0x72, 0x34, 0x17, 0x20, 0xe6, 0xe4, 0x68, 0x6f,
	0x13, 0x72, 0xc9, 0xd1, 0x2a, 0x52, 0x73, 0x72, 0x4c, 0x47, 0x12, 0x73, 0x72, 0x8c, 0x87, 0x06,
	0xf4, 0x46, 0x2f, 0x7d, 0x7b, 0x74, 0x32, 0xfa, 0x78, 0x62, 0xfe, 0xdc, 0xc6, 0x52, 0x7a, 0x32,
	0xa5, 0xf5, 0x60, 0xf9, 0x0c, 0x6a, 0x3a, 0x73, 0xf9, 0x0c, 0x15, 0xf3, 0xe6, 0xf2, 0x19, 0x2e,
	0xb6, 0xd1, 0x37, 0x16, 0xdc, 0x34, 0x0a, 0x4c, 0xf4, 0xd1, 0x64, 0xcc, 0xf9, 0x40, 0x3d, 0x9a,
	0xc6, 0x54, 0x39, 0xf6, 0x7b, 0x0b, 0xae, 0x1b, 0x04, 0x10, 0xfa, 0x70, 0xec, 0x24, 0xf4, 0x2a,
	0xe0, 0xd2, 0xc3, 0xc9, 0x0d, 0x95, 0x4b, 0x7f, 0xb1, 0xe0, 0xd6, 0x08, 0x4d, 0x86, 0x1e, 0x4f,
	0xca, 0x9e, 0x8f, 0xd7, 0xc7, 0xd3, 0x19, 0xf7, 0x44, 0x6c, 0xa8, 0x18, 0x18, 0x1a, 0xb1, 0x51,
	0xc2, 0x71, 0x68, 0xc4, 0x46, 0x0b, 0x3b, 0x19, 0x31, 0xa3, 0x3e, 0x19, 0x1a, 0xb1, 0x71, 0x34,
	0xde, 0xd0, 0x88, 0x8d, 0x27, 0x89, 0x72, 0x2b, 0x71, 0x50, 0x0a, 0x98, 0x57, 0xe2, 0x50, 0x5d,
	0x64, 0x5e, 0x89, 0xc3, 0x15, 0x07, 0xfa, 0xb3, 0x05, 0x5b, 0xe6, 0xed, 0x19, 0x0d, 0x5b, 0x4f,
	0x63, 0xc8, 0x94, 0xd2, 0xe3, 0xa9, 0x6c, 0xa5, 0x6f, 0xfb, 0xf5, 0xbf, 0xbf, 0xdd, 0xb2, 0xfe,
	0xf1, 0x76, 0xcb, 0xfa, 0xcf, 0xdb, 0x2d, 0x0b, 0xbe, 0xef, 0xb2, 0xa6, 0x8e, 0x6d, 0x7f, 0x71,
	0xaf, 0x45, 0x4f, 0x42, 0xc6, 0xd9, 0x89, 0xf5, 0x65, 0xf5, 0x8c, 0xf2, 0x46, 0x5c, 0xaf, 0xb8,
	0xac, 0x59, 0xed, 0xf9, 0xad, 0x46, 0xe5, 0x8c, 0x04, 0xf2, 0x47, 0x28, 0xea, 0x67, 0x1b, 0x8f,
	0x71, 0x8b, 0xb6, 0xef, 0xd7, 0xe7, 0xc5, 0xd8, 0xfb, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x13,
	0xb7, 0xa1, 0xd4, 0x28, 0x23, 0x00, 0x00,
}

func (m *PollForDecisionTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForDecisionTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForDecisionTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForDecisionTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForDecisionTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForDecisionTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Queries) > 0 {
		for k := range m.Queries {
			v := m.Queries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServiceWorker(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceWorker(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceWorker(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.StartedTime != nil {
		{
			size, err := m.StartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.WorkflowExecutionTaskList != nil {
		{
			size, err := m.WorkflowExecutionTaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x4a
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x38
	}
	if m.Attempt != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x30
	}
	if m.StartedEventId != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.PreviousStartedEventId != nil {
		{
			size, err := m.PreviousStartedEventId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueryResults) > 0 {
		for k := range m.QueryResults {
			v := m.QueryResults[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServiceWorker(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceWorker(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceWorker(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x42
	}
	if m.ForceCreateNewDecisionTask {
		i--
		if m.ForceCreateNewDecisionTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ReturnNewDecisionTask {
		i--
		if m.ReturnNewDecisionTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StickyAttributes != nil {
		{
			size, err := m.StickyAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExecutionContext) > 0 {
		i -= len(m.ExecutionContext)
		copy(dAtA[i:], m.ExecutionContext)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ExecutionContext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Decisions) > 0 {
		for iNdEx := len(m.Decisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceWorker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActivitiesToDispatchLocally) > 0 {
		for k := range m.ActivitiesToDispatchLocally {
			v := m.ActivitiesToDispatchLocally[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServiceWorker(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceWorker(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceWorker(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DecisionTask != nil {
		{
			size, err := m.DecisionTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cause != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PollForActivityTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForActivityTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForActivityTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskListMetadata != nil {
		{
			size, err := m.TaskListMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForActivityTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForActivityTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForActivityTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.WorkflowDomain) > 0 {
		i -= len(m.WorkflowDomain)
		copy(dAtA[i:], m.WorkflowDomain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.WorkflowDomain)))
		i--
		dAtA[i] = 0x7a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.HeartbeatDetails != nil {
		{
			size, err := m.HeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ScheduledTimeOfThisAttempt != nil {
		{
			size, err := m.ScheduledTimeOfThisAttempt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Attempt != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x58
	}
	if m.HeartbeatTimeout != nil {
		{
			size, err := m.HeartbeatTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.StartToCloseTimeout != nil {
		{
			size, err := m.StartToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ScheduleToCloseTimeout != nil {
		{
			size, err := m.ScheduleToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.StartedTime != nil {
		{
			size, err := m.StartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkerVersionInfo != nil {
		{
			size, err := m.WorkerVersionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceWorker(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceWorker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PollForDecisionTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollForDecisionTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.PreviousStartedEventId != nil {
		l = m.PreviousStartedEventId.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovServiceWorker(uint64(m.StartedEventId))
	}
	if m.Attempt != 0 {
		n += 1 + sovServiceWorker(uint64(m.Attempt))
	}
	if m.BacklogCountHint != 0 {
		n += 1 + sovServiceWorker(uint64(m.BacklogCountHint))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecutionTaskList != nil {
		l = m.WorkflowExecutionTaskList.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartedTime != nil {
		l = m.StartedTime.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.Queries) > 0 {
		for k, v := range m.Queries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServiceWorker(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServiceWorker(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServiceWorker(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondDecisionTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.Decisions) > 0 {
		for _, e := range m.Decisions {
			l = e.Size()
			n += 1 + l + sovServiceWorker(uint64(l))
		}
	}
	l = len(m.ExecutionContext)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StickyAttributes != nil {
		l = m.StickyAttributes.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ReturnNewDecisionTask {
		n += 2
	}
	if m.ForceCreateNewDecisionTask {
		n += 2
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.QueryResults) > 0 {
		for k, v := range m.QueryResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServiceWorker(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServiceWorker(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServiceWorker(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondDecisionTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTask != nil {
		l = m.DecisionTask.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.ActivitiesToDispatchLocally) > 0 {
		for k, v := range m.ActivitiesToDispatchLocally {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServiceWorker(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServiceWorker(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServiceWorker(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondDecisionTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovServiceWorker(uint64(m.Cause))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondDecisionTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollForActivityTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.TaskListMetadata != nil {
		l = m.TaskListMetadata.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollForActivityTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartedTime != nil {
		l = m.StartedTime.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ScheduleToCloseTimeout != nil {
		l = m.ScheduleToCloseTimeout.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = m.StartToCloseTimeout.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = m.HeartbeatTimeout.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovServiceWorker(uint64(m.Attempt))
	}
	if m.ScheduledTimeOfThisAttempt != nil {
		l = m.ScheduledTimeOfThisAttempt.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.HeartbeatDetails != nil {
		l = m.HeartbeatDetails.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.WorkflowDomain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCompletedByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCompletedByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskFailedByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskFailedByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCanceledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCanceledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCanceledByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondActivityTaskCanceledByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordActivityTaskHeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordActivityTaskHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondQueryTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkerVersionInfo != nil {
		l = m.WorkerVersionInfo.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespondQueryTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestCancelWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestCancelWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServiceWorker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceWorker(x uint64) (n int) {
	return sovServiceWorker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PollForDecisionTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForDecisionTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForDecisionTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForDecisionTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForDecisionTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForDecisionTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStartedEventId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousStartedEventId == nil {
				m.PreviousStartedEventId = &types.Int64Value{}
			}
			if err := m.PreviousStartedEventId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &WorkflowQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTaskList == nil {
				m.WorkflowExecutionTaskList = &TaskList{}
			}
			if err := m.WorkflowExecutionTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &types.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = &types.Timestamp{}
			}
			if err := m.StartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queries == nil {
				m.Queries = make(map[string]*WorkflowQuery)
			}
			var mapkey string
			var mapvalue *WorkflowQuery
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceWorker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkflowQuery{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceWorker(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Queries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decisions = append(m.Decisions, &Decision{})
			if err := m.Decisions[len(m.Decisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionContext = append(m.ExecutionContext[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecutionContext == nil {
				m.ExecutionContext = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickyAttributes == nil {
				m.StickyAttributes = &StickyExecutionAttributes{}
			}
			if err := m.StickyAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnNewDecisionTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnNewDecisionTask = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceCreateNewDecisionTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceCreateNewDecisionTask = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResults == nil {
				m.QueryResults = make(map[string]*WorkflowQueryResult)
			}
			var mapkey string
			var mapvalue *WorkflowQueryResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceWorker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkflowQueryResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceWorker(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QueryResults[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecisionTask == nil {
				m.DecisionTask = &PollForDecisionTaskResponse{}
			}
			if err := m.DecisionTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivitiesToDispatchLocally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivitiesToDispatchLocally == nil {
				m.ActivitiesToDispatchLocally = make(map[string]*ActivityLocalDispatchInfo)
			}
			var mapkey string
			var mapvalue *ActivityLocalDispatchInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceWorker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActivityLocalDispatchInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceWorker(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActivitiesToDispatchLocally[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= DecisionTaskFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForActivityTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForActivityTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForActivityTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskListMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskListMetadata == nil {
				m.TaskListMetadata = &TaskListMetadata{}
			}
			if err := m.TaskListMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForActivityTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForActivityTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForActivityTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &types.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = &types.Timestamp{}
			}
			if err := m.StartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = &types.Duration{}
			}
			if err := m.ScheduleToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = &types.Duration{}
			}
			if err := m.StartToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = &types.Duration{}
			}
			if err := m.HeartbeatTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimeOfThisAttempt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTimeOfThisAttempt == nil {
				m.ScheduledTimeOfThisAttempt = &types.Timestamp{}
			}
			if err := m.ScheduledTimeOfThisAttempt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = &Payload{}
			}
			if err := m.HeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &WorkflowQueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerVersionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerVersionInfo == nil {
				m.WorkerVersionInfo = &WorkerVersionInfo{}
			}
			if err := m.WorkerVersionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceWorker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceWorker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceWorker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceWorker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceWorker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceWorker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceWorker = fmt.Errorf("proto: unexpected end of group")
)
