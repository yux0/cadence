// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: uber/cadence/api/v1/service_worker.proto

package apiv1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PollForDecisionTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain         string    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList       *TaskList `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Identity       string    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum string    `protobuf:"bytes,4,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (x *PollForDecisionTaskRequest) Reset() {
	*x = PollForDecisionTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollForDecisionTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollForDecisionTaskRequest) ProtoMessage() {}

func (x *PollForDecisionTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollForDecisionTaskRequest.ProtoReflect.Descriptor instead.
func (*PollForDecisionTaskRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{0}
}

func (x *PollForDecisionTaskRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PollForDecisionTaskRequest) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *PollForDecisionTaskRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollForDecisionTaskRequest) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

type PollForDecisionTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken                 []byte                    `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution         *WorkflowExecution        `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType              *WorkflowType             `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	PreviousStartedEventId    int64                     `protobuf:"varint,4,opt,name=previous_started_event_id,json=previousStartedEventId,proto3" json:"previous_started_event_id,omitempty"`
	StartedEventId            int64                     `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Attempt                   int64                     `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	BacklogCountHint          int64                     `protobuf:"varint,7,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	History                   *History                  `protobuf:"bytes,8,opt,name=history,proto3" json:"history,omitempty"`
	NextPageToken             []byte                    `protobuf:"bytes,9,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query                     *WorkflowQuery            `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	WorkflowExecutionTaskList *TaskList                 `protobuf:"bytes,11,opt,name=workflow_execution_task_list,json=workflowExecutionTaskList,proto3" json:"workflow_execution_task_list,omitempty"`
	ScheduledTime             *timestamppb.Timestamp    `protobuf:"bytes,12,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedTime               *timestamppb.Timestamp    `protobuf:"bytes,13,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	Queries                   map[string]*WorkflowQuery `protobuf:"bytes,14,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PollForDecisionTaskResponse) Reset() {
	*x = PollForDecisionTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollForDecisionTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollForDecisionTaskResponse) ProtoMessage() {}

func (x *PollForDecisionTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollForDecisionTaskResponse.ProtoReflect.Descriptor instead.
func (*PollForDecisionTaskResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{1}
}

func (x *PollForDecisionTaskResponse) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetPreviousStartedEventId() int64 {
	if x != nil {
		return x.PreviousStartedEventId
	}
	return 0
}

func (x *PollForDecisionTaskResponse) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *PollForDecisionTaskResponse) GetAttempt() int64 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *PollForDecisionTaskResponse) GetBacklogCountHint() int64 {
	if x != nil {
		return x.BacklogCountHint
	}
	return 0
}

func (x *PollForDecisionTaskResponse) GetHistory() *History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetQuery() *WorkflowQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetWorkflowExecutionTaskList() *TaskList {
	if x != nil {
		return x.WorkflowExecutionTaskList
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *PollForDecisionTaskResponse) GetQueries() map[string]*WorkflowQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type RespondDecisionTaskCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken                  []byte                          `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Decisions                  []*Decision                     `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty"`
	ExecutionContext           []byte                          `protobuf:"bytes,3,opt,name=execution_context,json=executionContext,proto3" json:"execution_context,omitempty"`
	Identity                   string                          `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	StickyAttributes           *StickyExecutionAttributes      `protobuf:"bytes,5,opt,name=sticky_attributes,json=stickyAttributes,proto3" json:"sticky_attributes,omitempty"`
	ReturnNewDecisionTask      bool                            `protobuf:"varint,6,opt,name=return_new_decision_task,json=returnNewDecisionTask,proto3" json:"return_new_decision_task,omitempty"`
	ForceCreateNewDecisionTask bool                            `protobuf:"varint,7,opt,name=force_create_new_decision_task,json=forceCreateNewDecisionTask,proto3" json:"force_create_new_decision_task,omitempty"`
	BinaryChecksum             string                          `protobuf:"bytes,8,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	QueryResults               map[string]*WorkflowQueryResult `protobuf:"bytes,9,rep,name=query_results,json=queryResults,proto3" json:"query_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RespondDecisionTaskCompletedRequest) Reset() {
	*x = RespondDecisionTaskCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondDecisionTaskCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondDecisionTaskCompletedRequest) ProtoMessage() {}

func (x *RespondDecisionTaskCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondDecisionTaskCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondDecisionTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{2}
}

func (x *RespondDecisionTaskCompletedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondDecisionTaskCompletedRequest) GetDecisions() []*Decision {
	if x != nil {
		return x.Decisions
	}
	return nil
}

func (x *RespondDecisionTaskCompletedRequest) GetExecutionContext() []byte {
	if x != nil {
		return x.ExecutionContext
	}
	return nil
}

func (x *RespondDecisionTaskCompletedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondDecisionTaskCompletedRequest) GetStickyAttributes() *StickyExecutionAttributes {
	if x != nil {
		return x.StickyAttributes
	}
	return nil
}

func (x *RespondDecisionTaskCompletedRequest) GetReturnNewDecisionTask() bool {
	if x != nil {
		return x.ReturnNewDecisionTask
	}
	return false
}

func (x *RespondDecisionTaskCompletedRequest) GetForceCreateNewDecisionTask() bool {
	if x != nil {
		return x.ForceCreateNewDecisionTask
	}
	return false
}

func (x *RespondDecisionTaskCompletedRequest) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

func (x *RespondDecisionTaskCompletedRequest) GetQueryResults() map[string]*WorkflowQueryResult {
	if x != nil {
		return x.QueryResults
	}
	return nil
}

type RespondDecisionTaskCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionTask                *PollForDecisionTaskResponse          `protobuf:"bytes,1,opt,name=decision_task,json=decisionTask,proto3" json:"decision_task,omitempty"`
	ActivitiesToDispatchLocally map[string]*ActivityLocalDispatchInfo `protobuf:"bytes,2,rep,name=activities_to_dispatch_locally,json=activitiesToDispatchLocally,proto3" json:"activities_to_dispatch_locally,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RespondDecisionTaskCompletedResponse) Reset() {
	*x = RespondDecisionTaskCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondDecisionTaskCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondDecisionTaskCompletedResponse) ProtoMessage() {}

func (x *RespondDecisionTaskCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondDecisionTaskCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondDecisionTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{3}
}

func (x *RespondDecisionTaskCompletedResponse) GetDecisionTask() *PollForDecisionTaskResponse {
	if x != nil {
		return x.DecisionTask
	}
	return nil
}

func (x *RespondDecisionTaskCompletedResponse) GetActivitiesToDispatchLocally() map[string]*ActivityLocalDispatchInfo {
	if x != nil {
		return x.ActivitiesToDispatchLocally
	}
	return nil
}

type RespondDecisionTaskFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken      []byte                  `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Cause          DecisionTaskFailedCause `protobuf:"varint,2,opt,name=cause,proto3,enum=uber.cadence.api.v1.DecisionTaskFailedCause" json:"cause,omitempty"`
	Details        *Payload                `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Identity       string                  `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum string                  `protobuf:"bytes,5,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (x *RespondDecisionTaskFailedRequest) Reset() {
	*x = RespondDecisionTaskFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondDecisionTaskFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondDecisionTaskFailedRequest) ProtoMessage() {}

func (x *RespondDecisionTaskFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondDecisionTaskFailedRequest.ProtoReflect.Descriptor instead.
func (*RespondDecisionTaskFailedRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{4}
}

func (x *RespondDecisionTaskFailedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondDecisionTaskFailedRequest) GetCause() DecisionTaskFailedCause {
	if x != nil {
		return x.Cause
	}
	return DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_INVALID
}

func (x *RespondDecisionTaskFailedRequest) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RespondDecisionTaskFailedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondDecisionTaskFailedRequest) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

type RespondDecisionTaskFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondDecisionTaskFailedResponse) Reset() {
	*x = RespondDecisionTaskFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondDecisionTaskFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondDecisionTaskFailedResponse) ProtoMessage() {}

func (x *RespondDecisionTaskFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondDecisionTaskFailedResponse.ProtoReflect.Descriptor instead.
func (*RespondDecisionTaskFailedResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{5}
}

type PollForActivityTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain           string            `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList         *TaskList         `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Identity         string            `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	TaskListMetadata *TaskListMetadata `protobuf:"bytes,4,opt,name=task_list_metadata,json=taskListMetadata,proto3" json:"task_list_metadata,omitempty"`
}

func (x *PollForActivityTaskRequest) Reset() {
	*x = PollForActivityTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollForActivityTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollForActivityTaskRequest) ProtoMessage() {}

func (x *PollForActivityTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollForActivityTaskRequest.ProtoReflect.Descriptor instead.
func (*PollForActivityTaskRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{6}
}

func (x *PollForActivityTaskRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PollForActivityTaskRequest) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *PollForActivityTaskRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollForActivityTaskRequest) GetTaskListMetadata() *TaskListMetadata {
	if x != nil {
		return x.TaskListMetadata
	}
	return nil
}

type PollForActivityTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken                  []byte                 `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution          *WorkflowExecution     `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId                 string                 `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType               *ActivityType          `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Input                      *Payload               `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTime              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedTime                *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	ScheduleToCloseTimeout     *durationpb.Duration   `protobuf:"bytes,8,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	StartToCloseTimeout        *durationpb.Duration   `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout           *durationpb.Duration   `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	Attempt                    int32                  `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	ScheduledTimeOfThisAttempt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=scheduled_time_of_this_attempt,json=scheduledTimeOfThisAttempt,proto3" json:"scheduled_time_of_this_attempt,omitempty"`
	HeartbeatDetails           *Payload               `protobuf:"bytes,13,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	WorkflowType               *WorkflowType          `protobuf:"bytes,14,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowDomain             string                 `protobuf:"bytes,15,opt,name=workflow_domain,json=workflowDomain,proto3" json:"workflow_domain,omitempty"`
	Header                     *Header                `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *PollForActivityTaskResponse) Reset() {
	*x = PollForActivityTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollForActivityTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollForActivityTaskResponse) ProtoMessage() {}

func (x *PollForActivityTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollForActivityTaskResponse.ProtoReflect.Descriptor instead.
func (*PollForActivityTaskResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{7}
}

func (x *PollForActivityTaskResponse) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *PollForActivityTaskResponse) GetActivityType() *ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *PollForActivityTaskResponse) GetScheduledTimeOfThisAttempt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTimeOfThisAttempt
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetHeartbeatDetails() *Payload {
	if x != nil {
		return x.HeartbeatDetails
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *PollForActivityTaskResponse) GetWorkflowDomain() string {
	if x != nil {
		return x.WorkflowDomain
	}
	return ""
}

func (x *PollForActivityTaskResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type RespondActivityTaskCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Result    *Payload `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskCompletedRequest) Reset() {
	*x = RespondActivityTaskCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedRequest) ProtoMessage() {}

func (x *RespondActivityTaskCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{8}
}

func (x *RespondActivityTaskCompletedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondActivityTaskCompletedRequest) GetResult() *Payload {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RespondActivityTaskCompletedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCompletedResponse) Reset() {
	*x = RespondActivityTaskCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedResponse) ProtoMessage() {}

func (x *RespondActivityTaskCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{9}
}

type RespondActivityTaskCompletedByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId        string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Result            *Payload           `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Identity          string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskCompletedByIDRequest) Reset() {
	*x = RespondActivityTaskCompletedByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedByIDRequest) ProtoMessage() {}

func (x *RespondActivityTaskCompletedByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedByIDRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedByIDRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{10}
}

func (x *RespondActivityTaskCompletedByIDRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RespondActivityTaskCompletedByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RespondActivityTaskCompletedByIDRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RespondActivityTaskCompletedByIDRequest) GetResult() *Payload {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RespondActivityTaskCompletedByIDRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskCompletedByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCompletedByIDResponse) Reset() {
	*x = RespondActivityTaskCompletedByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedByIDResponse) ProtoMessage() {}

func (x *RespondActivityTaskCompletedByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedByIDResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedByIDResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{11}
}

type RespondActivityTaskFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Failure   *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskFailedRequest) Reset() {
	*x = RespondActivityTaskFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedRequest) ProtoMessage() {}

func (x *RespondActivityTaskFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{12}
}

func (x *RespondActivityTaskFailedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondActivityTaskFailedRequest) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *RespondActivityTaskFailedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskFailedResponse) Reset() {
	*x = RespondActivityTaskFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedResponse) ProtoMessage() {}

func (x *RespondActivityTaskFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{13}
}

type RespondActivityTaskFailedByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId        string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Failure           *Failure           `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity          string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskFailedByIDRequest) Reset() {
	*x = RespondActivityTaskFailedByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedByIDRequest) ProtoMessage() {}

func (x *RespondActivityTaskFailedByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedByIDRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedByIDRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{14}
}

func (x *RespondActivityTaskFailedByIDRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RespondActivityTaskFailedByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RespondActivityTaskFailedByIDRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RespondActivityTaskFailedByIDRequest) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *RespondActivityTaskFailedByIDRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskFailedByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskFailedByIDResponse) Reset() {
	*x = RespondActivityTaskFailedByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedByIDResponse) ProtoMessage() {}

func (x *RespondActivityTaskFailedByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedByIDResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedByIDResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{15}
}

type RespondActivityTaskCanceledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Details   *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskCanceledRequest) Reset() {
	*x = RespondActivityTaskCanceledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledRequest) ProtoMessage() {}

func (x *RespondActivityTaskCanceledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{16}
}

func (x *RespondActivityTaskCanceledRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondActivityTaskCanceledRequest) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RespondActivityTaskCanceledRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskCanceledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCanceledResponse) Reset() {
	*x = RespondActivityTaskCanceledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledResponse) ProtoMessage() {}

func (x *RespondActivityTaskCanceledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{17}
}

type RespondActivityTaskCanceledByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId        string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Details           *Payload           `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity          string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskCanceledByIDRequest) Reset() {
	*x = RespondActivityTaskCanceledByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledByIDRequest) ProtoMessage() {}

func (x *RespondActivityTaskCanceledByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledByIDRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledByIDRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{18}
}

func (x *RespondActivityTaskCanceledByIDRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RespondActivityTaskCanceledByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RespondActivityTaskCanceledByIDRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RespondActivityTaskCanceledByIDRequest) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RespondActivityTaskCanceledByIDRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskCanceledByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCanceledByIDResponse) Reset() {
	*x = RespondActivityTaskCanceledByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledByIDResponse) ProtoMessage() {}

func (x *RespondActivityTaskCanceledByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledByIDResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledByIDResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{19}
}

type RecordActivityTaskHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Details   *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RecordActivityTaskHeartbeatRequest) Reset() {
	*x = RecordActivityTaskHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatRequest) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{20}
}

func (x *RecordActivityTaskHeartbeatRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatRequest) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CancelRequested bool `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
}

func (x *RecordActivityTaskHeartbeatResponse) Reset() {
	*x = RecordActivityTaskHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatResponse) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{21}
}

func (x *RecordActivityTaskHeartbeatResponse) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

type RecordActivityTaskHeartbeatByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId        string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Details           *Payload           `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity          string             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RecordActivityTaskHeartbeatByIDRequest) Reset() {
	*x = RecordActivityTaskHeartbeatByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatByIDRequest) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatByIDRequest.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatByIDRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{22}
}

func (x *RecordActivityTaskHeartbeatByIDRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatByIDRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatByIDRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatByIDRequest) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatByIDRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CancelRequested bool `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
}

func (x *RecordActivityTaskHeartbeatByIDResponse) Reset() {
	*x = RecordActivityTaskHeartbeatByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatByIDResponse) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatByIDResponse.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatByIDResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{23}
}

func (x *RecordActivityTaskHeartbeatByIDResponse) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

type RespondQueryTaskCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken         []byte               `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Result            *WorkflowQueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	WorkerVersionInfo *WorkerVersionInfo   `protobuf:"bytes,3,opt,name=worker_version_info,json=workerVersionInfo,proto3" json:"worker_version_info,omitempty"`
}

func (x *RespondQueryTaskCompletedRequest) Reset() {
	*x = RespondQueryTaskCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondQueryTaskCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondQueryTaskCompletedRequest) ProtoMessage() {}

func (x *RespondQueryTaskCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondQueryTaskCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondQueryTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{24}
}

func (x *RespondQueryTaskCompletedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondQueryTaskCompletedRequest) GetResult() *WorkflowQueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RespondQueryTaskCompletedRequest) GetWorkerVersionInfo() *WorkerVersionInfo {
	if x != nil {
		return x.WorkerVersionInfo
	}
	return nil
}

type RespondQueryTaskCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondQueryTaskCompletedResponse) Reset() {
	*x = RespondQueryTaskCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondQueryTaskCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondQueryTaskCompletedResponse) ProtoMessage() {}

func (x *RespondQueryTaskCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondQueryTaskCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondQueryTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{25}
}

type RequestCancelWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Identity          string             `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId         string             `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *RequestCancelWorkflowExecutionRequest) Reset() {
	*x = RequestCancelWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelWorkflowExecutionRequest) ProtoMessage() {}

func (x *RequestCancelWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*RequestCancelWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{26}
}

func (x *RequestCancelWorkflowExecutionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequestCancelWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RequestCancelWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RequestCancelWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type RequestCancelWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestCancelWorkflowExecutionResponse) Reset() {
	*x = RequestCancelWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelWorkflowExecutionResponse) ProtoMessage() {}

func (x *RequestCancelWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_service_worker_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*RequestCancelWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP(), []int{27}
}

var File_uber_cadence_api_v1_service_worker_proto protoreflect.FileDescriptor

var file_uber_cadence_api_v1_service_worker_proto_rawDesc = []byte{
	0x0a, 0x28, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x75, 0x62, 0x65, 0x72, 0x2f,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x75, 0x62, 0x65, 0x72,
	0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75,
	0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xbd, 0x07, 0x0a, 0x1b, 0x50,
	0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x5e, 0x0a, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x57, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x05, 0x0a, 0x23, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x11, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x10, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x65,
	0x77, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a,
	0x1e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x6f, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x69, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x03, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x6c, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x9f, 0x01, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x1a, 0x7e, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x23, 0x0a,
	0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75,
	0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x08, 0x0a, 0x1b, 0x50, 0x6f, 0x6c, 0x6c, 0x46,
	0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x12, 0x5e, 0x0a, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x69, 0x73, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x26, 0x0a,
	0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x02, 0x0a,
	0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x27, 0x0a, 0x25, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x25, 0x0a, 0x23,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x29, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x22, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x26, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x54, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xdb,
	0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd1, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x8d, 0x10, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x78, 0x0a,
	0x13, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x50, 0x6f,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x2f, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x3c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x39, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x12, 0x37, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x3b, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x37, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x3b, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x56, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x2e, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uber_cadence_api_v1_service_worker_proto_rawDescOnce sync.Once
	file_uber_cadence_api_v1_service_worker_proto_rawDescData = file_uber_cadence_api_v1_service_worker_proto_rawDesc
)

func file_uber_cadence_api_v1_service_worker_proto_rawDescGZIP() []byte {
	file_uber_cadence_api_v1_service_worker_proto_rawDescOnce.Do(func() {
		file_uber_cadence_api_v1_service_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_uber_cadence_api_v1_service_worker_proto_rawDescData)
	})
	return file_uber_cadence_api_v1_service_worker_proto_rawDescData
}

var file_uber_cadence_api_v1_service_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_uber_cadence_api_v1_service_worker_proto_goTypes = []interface{}{
	(*PollForDecisionTaskRequest)(nil),               // 0: uber.cadence.api.v1.PollForDecisionTaskRequest
	(*PollForDecisionTaskResponse)(nil),              // 1: uber.cadence.api.v1.PollForDecisionTaskResponse
	(*RespondDecisionTaskCompletedRequest)(nil),      // 2: uber.cadence.api.v1.RespondDecisionTaskCompletedRequest
	(*RespondDecisionTaskCompletedResponse)(nil),     // 3: uber.cadence.api.v1.RespondDecisionTaskCompletedResponse
	(*RespondDecisionTaskFailedRequest)(nil),         // 4: uber.cadence.api.v1.RespondDecisionTaskFailedRequest
	(*RespondDecisionTaskFailedResponse)(nil),        // 5: uber.cadence.api.v1.RespondDecisionTaskFailedResponse
	(*PollForActivityTaskRequest)(nil),               // 6: uber.cadence.api.v1.PollForActivityTaskRequest
	(*PollForActivityTaskResponse)(nil),              // 7: uber.cadence.api.v1.PollForActivityTaskResponse
	(*RespondActivityTaskCompletedRequest)(nil),      // 8: uber.cadence.api.v1.RespondActivityTaskCompletedRequest
	(*RespondActivityTaskCompletedResponse)(nil),     // 9: uber.cadence.api.v1.RespondActivityTaskCompletedResponse
	(*RespondActivityTaskCompletedByIDRequest)(nil),  // 10: uber.cadence.api.v1.RespondActivityTaskCompletedByIDRequest
	(*RespondActivityTaskCompletedByIDResponse)(nil), // 11: uber.cadence.api.v1.RespondActivityTaskCompletedByIDResponse
	(*RespondActivityTaskFailedRequest)(nil),         // 12: uber.cadence.api.v1.RespondActivityTaskFailedRequest
	(*RespondActivityTaskFailedResponse)(nil),        // 13: uber.cadence.api.v1.RespondActivityTaskFailedResponse
	(*RespondActivityTaskFailedByIDRequest)(nil),     // 14: uber.cadence.api.v1.RespondActivityTaskFailedByIDRequest
	(*RespondActivityTaskFailedByIDResponse)(nil),    // 15: uber.cadence.api.v1.RespondActivityTaskFailedByIDResponse
	(*RespondActivityTaskCanceledRequest)(nil),       // 16: uber.cadence.api.v1.RespondActivityTaskCanceledRequest
	(*RespondActivityTaskCanceledResponse)(nil),      // 17: uber.cadence.api.v1.RespondActivityTaskCanceledResponse
	(*RespondActivityTaskCanceledByIDRequest)(nil),   // 18: uber.cadence.api.v1.RespondActivityTaskCanceledByIDRequest
	(*RespondActivityTaskCanceledByIDResponse)(nil),  // 19: uber.cadence.api.v1.RespondActivityTaskCanceledByIDResponse
	(*RecordActivityTaskHeartbeatRequest)(nil),       // 20: uber.cadence.api.v1.RecordActivityTaskHeartbeatRequest
	(*RecordActivityTaskHeartbeatResponse)(nil),      // 21: uber.cadence.api.v1.RecordActivityTaskHeartbeatResponse
	(*RecordActivityTaskHeartbeatByIDRequest)(nil),   // 22: uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDRequest
	(*RecordActivityTaskHeartbeatByIDResponse)(nil),  // 23: uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDResponse
	(*RespondQueryTaskCompletedRequest)(nil),         // 24: uber.cadence.api.v1.RespondQueryTaskCompletedRequest
	(*RespondQueryTaskCompletedResponse)(nil),        // 25: uber.cadence.api.v1.RespondQueryTaskCompletedResponse
	(*RequestCancelWorkflowExecutionRequest)(nil),    // 26: uber.cadence.api.v1.RequestCancelWorkflowExecutionRequest
	(*RequestCancelWorkflowExecutionResponse)(nil),   // 27: uber.cadence.api.v1.RequestCancelWorkflowExecutionResponse
	nil,                               // 28: uber.cadence.api.v1.PollForDecisionTaskResponse.QueriesEntry
	nil,                               // 29: uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.QueryResultsEntry
	nil,                               // 30: uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.ActivitiesToDispatchLocallyEntry
	(*TaskList)(nil),                  // 31: uber.cadence.api.v1.TaskList
	(*WorkflowExecution)(nil),         // 32: uber.cadence.api.v1.WorkflowExecution
	(*WorkflowType)(nil),              // 33: uber.cadence.api.v1.WorkflowType
	(*History)(nil),                   // 34: uber.cadence.api.v1.History
	(*WorkflowQuery)(nil),             // 35: uber.cadence.api.v1.WorkflowQuery
	(*timestamppb.Timestamp)(nil),     // 36: google.protobuf.Timestamp
	(*Decision)(nil),                  // 37: uber.cadence.api.v1.Decision
	(*StickyExecutionAttributes)(nil), // 38: uber.cadence.api.v1.StickyExecutionAttributes
	(DecisionTaskFailedCause)(0),      // 39: uber.cadence.api.v1.DecisionTaskFailedCause
	(*Payload)(nil),                   // 40: uber.cadence.api.v1.Payload
	(*TaskListMetadata)(nil),          // 41: uber.cadence.api.v1.TaskListMetadata
	(*ActivityType)(nil),              // 42: uber.cadence.api.v1.ActivityType
	(*durationpb.Duration)(nil),       // 43: google.protobuf.Duration
	(*Header)(nil),                    // 44: uber.cadence.api.v1.Header
	(*Failure)(nil),                   // 45: uber.cadence.api.v1.Failure
	(*WorkflowQueryResult)(nil),       // 46: uber.cadence.api.v1.WorkflowQueryResult
	(*WorkerVersionInfo)(nil),         // 47: uber.cadence.api.v1.WorkerVersionInfo
	(*ActivityLocalDispatchInfo)(nil), // 48: uber.cadence.api.v1.ActivityLocalDispatchInfo
}
var file_uber_cadence_api_v1_service_worker_proto_depIdxs = []int32{
	31, // 0: uber.cadence.api.v1.PollForDecisionTaskRequest.task_list:type_name -> uber.cadence.api.v1.TaskList
	32, // 1: uber.cadence.api.v1.PollForDecisionTaskResponse.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	33, // 2: uber.cadence.api.v1.PollForDecisionTaskResponse.workflow_type:type_name -> uber.cadence.api.v1.WorkflowType
	34, // 3: uber.cadence.api.v1.PollForDecisionTaskResponse.history:type_name -> uber.cadence.api.v1.History
	35, // 4: uber.cadence.api.v1.PollForDecisionTaskResponse.query:type_name -> uber.cadence.api.v1.WorkflowQuery
	31, // 5: uber.cadence.api.v1.PollForDecisionTaskResponse.workflow_execution_task_list:type_name -> uber.cadence.api.v1.TaskList
	36, // 6: uber.cadence.api.v1.PollForDecisionTaskResponse.scheduled_time:type_name -> google.protobuf.Timestamp
	36, // 7: uber.cadence.api.v1.PollForDecisionTaskResponse.started_time:type_name -> google.protobuf.Timestamp
	28, // 8: uber.cadence.api.v1.PollForDecisionTaskResponse.queries:type_name -> uber.cadence.api.v1.PollForDecisionTaskResponse.QueriesEntry
	37, // 9: uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.decisions:type_name -> uber.cadence.api.v1.Decision
	38, // 10: uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.sticky_attributes:type_name -> uber.cadence.api.v1.StickyExecutionAttributes
	29, // 11: uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.query_results:type_name -> uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.QueryResultsEntry
	1,  // 12: uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.decision_task:type_name -> uber.cadence.api.v1.PollForDecisionTaskResponse
	30, // 13: uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.activities_to_dispatch_locally:type_name -> uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.ActivitiesToDispatchLocallyEntry
	39, // 14: uber.cadence.api.v1.RespondDecisionTaskFailedRequest.cause:type_name -> uber.cadence.api.v1.DecisionTaskFailedCause
	40, // 15: uber.cadence.api.v1.RespondDecisionTaskFailedRequest.details:type_name -> uber.cadence.api.v1.Payload
	31, // 16: uber.cadence.api.v1.PollForActivityTaskRequest.task_list:type_name -> uber.cadence.api.v1.TaskList
	41, // 17: uber.cadence.api.v1.PollForActivityTaskRequest.task_list_metadata:type_name -> uber.cadence.api.v1.TaskListMetadata
	32, // 18: uber.cadence.api.v1.PollForActivityTaskResponse.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	42, // 19: uber.cadence.api.v1.PollForActivityTaskResponse.activity_type:type_name -> uber.cadence.api.v1.ActivityType
	40, // 20: uber.cadence.api.v1.PollForActivityTaskResponse.input:type_name -> uber.cadence.api.v1.Payload
	36, // 21: uber.cadence.api.v1.PollForActivityTaskResponse.scheduled_time:type_name -> google.protobuf.Timestamp
	36, // 22: uber.cadence.api.v1.PollForActivityTaskResponse.started_time:type_name -> google.protobuf.Timestamp
	43, // 23: uber.cadence.api.v1.PollForActivityTaskResponse.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	43, // 24: uber.cadence.api.v1.PollForActivityTaskResponse.start_to_close_timeout:type_name -> google.protobuf.Duration
	43, // 25: uber.cadence.api.v1.PollForActivityTaskResponse.heartbeat_timeout:type_name -> google.protobuf.Duration
	36, // 26: uber.cadence.api.v1.PollForActivityTaskResponse.scheduled_time_of_this_attempt:type_name -> google.protobuf.Timestamp
	40, // 27: uber.cadence.api.v1.PollForActivityTaskResponse.heartbeat_details:type_name -> uber.cadence.api.v1.Payload
	33, // 28: uber.cadence.api.v1.PollForActivityTaskResponse.workflow_type:type_name -> uber.cadence.api.v1.WorkflowType
	44, // 29: uber.cadence.api.v1.PollForActivityTaskResponse.header:type_name -> uber.cadence.api.v1.Header
	40, // 30: uber.cadence.api.v1.RespondActivityTaskCompletedRequest.result:type_name -> uber.cadence.api.v1.Payload
	32, // 31: uber.cadence.api.v1.RespondActivityTaskCompletedByIDRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	40, // 32: uber.cadence.api.v1.RespondActivityTaskCompletedByIDRequest.result:type_name -> uber.cadence.api.v1.Payload
	45, // 33: uber.cadence.api.v1.RespondActivityTaskFailedRequest.failure:type_name -> uber.cadence.api.v1.Failure
	32, // 34: uber.cadence.api.v1.RespondActivityTaskFailedByIDRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	45, // 35: uber.cadence.api.v1.RespondActivityTaskFailedByIDRequest.failure:type_name -> uber.cadence.api.v1.Failure
	40, // 36: uber.cadence.api.v1.RespondActivityTaskCanceledRequest.details:type_name -> uber.cadence.api.v1.Payload
	32, // 37: uber.cadence.api.v1.RespondActivityTaskCanceledByIDRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	40, // 38: uber.cadence.api.v1.RespondActivityTaskCanceledByIDRequest.details:type_name -> uber.cadence.api.v1.Payload
	40, // 39: uber.cadence.api.v1.RecordActivityTaskHeartbeatRequest.details:type_name -> uber.cadence.api.v1.Payload
	32, // 40: uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	40, // 41: uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDRequest.details:type_name -> uber.cadence.api.v1.Payload
	46, // 42: uber.cadence.api.v1.RespondQueryTaskCompletedRequest.result:type_name -> uber.cadence.api.v1.WorkflowQueryResult
	47, // 43: uber.cadence.api.v1.RespondQueryTaskCompletedRequest.worker_version_info:type_name -> uber.cadence.api.v1.WorkerVersionInfo
	32, // 44: uber.cadence.api.v1.RequestCancelWorkflowExecutionRequest.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	35, // 45: uber.cadence.api.v1.PollForDecisionTaskResponse.QueriesEntry.value:type_name -> uber.cadence.api.v1.WorkflowQuery
	46, // 46: uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.QueryResultsEntry.value:type_name -> uber.cadence.api.v1.WorkflowQueryResult
	48, // 47: uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.ActivitiesToDispatchLocallyEntry.value:type_name -> uber.cadence.api.v1.ActivityLocalDispatchInfo
	0,  // 48: uber.cadence.api.v1.WorkerAPI.PollForDecisionTask:input_type -> uber.cadence.api.v1.PollForDecisionTaskRequest
	2,  // 49: uber.cadence.api.v1.WorkerAPI.RespondDecisionTaskCompleted:input_type -> uber.cadence.api.v1.RespondDecisionTaskCompletedRequest
	4,  // 50: uber.cadence.api.v1.WorkerAPI.RespondDecisionTaskFailed:input_type -> uber.cadence.api.v1.RespondDecisionTaskFailedRequest
	6,  // 51: uber.cadence.api.v1.WorkerAPI.PollForActivityTask:input_type -> uber.cadence.api.v1.PollForActivityTaskRequest
	8,  // 52: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCompleted:input_type -> uber.cadence.api.v1.RespondActivityTaskCompletedRequest
	10, // 53: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCompletedByID:input_type -> uber.cadence.api.v1.RespondActivityTaskCompletedByIDRequest
	12, // 54: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskFailed:input_type -> uber.cadence.api.v1.RespondActivityTaskFailedRequest
	14, // 55: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskFailedByID:input_type -> uber.cadence.api.v1.RespondActivityTaskFailedByIDRequest
	16, // 56: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCanceled:input_type -> uber.cadence.api.v1.RespondActivityTaskCanceledRequest
	18, // 57: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCanceledByID:input_type -> uber.cadence.api.v1.RespondActivityTaskCanceledByIDRequest
	20, // 58: uber.cadence.api.v1.WorkerAPI.RecordActivityTaskHeartbeat:input_type -> uber.cadence.api.v1.RecordActivityTaskHeartbeatRequest
	22, // 59: uber.cadence.api.v1.WorkerAPI.RecordActivityTaskHeartbeatByID:input_type -> uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDRequest
	24, // 60: uber.cadence.api.v1.WorkerAPI.RespondQueryTaskCompleted:input_type -> uber.cadence.api.v1.RespondQueryTaskCompletedRequest
	26, // 61: uber.cadence.api.v1.WorkerAPI.RequestCancelWorkflowExecution:input_type -> uber.cadence.api.v1.RequestCancelWorkflowExecutionRequest
	1,  // 62: uber.cadence.api.v1.WorkerAPI.PollForDecisionTask:output_type -> uber.cadence.api.v1.PollForDecisionTaskResponse
	3,  // 63: uber.cadence.api.v1.WorkerAPI.RespondDecisionTaskCompleted:output_type -> uber.cadence.api.v1.RespondDecisionTaskCompletedResponse
	5,  // 64: uber.cadence.api.v1.WorkerAPI.RespondDecisionTaskFailed:output_type -> uber.cadence.api.v1.RespondDecisionTaskFailedResponse
	7,  // 65: uber.cadence.api.v1.WorkerAPI.PollForActivityTask:output_type -> uber.cadence.api.v1.PollForActivityTaskResponse
	9,  // 66: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCompleted:output_type -> uber.cadence.api.v1.RespondActivityTaskCompletedResponse
	11, // 67: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCompletedByID:output_type -> uber.cadence.api.v1.RespondActivityTaskCompletedByIDResponse
	13, // 68: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskFailed:output_type -> uber.cadence.api.v1.RespondActivityTaskFailedResponse
	15, // 69: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskFailedByID:output_type -> uber.cadence.api.v1.RespondActivityTaskFailedByIDResponse
	17, // 70: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCanceled:output_type -> uber.cadence.api.v1.RespondActivityTaskCanceledResponse
	19, // 71: uber.cadence.api.v1.WorkerAPI.RespondActivityTaskCanceledByID:output_type -> uber.cadence.api.v1.RespondActivityTaskCanceledByIDResponse
	21, // 72: uber.cadence.api.v1.WorkerAPI.RecordActivityTaskHeartbeat:output_type -> uber.cadence.api.v1.RecordActivityTaskHeartbeatResponse
	23, // 73: uber.cadence.api.v1.WorkerAPI.RecordActivityTaskHeartbeatByID:output_type -> uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDResponse
	25, // 74: uber.cadence.api.v1.WorkerAPI.RespondQueryTaskCompleted:output_type -> uber.cadence.api.v1.RespondQueryTaskCompletedResponse
	27, // 75: uber.cadence.api.v1.WorkerAPI.RequestCancelWorkflowExecution:output_type -> uber.cadence.api.v1.RequestCancelWorkflowExecutionResponse
	62, // [62:76] is the sub-list for method output_type
	48, // [48:62] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_uber_cadence_api_v1_service_worker_proto_init() }
func file_uber_cadence_api_v1_service_worker_proto_init() {
	if File_uber_cadence_api_v1_service_worker_proto != nil {
		return
	}
	file_uber_cadence_api_v1_common_proto_init()
	file_uber_cadence_api_v1_decision_proto_init()
	file_uber_cadence_api_v1_history_proto_init()
	file_uber_cadence_api_v1_query_proto_init()
	file_uber_cadence_api_v1_tasklist_proto_init()
	file_uber_cadence_api_v1_workflow_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollForDecisionTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollForDecisionTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondDecisionTaskCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondDecisionTaskCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondDecisionTaskFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondDecisionTaskFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollForActivityTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollForActivityTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondQueryTaskCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondQueryTaskCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_service_worker_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uber_cadence_api_v1_service_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uber_cadence_api_v1_service_worker_proto_goTypes,
		DependencyIndexes: file_uber_cadence_api_v1_service_worker_proto_depIdxs,
		MessageInfos:      file_uber_cadence_api_v1_service_worker_proto_msgTypes,
	}.Build()
	File_uber_cadence_api_v1_service_worker_proto = out.File
	file_uber_cadence_api_v1_service_worker_proto_rawDesc = nil
	file_uber_cadence_api_v1_service_worker_proto_goTypes = nil
	file_uber_cadence_api_v1_service_worker_proto_depIdxs = nil
}
