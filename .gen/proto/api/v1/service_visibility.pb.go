// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/service_visibility.proto

package apiv1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListWorkflowExecutionsRequest struct {
	Domain        string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *ListWorkflowExecutionsRequest) Reset()      { *m = ListWorkflowExecutionsRequest{} }
func (*ListWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{0}
}
func (m *ListWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *ListWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ListWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListWorkflowExecutionsResponse) Reset()      { *m = ListWorkflowExecutionsResponse{} }
func (*ListWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{1}
}
func (m *ListWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListWorkflowExecutionsResponse) GetExecutions() []*WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListOpenWorkflowExecutionsRequest struct {
	Domain          string           `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize        int32            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken   []byte           `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	StartTimeFilter *StartTimeFilter `protobuf:"bytes,4,opt,name=start_time_filter,json=startTimeFilter,proto3" json:"start_time_filter,omitempty"`
	// Types that are valid to be assigned to Filters:
	//	*ListOpenWorkflowExecutionsRequest_ExecutionFilter
	//	*ListOpenWorkflowExecutionsRequest_TypeFilter
	Filters isListOpenWorkflowExecutionsRequest_Filters `protobuf_oneof:"filters"`
}

func (m *ListOpenWorkflowExecutionsRequest) Reset()      { *m = ListOpenWorkflowExecutionsRequest{} }
func (*ListOpenWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListOpenWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{2}
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOpenWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListOpenWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenWorkflowExecutionsRequest proto.InternalMessageInfo

type isListOpenWorkflowExecutionsRequest_Filters interface {
	isListOpenWorkflowExecutionsRequest_Filters()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListOpenWorkflowExecutionsRequest_ExecutionFilter struct {
	ExecutionFilter *WorkflowExecutionFilter `protobuf:"bytes,5,opt,name=execution_filter,json=executionFilter,proto3,oneof" json:"execution_filter,omitempty"`
}
type ListOpenWorkflowExecutionsRequest_TypeFilter struct {
	TypeFilter *WorkflowTypeFilter `protobuf:"bytes,6,opt,name=type_filter,json=typeFilter,proto3,oneof" json:"type_filter,omitempty"`
}

func (*ListOpenWorkflowExecutionsRequest_ExecutionFilter) isListOpenWorkflowExecutionsRequest_Filters() {
}
func (*ListOpenWorkflowExecutionsRequest_TypeFilter) isListOpenWorkflowExecutionsRequest_Filters() {}

func (m *ListOpenWorkflowExecutionsRequest) GetFilters() isListOpenWorkflowExecutionsRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListOpenWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListOpenWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetStartTimeFilter() *StartTimeFilter {
	if m != nil {
		return m.StartTimeFilter
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetExecutionFilter() *WorkflowExecutionFilter {
	if x, ok := m.GetFilters().(*ListOpenWorkflowExecutionsRequest_ExecutionFilter); ok {
		return x.ExecutionFilter
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetTypeFilter() *WorkflowTypeFilter {
	if x, ok := m.GetFilters().(*ListOpenWorkflowExecutionsRequest_TypeFilter); ok {
		return x.TypeFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListOpenWorkflowExecutionsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListOpenWorkflowExecutionsRequest_ExecutionFilter)(nil),
		(*ListOpenWorkflowExecutionsRequest_TypeFilter)(nil),
	}
}

type ListOpenWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListOpenWorkflowExecutionsResponse) Reset()      { *m = ListOpenWorkflowExecutionsResponse{} }
func (*ListOpenWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListOpenWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{3}
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOpenWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListOpenWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListOpenWorkflowExecutionsResponse) GetExecutions() []*WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListClosedWorkflowExecutionsRequest struct {
	Domain          string           `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize        int32            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken   []byte           `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	StartTimeFilter *StartTimeFilter `protobuf:"bytes,4,opt,name=start_time_filter,json=startTimeFilter,proto3" json:"start_time_filter,omitempty"`
	// Types that are valid to be assigned to Filters:
	//	*ListClosedWorkflowExecutionsRequest_ExecutionFilter
	//	*ListClosedWorkflowExecutionsRequest_TypeFilter
	//	*ListClosedWorkflowExecutionsRequest_StatusFilter
	Filters isListClosedWorkflowExecutionsRequest_Filters `protobuf_oneof:"filters"`
}

func (m *ListClosedWorkflowExecutionsRequest) Reset()      { *m = ListClosedWorkflowExecutionsRequest{} }
func (*ListClosedWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListClosedWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{4}
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClosedWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClosedWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClosedWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClosedWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClosedWorkflowExecutionsRequest proto.InternalMessageInfo

type isListClosedWorkflowExecutionsRequest_Filters interface {
	isListClosedWorkflowExecutionsRequest_Filters()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListClosedWorkflowExecutionsRequest_ExecutionFilter struct {
	ExecutionFilter *WorkflowExecutionFilter `protobuf:"bytes,5,opt,name=execution_filter,json=executionFilter,proto3,oneof" json:"execution_filter,omitempty"`
}
type ListClosedWorkflowExecutionsRequest_TypeFilter struct {
	TypeFilter *WorkflowTypeFilter `protobuf:"bytes,6,opt,name=type_filter,json=typeFilter,proto3,oneof" json:"type_filter,omitempty"`
}
type ListClosedWorkflowExecutionsRequest_StatusFilter struct {
	StatusFilter *StatusFilter `protobuf:"bytes,7,opt,name=status_filter,json=statusFilter,proto3,oneof" json:"status_filter,omitempty"`
}

func (*ListClosedWorkflowExecutionsRequest_ExecutionFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}
func (*ListClosedWorkflowExecutionsRequest_TypeFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}
func (*ListClosedWorkflowExecutionsRequest_StatusFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}

func (m *ListClosedWorkflowExecutionsRequest) GetFilters() isListClosedWorkflowExecutionsRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListClosedWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClosedWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetStartTimeFilter() *StartTimeFilter {
	if m != nil {
		return m.StartTimeFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetExecutionFilter() *WorkflowExecutionFilter {
	if x, ok := m.GetFilters().(*ListClosedWorkflowExecutionsRequest_ExecutionFilter); ok {
		return x.ExecutionFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetTypeFilter() *WorkflowTypeFilter {
	if x, ok := m.GetFilters().(*ListClosedWorkflowExecutionsRequest_TypeFilter); ok {
		return x.TypeFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetStatusFilter() *StatusFilter {
	if x, ok := m.GetFilters().(*ListClosedWorkflowExecutionsRequest_StatusFilter); ok {
		return x.StatusFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListClosedWorkflowExecutionsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListClosedWorkflowExecutionsRequest_ExecutionFilter)(nil),
		(*ListClosedWorkflowExecutionsRequest_TypeFilter)(nil),
		(*ListClosedWorkflowExecutionsRequest_StatusFilter)(nil),
	}
}

type ListClosedWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListClosedWorkflowExecutionsResponse) Reset()      { *m = ListClosedWorkflowExecutionsResponse{} }
func (*ListClosedWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListClosedWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{5}
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClosedWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClosedWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListClosedWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClosedWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClosedWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListClosedWorkflowExecutionsResponse) GetExecutions() []*WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListArchivedWorkflowExecutionsRequest struct {
	Domain        string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *ListArchivedWorkflowExecutionsRequest) Reset()      { *m = ListArchivedWorkflowExecutionsRequest{} }
func (*ListArchivedWorkflowExecutionsRequest) ProtoMessage() {}
func (*ListArchivedWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{6}
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListArchivedWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArchivedWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListArchivedWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArchivedWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListArchivedWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *ListArchivedWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ListArchivedWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListArchivedWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListArchivedWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ListArchivedWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListArchivedWorkflowExecutionsResponse) Reset() {
	*m = ListArchivedWorkflowExecutionsResponse{}
}
func (*ListArchivedWorkflowExecutionsResponse) ProtoMessage() {}
func (*ListArchivedWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{7}
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListArchivedWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArchivedWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListArchivedWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArchivedWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListArchivedWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ListArchivedWorkflowExecutionsResponse) GetExecutions() []*WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ListArchivedWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ScanWorkflowExecutionsRequest struct {
	Domain        string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *ScanWorkflowExecutionsRequest) Reset()      { *m = ScanWorkflowExecutionsRequest{} }
func (*ScanWorkflowExecutionsRequest) ProtoMessage() {}
func (*ScanWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{8}
}
func (m *ScanWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanWorkflowExecutionsRequest.Merge(m, src)
}
func (m *ScanWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScanWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *ScanWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ScanWorkflowExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ScanWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ScanWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ScanWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ScanWorkflowExecutionsResponse) Reset()      { *m = ScanWorkflowExecutionsResponse{} }
func (*ScanWorkflowExecutionsResponse) ProtoMessage() {}
func (*ScanWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{9}
}
func (m *ScanWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanWorkflowExecutionsResponse.Merge(m, src)
}
func (m *ScanWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScanWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *ScanWorkflowExecutionsResponse) GetExecutions() []*WorkflowExecutionInfo {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *ScanWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type CountWorkflowExecutionsRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Query  string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *CountWorkflowExecutionsRequest) Reset()      { *m = CountWorkflowExecutionsRequest{} }
func (*CountWorkflowExecutionsRequest) ProtoMessage() {}
func (*CountWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{10}
}
func (m *CountWorkflowExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountWorkflowExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountWorkflowExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountWorkflowExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountWorkflowExecutionsRequest.Merge(m, src)
}
func (m *CountWorkflowExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountWorkflowExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountWorkflowExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountWorkflowExecutionsRequest proto.InternalMessageInfo

func (m *CountWorkflowExecutionsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CountWorkflowExecutionsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type CountWorkflowExecutionsResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CountWorkflowExecutionsResponse) Reset()      { *m = CountWorkflowExecutionsResponse{} }
func (*CountWorkflowExecutionsResponse) ProtoMessage() {}
func (*CountWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{11}
}
func (m *CountWorkflowExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountWorkflowExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountWorkflowExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountWorkflowExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountWorkflowExecutionsResponse.Merge(m, src)
}
func (m *CountWorkflowExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountWorkflowExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountWorkflowExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountWorkflowExecutionsResponse proto.InternalMessageInfo

func (m *CountWorkflowExecutionsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetSearchAttributesRequest struct {
}

func (m *GetSearchAttributesRequest) Reset()      { *m = GetSearchAttributesRequest{} }
func (*GetSearchAttributesRequest) ProtoMessage() {}
func (*GetSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{12}
}
func (m *GetSearchAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSearchAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSearchAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSearchAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSearchAttributesRequest.Merge(m, src)
}
func (m *GetSearchAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSearchAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSearchAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSearchAttributesRequest proto.InternalMessageInfo

type GetSearchAttributesResponse struct {
	Keys map[string]IndexedValueType `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=uber.cadence.api.v1.IndexedValueType"`
}

func (m *GetSearchAttributesResponse) Reset()      { *m = GetSearchAttributesResponse{} }
func (*GetSearchAttributesResponse) ProtoMessage() {}
func (*GetSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7341dc69cef4364, []int{13}
}
func (m *GetSearchAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSearchAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSearchAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSearchAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSearchAttributesResponse.Merge(m, src)
}
func (m *GetSearchAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSearchAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSearchAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSearchAttributesResponse proto.InternalMessageInfo

func (m *GetSearchAttributesResponse) GetKeys() map[string]IndexedValueType {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*ListWorkflowExecutionsRequest)(nil), "uber.cadence.api.v1.ListWorkflowExecutionsRequest")
	proto.RegisterType((*ListWorkflowExecutionsResponse)(nil), "uber.cadence.api.v1.ListWorkflowExecutionsResponse")
	proto.RegisterType((*ListOpenWorkflowExecutionsRequest)(nil), "uber.cadence.api.v1.ListOpenWorkflowExecutionsRequest")
	proto.RegisterType((*ListOpenWorkflowExecutionsResponse)(nil), "uber.cadence.api.v1.ListOpenWorkflowExecutionsResponse")
	proto.RegisterType((*ListClosedWorkflowExecutionsRequest)(nil), "uber.cadence.api.v1.ListClosedWorkflowExecutionsRequest")
	proto.RegisterType((*ListClosedWorkflowExecutionsResponse)(nil), "uber.cadence.api.v1.ListClosedWorkflowExecutionsResponse")
	proto.RegisterType((*ListArchivedWorkflowExecutionsRequest)(nil), "uber.cadence.api.v1.ListArchivedWorkflowExecutionsRequest")
	proto.RegisterType((*ListArchivedWorkflowExecutionsResponse)(nil), "uber.cadence.api.v1.ListArchivedWorkflowExecutionsResponse")
	proto.RegisterType((*ScanWorkflowExecutionsRequest)(nil), "uber.cadence.api.v1.ScanWorkflowExecutionsRequest")
	proto.RegisterType((*ScanWorkflowExecutionsResponse)(nil), "uber.cadence.api.v1.ScanWorkflowExecutionsResponse")
	proto.RegisterType((*CountWorkflowExecutionsRequest)(nil), "uber.cadence.api.v1.CountWorkflowExecutionsRequest")
	proto.RegisterType((*CountWorkflowExecutionsResponse)(nil), "uber.cadence.api.v1.CountWorkflowExecutionsResponse")
	proto.RegisterType((*GetSearchAttributesRequest)(nil), "uber.cadence.api.v1.GetSearchAttributesRequest")
	proto.RegisterType((*GetSearchAttributesResponse)(nil), "uber.cadence.api.v1.GetSearchAttributesResponse")
	proto.RegisterMapType((map[string]IndexedValueType)(nil), "uber.cadence.api.v1.GetSearchAttributesResponse.KeysEntry")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/api/v1/service_visibility.proto", fileDescriptor_a7341dc69cef4364)
}

var fileDescriptor_a7341dc69cef4364 = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4f, 0x8f, 0xdb, 0x54,
	0x10, 0xcf, 0xdb, 0x34, 0xbb, 0xdd, 0xd9, 0x2e, 0x5b, 0x5e, 0xab, 0x36, 0x72, 0x8b, 0x49, 0xcd,
	0xb6, 0x44, 0xa8, 0x4a, 0xd8, 0x14, 0xd1, 0xb2, 0x3d, 0x65, 0xab, 0x42, 0xb7, 0xa0, 0x12, 0x39,
	0xab, 0x22, 0x38, 0x10, 0x1c, 0x67, 0xb6, 0x7d, 0x4a, 0x62, 0xbb, 0x7e, 0xcf, 0x69, 0xdc, 0x13,
	0x48, 0xbd, 0x22, 0x21, 0xe0, 0x00, 0x15, 0x1f, 0x80, 0x8f, 0xc2, 0x05, 0x29, 0xc7, 0x8a, 0x13,
	0x9b, 0xbd, 0x70, 0xec, 0x47, 0x40, 0xfe, 0x13, 0x2b, 0x85, 0x67, 0x67, 0xb3, 0x07, 0xc2, 0xa1,
	0xb7, 0xcc, 0x64, 0xe6, 0xf7, 0x7e, 0x33, 0x1e, 0xff, 0xde, 0x18, 0xae, 0x7a, 0x6d, 0x74, 0xab,
	0xa6, 0xd1, 0x41, 0xcb, 0xc4, 0xaa, 0xe1, 0xb0, 0xea, 0x60, 0xab, 0xca, 0xd1, 0x1d, 0x30, 0x13,
	0x5b, 0x03, 0xc6, 0x59, 0x9b, 0xf5, 0x98, 0xf0, 0x2b, 0x8e, 0x6b, 0x0b, 0x9b, 0x9e, 0x09, 0xa2,
	0x2b, 0x71, 0x74, 0xc5, 0x70, 0x58, 0x65, 0xb0, 0xa5, 0x6c, 0xca, 0x20, 0xfe, 0x99, 0xaa, 0x68,
	0xb2, 0xa8, 0xc7, 0xb6, 0xdb, 0xdd, 0xef, 0xd9, 0x8f, 0xa3, 0x18, 0xed, 0x7b, 0x02, 0x6f, 0x7c,
	0xc2, 0xb8, 0xf8, 0x2c, 0x76, 0xdf, 0x1e, 0xa2, 0xe9, 0x09, 0x66, 0x5b, 0x5c, 0xc7, 0x47, 0x1e,
	0x72, 0x41, 0xcf, 0xc1, 0x72, 0xc7, 0xee, 0x1b, 0xcc, 0x2a, 0x92, 0x12, 0x29, 0xaf, 0xea, 0xb1,
	0x45, 0x2f, 0xc0, 0xaa, 0x63, 0x3c, 0xc0, 0x16, 0x67, 0x4f, 0xb0, 0xb8, 0x54, 0x22, 0xe5, 0x82,
	0x7e, 0x32, 0x70, 0x34, 0xd9, 0x13, 0xa4, 0x57, 0x60, 0xc3, 0xc2, 0xa1, 0x68, 0x85, 0x11, 0xc2,
	0xee, 0xa2, 0x55, 0xcc, 0x97, 0x48, 0xf9, 0x94, 0xbe, 0x1e, 0xb8, 0x1b, 0xc6, 0x03, 0xdc, 0x0b,
	0x9c, 0xf4, 0x2c, 0x14, 0x1e, 0x79, 0xe8, 0xfa, 0xc5, 0x13, 0x21, 0x76, 0x64, 0x68, 0x3f, 0x12,
	0x50, 0xd3, 0x48, 0x71, 0xc7, 0xb6, 0x38, 0xd2, 0xbb, 0x00, 0x98, 0x78, 0x8b, 0xa4, 0x94, 0x2f,
	0xaf, 0xd5, 0xde, 0xa9, 0x48, 0x7a, 0x55, 0xf9, 0x17, 0xc8, 0xae, 0xb5, 0x6f, 0xeb, 0x53, 0xd9,
	0x32, 0xb2, 0x4b, 0x12, 0xb2, 0xda, 0xd3, 0x3c, 0x5c, 0x0a, 0x68, 0x7d, 0xea, 0xa0, 0xb5, 0xa0,
	0x7e, 0x35, 0xe0, 0x75, 0x2e, 0x0c, 0x57, 0xb4, 0x04, 0xeb, 0x63, 0x6b, 0x9f, 0xf5, 0x04, 0xba,
	0x61, 0xef, 0xd6, 0x6a, 0x9b, 0xd2, 0xea, 0x9b, 0x41, 0xf4, 0x1e, 0xeb, 0xe3, 0x87, 0x61, 0xac,
	0xbe, 0xc1, 0x5f, 0x76, 0xd0, 0xcf, 0xe1, 0x74, 0xd2, 0x8a, 0x09, 0x60, 0x21, 0x04, 0xbc, 0x7a,
	0xb4, 0x76, 0x46, 0x38, 0x77, 0x72, 0xfa, 0x06, 0xbe, 0xec, 0xa2, 0x77, 0x61, 0x4d, 0xf8, 0x4e,
	0x42, 0x73, 0x39, 0x44, 0x7d, 0x3b, 0x13, 0x75, 0xcf, 0x77, 0x30, 0x01, 0x04, 0x91, 0x58, 0x3b,
	0xab, 0xb0, 0x12, 0xc1, 0x70, 0xed, 0x27, 0x02, 0x5a, 0xd6, 0x63, 0x58, 0xe0, 0x84, 0x8c, 0xf2,
	0xf0, 0x56, 0x40, 0xed, 0x56, 0xcf, 0xe6, 0xd8, 0x79, 0x35, 0x23, 0xff, 0xe9, 0x8c, 0xd0, 0x3b,
	0xb0, 0xce, 0x85, 0x21, 0x3c, 0x3e, 0x41, 0x5b, 0x09, 0xd1, 0x2e, 0xa5, 0x15, 0x2d, 0x3c, 0x9e,
	0xe0, 0x9c, 0xe2, 0x53, 0xf6, 0xf4, 0xb4, 0x3d, 0x23, 0xb0, 0x99, 0xfd, 0x48, 0x17, 0x38, 0x6f,
	0xcf, 0x08, 0x5c, 0x0e, 0xc8, 0xd5, 0x5d, 0xf3, 0x21, 0x1b, 0x2c, 0x6c, 0xe2, 0xe4, 0x2a, 0xfe,
	0x0b, 0x81, 0x2b, 0xb3, 0xc8, 0x2d, 0xb0, 0x77, 0xc1, 0xcd, 0xd7, 0x34, 0x0d, 0xeb, 0x7f, 0x77,
	0xf3, 0xa5, 0x91, 0x5a, 0x60, 0xaf, 0xee, 0x81, 0x7a, 0xcb, 0xf6, 0xac, 0x63, 0x6c, 0x09, 0x49,
	0x99, 0x4b, 0xd3, 0x65, 0x5e, 0x87, 0x37, 0x53, 0xf1, 0xe2, 0x32, 0xcf, 0x42, 0xc1, 0x0c, 0x42,
	0x42, 0xbc, 0xbc, 0x1e, 0x19, 0xda, 0x45, 0x50, 0x3e, 0x42, 0xd1, 0x44, 0xc3, 0x35, 0x1f, 0xd6,
	0x85, 0x70, 0x59, 0xdb, 0x13, 0x38, 0x21, 0xa1, 0xfd, 0x4e, 0xe0, 0x82, 0xf4, 0xef, 0x18, 0xf3,
	0x1e, 0x9c, 0xe8, 0xa2, 0x3f, 0x69, 0xda, 0xb6, 0xb4, 0x69, 0x19, 0xf9, 0x95, 0x8f, 0xd1, 0xe7,
	0xb7, 0x2d, 0xe1, 0xfa, 0x7a, 0x88, 0xa3, 0x7c, 0x09, 0xab, 0x89, 0x8b, 0x9e, 0x86, 0x7c, 0x17,
	0xfd, 0xb8, 0xfc, 0xe0, 0x27, 0xbd, 0x09, 0x85, 0x81, 0xd1, 0xf3, 0xa2, 0x19, 0x79, 0xad, 0x76,
	0x59, 0x7a, 0xde, 0xae, 0xd5, 0xc1, 0x21, 0x76, 0xee, 0x07, 0x81, 0x81, 0xb2, 0xe9, 0x51, 0xce,
	0xf6, 0xd2, 0x0d, 0x52, 0xfb, 0x63, 0x05, 0xd6, 0xef, 0x27, 0x5b, 0x5d, 0xbd, 0xb1, 0x4b, 0xbf,
	0x21, 0x70, 0x4e, 0xbe, 0x19, 0xd1, 0x9a, 0x14, 0x3e, 0x73, 0xb7, 0x53, 0xae, 0xcd, 0x95, 0x13,
	0x77, 0xf1, 0x5b, 0x02, 0x4a, 0xfa, 0xfd, 0x4b, 0xdf, 0x4f, 0xc5, 0xcc, 0xdc, 0x9b, 0x94, 0xeb,
	0x73, 0xe7, 0xc5, 0x7c, 0x7e, 0x20, 0x70, 0x31, 0x4b, 0xa1, 0xe9, 0x8d, 0x54, 0xe4, 0x19, 0xf7,
	0xb4, 0xf2, 0xc1, 0x31, 0x32, 0x63, 0x56, 0x3f, 0xc7, 0x3b, 0x6c, 0xba, 0xfa, 0xd1, 0xed, 0x54,
	0xf4, 0x99, 0x7a, 0xae, 0xdc, 0x3c, 0x56, 0x6e, 0xcc, 0x2d, 0x98, 0x22, 0xb9, 0xca, 0xa4, 0x4c,
	0x51, 0xa6, 0x4e, 0xa6, 0x4c, 0xd1, 0x0c, 0x19, 0x7b, 0x4a, 0xe0, 0x7c, 0x8a, 0x06, 0x50, 0x39,
	0x60, 0xb6, 0x02, 0x29, 0xef, 0xcd, 0x97, 0x14, 0xd3, 0x18, 0xc2, 0x19, 0xc9, 0x1b, 0x4f, 0xab,
	0x47, 0xd7, 0x86, 0xe8, 0xf4, 0x77, 0xe7, 0x15, 0x93, 0x9d, 0xaf, 0x46, 0x07, 0x6a, 0xee, 0xf9,
	0x81, 0x9a, 0x7b, 0x71, 0xa0, 0x92, 0xaf, 0xc7, 0x2a, 0xf9, 0x75, 0xac, 0x92, 0xdf, 0xc6, 0x2a,
	0x19, 0x8d, 0x55, 0xf2, 0xe7, 0x58, 0x25, 0x7f, 0x8d, 0xd5, 0xdc, 0x8b, 0xb1, 0x4a, 0xbe, 0x3b,
	0x54, 0x73, 0xa3, 0x43, 0x35, 0xf7, 0xfc, 0x50, 0xcd, 0xc1, 0x79, 0xd3, 0xee, 0xcb, 0x8e, 0xda,
	0x39, 0x59, 0x77, 0x58, 0x23, 0xf8, 0xa4, 0x6b, 0x90, 0x2f, 0x0a, 0x86, 0xc3, 0x06, 0x5b, 0xed,
	0xe5, 0xf0, 0x13, 0xef, 0xda, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x5e, 0x80, 0x79, 0x71,
	0x0e, 0x00, 0x00,
}

func (this *ListWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *ListWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if !this.StartTimeFilter.Equal(that1.StartTimeFilter) {
		return false
	}
	if that1.Filters == nil {
		if this.Filters != nil {
			return false
		}
	} else if this.Filters == nil {
		return false
	} else if !this.Filters.Equal(that1.Filters) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsRequest_ExecutionFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsRequest_ExecutionFilter)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsRequest_ExecutionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecutionFilter.Equal(that1.ExecutionFilter) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsRequest_TypeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsRequest_TypeFilter)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsRequest_TypeFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypeFilter.Equal(that1.TypeFilter) {
		return false
	}
	return true
}
func (this *ListOpenWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOpenWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListOpenWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if !this.StartTimeFilter.Equal(that1.StartTimeFilter) {
		return false
	}
	if that1.Filters == nil {
		if this.Filters != nil {
			return false
		}
	} else if this.Filters == nil {
		return false
	} else if !this.Filters.Equal(that1.Filters) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest_ExecutionFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest_ExecutionFilter)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest_ExecutionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecutionFilter.Equal(that1.ExecutionFilter) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest_TypeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest_TypeFilter)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest_TypeFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypeFilter.Equal(that1.TypeFilter) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsRequest_StatusFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsRequest_StatusFilter)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsRequest_StatusFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StatusFilter.Equal(that1.StatusFilter) {
		return false
	}
	return true
}
func (this *ListClosedWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClosedWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListClosedWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListArchivedWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListArchivedWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ListArchivedWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *ListArchivedWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListArchivedWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ListArchivedWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ScanWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(ScanWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *ScanWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(ScanWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *CountWorkflowExecutionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountWorkflowExecutionsRequest)
	if !ok {
		that2, ok := that.(CountWorkflowExecutionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *CountWorkflowExecutionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountWorkflowExecutionsResponse)
	if !ok {
		that2, ok := that.(CountWorkflowExecutionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GetSearchAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSearchAttributesRequest)
	if !ok {
		that2, ok := that.(GetSearchAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSearchAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSearchAttributesResponse)
	if !ok {
		that2, ok := that.(GetSearchAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if this.Keys[i] != that1.Keys[i] {
			return false
		}
	}
	return true
}
func (this *ListWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.ListWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ListWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOpenWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&apiv1.ListOpenWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	if this.StartTimeFilter != nil {
		s = append(s, "StartTimeFilter: "+fmt.Sprintf("%#v", this.StartTimeFilter)+",\n")
	}
	if this.Filters != nil {
		s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOpenWorkflowExecutionsRequest_ExecutionFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.ListOpenWorkflowExecutionsRequest_ExecutionFilter{` +
		`ExecutionFilter:` + fmt.Sprintf("%#v", this.ExecutionFilter) + `}`}, ", ")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest_TypeFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.ListOpenWorkflowExecutionsRequest_TypeFilter{` +
		`TypeFilter:` + fmt.Sprintf("%#v", this.TypeFilter) + `}`}, ", ")
	return s
}
func (this *ListOpenWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ListOpenWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListClosedWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&apiv1.ListClosedWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	if this.StartTimeFilter != nil {
		s = append(s, "StartTimeFilter: "+fmt.Sprintf("%#v", this.StartTimeFilter)+",\n")
	}
	if this.Filters != nil {
		s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListClosedWorkflowExecutionsRequest_ExecutionFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.ListClosedWorkflowExecutionsRequest_ExecutionFilter{` +
		`ExecutionFilter:` + fmt.Sprintf("%#v", this.ExecutionFilter) + `}`}, ", ")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_TypeFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.ListClosedWorkflowExecutionsRequest_TypeFilter{` +
		`TypeFilter:` + fmt.Sprintf("%#v", this.TypeFilter) + `}`}, ", ")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_StatusFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.ListClosedWorkflowExecutionsRequest_StatusFilter{` +
		`StatusFilter:` + fmt.Sprintf("%#v", this.StatusFilter) + `}`}, ", ")
	return s
}
func (this *ListClosedWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ListClosedWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListArchivedWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.ListArchivedWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListArchivedWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ListArchivedWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.ScanWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ScanWorkflowExecutionsResponse{")
	if this.Executions != nil {
		s = append(s, "Executions: "+fmt.Sprintf("%#v", this.Executions)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountWorkflowExecutionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.CountWorkflowExecutionsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountWorkflowExecutionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.CountWorkflowExecutionsResponse{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSearchAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.GetSearchAttributesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSearchAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.GetSearchAttributesResponse{")
	keysForKeys := make([]string, 0, len(this.Keys))
	for k, _ := range this.Keys {
		keysForKeys = append(keysForKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKeys)
	mapStringForKeys := "map[string]IndexedValueType{"
	for _, k := range keysForKeys {
		mapStringForKeys += fmt.Sprintf("%#v: %#v,", k, this.Keys[k])
	}
	mapStringForKeys += "}"
	if this.Keys != nil {
		s = append(s, "Keys: "+mapStringForKeys+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringServiceVisibility(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VisibilityAPIClient is the client API for VisibilityAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VisibilityAPIClient interface {
	// ListWorkflowExecutions is a visibility API to list workflow executions in a specific domain.
	ListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionsResponse, error)
	// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific domain.
	ListOpenWorkflowExecutions(ctx context.Context, in *ListOpenWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListOpenWorkflowExecutionsResponse, error)
	// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific domain.
	ListClosedWorkflowExecutions(ctx context.Context, in *ListClosedWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListClosedWorkflowExecutionsResponse, error)
	// ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific domain.
	ListArchivedWorkflowExecutions(ctx context.Context, in *ListArchivedWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListArchivedWorkflowExecutionsResponse, error)
	// ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific domain without order.
	ScanWorkflowExecutions(ctx context.Context, in *ScanWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ScanWorkflowExecutionsResponse, error)
	// CountWorkflowExecutions is a visibility API to count of workflow executions in a specific domain.
	CountWorkflowExecutions(ctx context.Context, in *CountWorkflowExecutionsRequest, opts ...grpc.CallOption) (*CountWorkflowExecutionsResponse, error)
	// GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs.
	GetSearchAttributes(ctx context.Context, in *GetSearchAttributesRequest, opts ...grpc.CallOption) (*GetSearchAttributesResponse, error)
}

type visibilityAPIClient struct {
	cc *grpc.ClientConn
}

func NewVisibilityAPIClient(cc *grpc.ClientConn) VisibilityAPIClient {
	return &visibilityAPIClient{cc}
}

func (c *visibilityAPIClient) ListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionsResponse, error) {
	out := new(ListWorkflowExecutionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/ListWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityAPIClient) ListOpenWorkflowExecutions(ctx context.Context, in *ListOpenWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListOpenWorkflowExecutionsResponse, error) {
	out := new(ListOpenWorkflowExecutionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/ListOpenWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityAPIClient) ListClosedWorkflowExecutions(ctx context.Context, in *ListClosedWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListClosedWorkflowExecutionsResponse, error) {
	out := new(ListClosedWorkflowExecutionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/ListClosedWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityAPIClient) ListArchivedWorkflowExecutions(ctx context.Context, in *ListArchivedWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ListArchivedWorkflowExecutionsResponse, error) {
	out := new(ListArchivedWorkflowExecutionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/ListArchivedWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityAPIClient) ScanWorkflowExecutions(ctx context.Context, in *ScanWorkflowExecutionsRequest, opts ...grpc.CallOption) (*ScanWorkflowExecutionsResponse, error) {
	out := new(ScanWorkflowExecutionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/ScanWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityAPIClient) CountWorkflowExecutions(ctx context.Context, in *CountWorkflowExecutionsRequest, opts ...grpc.CallOption) (*CountWorkflowExecutionsResponse, error) {
	out := new(CountWorkflowExecutionsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/CountWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityAPIClient) GetSearchAttributes(ctx context.Context, in *GetSearchAttributesRequest, opts ...grpc.CallOption) (*GetSearchAttributesResponse, error) {
	out := new(GetSearchAttributesResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.VisibilityAPI/GetSearchAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisibilityAPIServer is the server API for VisibilityAPI service.
type VisibilityAPIServer interface {
	// ListWorkflowExecutions is a visibility API to list workflow executions in a specific domain.
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error)
	// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific domain.
	ListOpenWorkflowExecutions(context.Context, *ListOpenWorkflowExecutionsRequest) (*ListOpenWorkflowExecutionsResponse, error)
	// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific domain.
	ListClosedWorkflowExecutions(context.Context, *ListClosedWorkflowExecutionsRequest) (*ListClosedWorkflowExecutionsResponse, error)
	// ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific domain.
	ListArchivedWorkflowExecutions(context.Context, *ListArchivedWorkflowExecutionsRequest) (*ListArchivedWorkflowExecutionsResponse, error)
	// ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific domain without order.
	ScanWorkflowExecutions(context.Context, *ScanWorkflowExecutionsRequest) (*ScanWorkflowExecutionsResponse, error)
	// CountWorkflowExecutions is a visibility API to count of workflow executions in a specific domain.
	CountWorkflowExecutions(context.Context, *CountWorkflowExecutionsRequest) (*CountWorkflowExecutionsResponse, error)
	// GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs.
	GetSearchAttributes(context.Context, *GetSearchAttributesRequest) (*GetSearchAttributesResponse, error)
}

// UnimplementedVisibilityAPIServer can be embedded to have forward compatible implementations.
type UnimplementedVisibilityAPIServer struct {
}

func (*UnimplementedVisibilityAPIServer) ListWorkflowExecutions(ctx context.Context, req *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowExecutions not implemented")
}
func (*UnimplementedVisibilityAPIServer) ListOpenWorkflowExecutions(ctx context.Context, req *ListOpenWorkflowExecutionsRequest) (*ListOpenWorkflowExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpenWorkflowExecutions not implemented")
}
func (*UnimplementedVisibilityAPIServer) ListClosedWorkflowExecutions(ctx context.Context, req *ListClosedWorkflowExecutionsRequest) (*ListClosedWorkflowExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClosedWorkflowExecutions not implemented")
}
func (*UnimplementedVisibilityAPIServer) ListArchivedWorkflowExecutions(ctx context.Context, req *ListArchivedWorkflowExecutionsRequest) (*ListArchivedWorkflowExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedWorkflowExecutions not implemented")
}
func (*UnimplementedVisibilityAPIServer) ScanWorkflowExecutions(ctx context.Context, req *ScanWorkflowExecutionsRequest) (*ScanWorkflowExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanWorkflowExecutions not implemented")
}
func (*UnimplementedVisibilityAPIServer) CountWorkflowExecutions(ctx context.Context, req *CountWorkflowExecutionsRequest) (*CountWorkflowExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountWorkflowExecutions not implemented")
}
func (*UnimplementedVisibilityAPIServer) GetSearchAttributes(ctx context.Context, req *GetSearchAttributesRequest) (*GetSearchAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchAttributes not implemented")
}

func RegisterVisibilityAPIServer(s *grpc.Server, srv VisibilityAPIServer) {
	s.RegisterService(&_VisibilityAPI_serviceDesc, srv)
}

func _VisibilityAPI_ListWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).ListWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/ListWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).ListWorkflowExecutions(ctx, req.(*ListWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityAPI_ListOpenWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpenWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).ListOpenWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/ListOpenWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).ListOpenWorkflowExecutions(ctx, req.(*ListOpenWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityAPI_ListClosedWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClosedWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).ListClosedWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/ListClosedWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).ListClosedWorkflowExecutions(ctx, req.(*ListClosedWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityAPI_ListArchivedWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchivedWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).ListArchivedWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/ListArchivedWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).ListArchivedWorkflowExecutions(ctx, req.(*ListArchivedWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityAPI_ScanWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).ScanWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/ScanWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).ScanWorkflowExecutions(ctx, req.(*ScanWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityAPI_CountWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountWorkflowExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).CountWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/CountWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).CountWorkflowExecutions(ctx, req.(*CountWorkflowExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityAPI_GetSearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityAPIServer).GetSearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.VisibilityAPI/GetSearchAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityAPIServer).GetSearchAttributes(ctx, req.(*GetSearchAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisibilityAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uber.cadence.api.v1.VisibilityAPI",
	HandlerType: (*VisibilityAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkflowExecutions",
			Handler:    _VisibilityAPI_ListWorkflowExecutions_Handler,
		},
		{
			MethodName: "ListOpenWorkflowExecutions",
			Handler:    _VisibilityAPI_ListOpenWorkflowExecutions_Handler,
		},
		{
			MethodName: "ListClosedWorkflowExecutions",
			Handler:    _VisibilityAPI_ListClosedWorkflowExecutions_Handler,
		},
		{
			MethodName: "ListArchivedWorkflowExecutions",
			Handler:    _VisibilityAPI_ListArchivedWorkflowExecutions_Handler,
		},
		{
			MethodName: "ScanWorkflowExecutions",
			Handler:    _VisibilityAPI_ScanWorkflowExecutions_Handler,
		},
		{
			MethodName: "CountWorkflowExecutions",
			Handler:    _VisibilityAPI_CountWorkflowExecutions_Handler,
		},
		{
			MethodName: "GetSearchAttributes",
			Handler:    _VisibilityAPI_GetSearchAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/uber/cadence/.gen/proto/api/v1/service_visibility.proto",
}

func (m *ListWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintServiceVisibility(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListOpenWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOpenWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filters != nil {
		{
			size := m.Filters.Size()
			i -= size
			if _, err := m.Filters.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StartTimeFilter != nil {
		{
			size, err := m.StartTimeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintServiceVisibility(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListOpenWorkflowExecutionsRequest_ExecutionFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsRequest_ExecutionFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionFilter != nil {
		{
			size, err := m.ExecutionFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListOpenWorkflowExecutionsRequest_TypeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsRequest_TypeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypeFilter != nil {
		{
			size, err := m.TypeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ListOpenWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOpenWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOpenWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListClosedWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClosedWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filters != nil {
		{
			size := m.Filters.Size()
			i -= size
			if _, err := m.Filters.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StartTimeFilter != nil {
		{
			size, err := m.StartTimeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintServiceVisibility(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListClosedWorkflowExecutionsRequest_ExecutionFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest_ExecutionFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionFilter != nil {
		{
			size, err := m.ExecutionFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListClosedWorkflowExecutionsRequest_TypeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest_TypeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypeFilter != nil {
		{
			size, err := m.TypeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ListClosedWorkflowExecutionsRequest_StatusFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsRequest_StatusFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatusFilter != nil {
		{
			size, err := m.StatusFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ListClosedWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClosedWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClosedWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListArchivedWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListArchivedWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListArchivedWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintServiceVisibility(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListArchivedWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListArchivedWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListArchivedWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScanWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintServiceVisibility(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScanWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executions) > 0 {
		for iNdEx := len(m.Executions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceVisibility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountWorkflowExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountWorkflowExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountWorkflowExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceVisibility(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountWorkflowExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountWorkflowExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountWorkflowExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintServiceVisibility(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSearchAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSearchAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSearchAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSearchAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSearchAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSearchAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k := range m.Keys {
			v := m.Keys[k]
			baseI := i
			i = encodeVarintServiceVisibility(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceVisibility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceVisibility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceVisibility(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceVisibility(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovServiceVisibility(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ListWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovServiceVisibility(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ListOpenWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovServiceVisibility(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.StartTimeFilter != nil {
		l = m.StartTimeFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.Filters != nil {
		n += m.Filters.Size()
	}
	return n
}

func (m *ListOpenWorkflowExecutionsRequest_ExecutionFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionFilter != nil {
		l = m.ExecutionFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}
func (m *ListOpenWorkflowExecutionsRequest_TypeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeFilter != nil {
		l = m.TypeFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}
func (m *ListOpenWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovServiceVisibility(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ListClosedWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovServiceVisibility(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.StartTimeFilter != nil {
		l = m.StartTimeFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.Filters != nil {
		n += m.Filters.Size()
	}
	return n
}

func (m *ListClosedWorkflowExecutionsRequest_ExecutionFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionFilter != nil {
		l = m.ExecutionFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}
func (m *ListClosedWorkflowExecutionsRequest_TypeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeFilter != nil {
		l = m.TypeFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}
func (m *ListClosedWorkflowExecutionsRequest_StatusFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusFilter != nil {
		l = m.StatusFilter.Size()
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}
func (m *ListClosedWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovServiceVisibility(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ListArchivedWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovServiceVisibility(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ListArchivedWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovServiceVisibility(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ScanWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovServiceVisibility(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *ScanWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 1 + l + sovServiceVisibility(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *CountWorkflowExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovServiceVisibility(uint64(l))
	}
	return n
}

func (m *CountWorkflowExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovServiceVisibility(uint64(m.Count))
	}
	return n
}

func (m *GetSearchAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSearchAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k, v := range m.Keys {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServiceVisibility(uint64(len(k))) + 1 + sovServiceVisibility(uint64(v))
			n += mapEntrySize + 1 + sovServiceVisibility(uint64(mapEntrySize))
		}
	}
	return n
}

func sovServiceVisibility(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceVisibility(x uint64) (n int) {
	return sovServiceVisibility(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`StartTimeFilter:` + strings.Replace(fmt.Sprintf("%v", this.StartTimeFilter), "StartTimeFilter", "StartTimeFilter", 1) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest_ExecutionFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsRequest_ExecutionFilter{`,
		`ExecutionFilter:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionFilter), "WorkflowExecutionFilter", "WorkflowExecutionFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsRequest_TypeFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsRequest_TypeFilter{`,
		`TypeFilter:` + strings.Replace(fmt.Sprintf("%v", this.TypeFilter), "WorkflowTypeFilter", "WorkflowTypeFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOpenWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListOpenWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`StartTimeFilter:` + strings.Replace(fmt.Sprintf("%v", this.StartTimeFilter), "StartTimeFilter", "StartTimeFilter", 1) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_ExecutionFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest_ExecutionFilter{`,
		`ExecutionFilter:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionFilter), "WorkflowExecutionFilter", "WorkflowExecutionFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_TypeFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest_TypeFilter{`,
		`TypeFilter:` + strings.Replace(fmt.Sprintf("%v", this.TypeFilter), "WorkflowTypeFilter", "WorkflowTypeFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsRequest_StatusFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsRequest_StatusFilter{`,
		`StatusFilter:` + strings.Replace(fmt.Sprintf("%v", this.StatusFilter), "StatusFilter", "StatusFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClosedWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListClosedWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListArchivedWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListArchivedWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListArchivedWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ListArchivedWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutions := "[]*WorkflowExecutionInfo{"
	for _, f := range this.Executions {
		repeatedStringForExecutions += strings.Replace(fmt.Sprintf("%v", f), "WorkflowExecutionInfo", "WorkflowExecutionInfo", 1) + ","
	}
	repeatedStringForExecutions += "}"
	s := strings.Join([]string{`&ScanWorkflowExecutionsResponse{`,
		`Executions:` + repeatedStringForExecutions + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountWorkflowExecutionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountWorkflowExecutionsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountWorkflowExecutionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountWorkflowExecutionsResponse{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSearchAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSearchAttributesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetSearchAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForKeys := make([]string, 0, len(this.Keys))
	for k, _ := range this.Keys {
		keysForKeys = append(keysForKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKeys)
	mapStringForKeys := "map[string]IndexedValueType{"
	for _, k := range keysForKeys {
		mapStringForKeys += fmt.Sprintf("%v: %v,", k, this.Keys[k])
	}
	mapStringForKeys += "}"
	s := strings.Join([]string{`&GetSearchAttributesResponse{`,
		`Keys:` + mapStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringServiceVisibility(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOpenWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimeFilter == nil {
				m.StartTimeFilter = &StartTimeFilter{}
			}
			if err := m.StartTimeFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListOpenWorkflowExecutionsRequest_ExecutionFilter{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTypeFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListOpenWorkflowExecutionsRequest_TypeFilter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOpenWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOpenWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClosedWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimeFilter == nil {
				m.StartTimeFilter = &StartTimeFilter{}
			}
			if err := m.StartTimeFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListClosedWorkflowExecutionsRequest_ExecutionFilter{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowTypeFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListClosedWorkflowExecutionsRequest_TypeFilter{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StatusFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filters = &ListClosedWorkflowExecutionsRequest_StatusFilter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClosedWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClosedWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListArchivedWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListArchivedWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListArchivedWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &WorkflowExecutionInfo{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountWorkflowExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountWorkflowExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountWorkflowExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountWorkflowExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountWorkflowExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountWorkflowExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSearchAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSearchAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSearchAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSearchAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSearchAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSearchAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = make(map[string]IndexedValueType)
			}
			var mapkey string
			var mapvalue IndexedValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceVisibility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceVisibility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceVisibility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceVisibility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceVisibility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= IndexedValueType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceVisibility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceVisibility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Keys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceVisibility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceVisibility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceVisibility(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceVisibility
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceVisibility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceVisibility
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceVisibility
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceVisibility
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceVisibility        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceVisibility          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceVisibility = fmt.Errorf("proto: unexpected end of group")
)
