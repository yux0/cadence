// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: uber/cadence/api/v1/decision.proto

package apiv1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Decision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attributes:
	//	*Decision_ScheduleActivityTaskDecisionAttributes
	//	*Decision_StartTimerDecisionAttributes
	//	*Decision_CompleteWorkflowExecutionDecisionAttributes
	//	*Decision_FailWorkflowExecutionDecisionAttributes
	//	*Decision_RequestCancelActivityTaskDecisionAttributes
	//	*Decision_CancelTimerDecisionAttributes
	//	*Decision_CancelWorkflowExecutionDecisionAttributes
	//	*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes
	//	*Decision_RecordMarkerDecisionAttributes
	//	*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes
	//	*Decision_StartChildWorkflowExecutionDecisionAttributes
	//	*Decision_SignalExternalWorkflowExecutionDecisionAttributes
	//	*Decision_UpsertWorkflowSearchAttributesDecisionAttributes
	Attributes isDecision_Attributes `protobuf_oneof:"attributes"`
}

func (x *Decision) Reset() {
	*x = Decision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{0}
}

func (m *Decision) GetAttributes() isDecision_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (x *Decision) GetScheduleActivityTaskDecisionAttributes() *ScheduleActivityTaskDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_ScheduleActivityTaskDecisionAttributes); ok {
		return x.ScheduleActivityTaskDecisionAttributes
	}
	return nil
}

func (x *Decision) GetStartTimerDecisionAttributes() *StartTimerDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_StartTimerDecisionAttributes); ok {
		return x.StartTimerDecisionAttributes
	}
	return nil
}

func (x *Decision) GetCompleteWorkflowExecutionDecisionAttributes() *CompleteWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_CompleteWorkflowExecutionDecisionAttributes); ok {
		return x.CompleteWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetFailWorkflowExecutionDecisionAttributes() *FailWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_FailWorkflowExecutionDecisionAttributes); ok {
		return x.FailWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetRequestCancelActivityTaskDecisionAttributes() *RequestCancelActivityTaskDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_RequestCancelActivityTaskDecisionAttributes); ok {
		return x.RequestCancelActivityTaskDecisionAttributes
	}
	return nil
}

func (x *Decision) GetCancelTimerDecisionAttributes() *CancelTimerDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_CancelTimerDecisionAttributes); ok {
		return x.CancelTimerDecisionAttributes
	}
	return nil
}

func (x *Decision) GetCancelWorkflowExecutionDecisionAttributes() *CancelWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_CancelWorkflowExecutionDecisionAttributes); ok {
		return x.CancelWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetRequestCancelExternalWorkflowExecutionDecisionAttributes() *RequestCancelExternalWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetRecordMarkerDecisionAttributes() *RecordMarkerDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_RecordMarkerDecisionAttributes); ok {
		return x.RecordMarkerDecisionAttributes
	}
	return nil
}

func (x *Decision) GetContinueAsNewWorkflowExecutionDecisionAttributes() *ContinueAsNewWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes); ok {
		return x.ContinueAsNewWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetStartChildWorkflowExecutionDecisionAttributes() *StartChildWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_StartChildWorkflowExecutionDecisionAttributes); ok {
		return x.StartChildWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetSignalExternalWorkflowExecutionDecisionAttributes() *SignalExternalWorkflowExecutionDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_SignalExternalWorkflowExecutionDecisionAttributes); ok {
		return x.SignalExternalWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (x *Decision) GetUpsertWorkflowSearchAttributesDecisionAttributes() *UpsertWorkflowSearchAttributesDecisionAttributes {
	if x, ok := x.GetAttributes().(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes); ok {
		return x.UpsertWorkflowSearchAttributesDecisionAttributes
	}
	return nil
}

type isDecision_Attributes interface {
	isDecision_Attributes()
}

type Decision_ScheduleActivityTaskDecisionAttributes struct {
	ScheduleActivityTaskDecisionAttributes *ScheduleActivityTaskDecisionAttributes `protobuf:"bytes,1,opt,name=schedule_activity_task_decision_attributes,json=scheduleActivityTaskDecisionAttributes,proto3,oneof"`
}

type Decision_StartTimerDecisionAttributes struct {
	StartTimerDecisionAttributes *StartTimerDecisionAttributes `protobuf:"bytes,2,opt,name=start_timer_decision_attributes,json=startTimerDecisionAttributes,proto3,oneof"`
}

type Decision_CompleteWorkflowExecutionDecisionAttributes struct {
	CompleteWorkflowExecutionDecisionAttributes *CompleteWorkflowExecutionDecisionAttributes `protobuf:"bytes,3,opt,name=complete_workflow_execution_decision_attributes,json=completeWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_FailWorkflowExecutionDecisionAttributes struct {
	FailWorkflowExecutionDecisionAttributes *FailWorkflowExecutionDecisionAttributes `protobuf:"bytes,4,opt,name=fail_workflow_execution_decision_attributes,json=failWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_RequestCancelActivityTaskDecisionAttributes struct {
	RequestCancelActivityTaskDecisionAttributes *RequestCancelActivityTaskDecisionAttributes `protobuf:"bytes,5,opt,name=request_cancel_activity_task_decision_attributes,json=requestCancelActivityTaskDecisionAttributes,proto3,oneof"`
}

type Decision_CancelTimerDecisionAttributes struct {
	CancelTimerDecisionAttributes *CancelTimerDecisionAttributes `protobuf:"bytes,6,opt,name=cancel_timer_decision_attributes,json=cancelTimerDecisionAttributes,proto3,oneof"`
}

type Decision_CancelWorkflowExecutionDecisionAttributes struct {
	CancelWorkflowExecutionDecisionAttributes *CancelWorkflowExecutionDecisionAttributes `protobuf:"bytes,7,opt,name=cancel_workflow_execution_decision_attributes,json=cancelWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	RequestCancelExternalWorkflowExecutionDecisionAttributes *RequestCancelExternalWorkflowExecutionDecisionAttributes `protobuf:"bytes,8,opt,name=request_cancel_external_workflow_execution_decision_attributes,json=requestCancelExternalWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_RecordMarkerDecisionAttributes struct {
	RecordMarkerDecisionAttributes *RecordMarkerDecisionAttributes `protobuf:"bytes,9,opt,name=record_marker_decision_attributes,json=recordMarkerDecisionAttributes,proto3,oneof"`
}

type Decision_ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	ContinueAsNewWorkflowExecutionDecisionAttributes *ContinueAsNewWorkflowExecutionDecisionAttributes `protobuf:"bytes,10,opt,name=continue_as_new_workflow_execution_decision_attributes,json=continueAsNewWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_StartChildWorkflowExecutionDecisionAttributes struct {
	StartChildWorkflowExecutionDecisionAttributes *StartChildWorkflowExecutionDecisionAttributes `protobuf:"bytes,11,opt,name=start_child_workflow_execution_decision_attributes,json=startChildWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_SignalExternalWorkflowExecutionDecisionAttributes struct {
	SignalExternalWorkflowExecutionDecisionAttributes *SignalExternalWorkflowExecutionDecisionAttributes `protobuf:"bytes,12,opt,name=signal_external_workflow_execution_decision_attributes,json=signalExternalWorkflowExecutionDecisionAttributes,proto3,oneof"`
}

type Decision_UpsertWorkflowSearchAttributesDecisionAttributes struct {
	UpsertWorkflowSearchAttributesDecisionAttributes *UpsertWorkflowSearchAttributesDecisionAttributes `protobuf:"bytes,13,opt,name=upsert_workflow_search_attributes_decision_attributes,json=upsertWorkflowSearchAttributesDecisionAttributes,proto3,oneof"`
}

func (*Decision_ScheduleActivityTaskDecisionAttributes) isDecision_Attributes() {}

func (*Decision_StartTimerDecisionAttributes) isDecision_Attributes() {}

func (*Decision_CompleteWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_FailWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_RequestCancelActivityTaskDecisionAttributes) isDecision_Attributes() {}

func (*Decision_CancelTimerDecisionAttributes) isDecision_Attributes() {}

func (*Decision_CancelWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_RecordMarkerDecisionAttributes) isDecision_Attributes() {}

func (*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_StartChildWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_SignalExternalWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}

func (*Decision_UpsertWorkflowSearchAttributesDecisionAttributes) isDecision_Attributes() {}

type ScheduleActivityTaskDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId             string               `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType           *ActivityType        `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Domain                 string               `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList               *TaskList            `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                  *Payload             `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	StartToCloseTimeout    *durationpb.Duration `protobuf:"bytes,8,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout       *durationpb.Duration `protobuf:"bytes,9,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	RetryPolicy            *RetryPolicy         `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Header                 *Header              `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	RequestLocalDispatch   bool                 `protobuf:"varint,13,opt,name=request_local_dispatch,json=requestLocalDispatch,proto3" json:"request_local_dispatch,omitempty"`
}

func (x *ScheduleActivityTaskDecisionAttributes) Reset() {
	*x = ScheduleActivityTaskDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleActivityTaskDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleActivityTaskDecisionAttributes) ProtoMessage() {}

func (x *ScheduleActivityTaskDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleActivityTaskDecisionAttributes.ProtoReflect.Descriptor instead.
func (*ScheduleActivityTaskDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleActivityTaskDecisionAttributes) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ScheduleActivityTaskDecisionAttributes) GetActivityType() *ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ScheduleActivityTaskDecisionAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScheduleActivityTaskDecisionAttributes) GetRequestLocalDispatch() bool {
	if x != nil {
		return x.RequestLocalDispatch
	}
	return false
}

type StartTimerDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerId            string               `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	StartToFireTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3" json:"start_to_fire_timeout,omitempty"`
}

func (x *StartTimerDecisionAttributes) Reset() {
	*x = StartTimerDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTimerDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimerDecisionAttributes) ProtoMessage() {}

func (x *StartTimerDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimerDecisionAttributes.ProtoReflect.Descriptor instead.
func (*StartTimerDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{2}
}

func (x *StartTimerDecisionAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

func (x *StartTimerDecisionAttributes) GetStartToFireTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToFireTimeout
	}
	return nil
}

type CompleteWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CompleteWorkflowExecutionDecisionAttributes) Reset() {
	*x = CompleteWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *CompleteWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*CompleteWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{3}
}

func (x *CompleteWorkflowExecutionDecisionAttributes) GetResult() *Payload {
	if x != nil {
		return x.Result
	}
	return nil
}

type FailWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *FailWorkflowExecutionDecisionAttributes) Reset() {
	*x = FailWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *FailWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*FailWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{4}
}

func (x *FailWorkflowExecutionDecisionAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type RequestCancelActivityTaskDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *RequestCancelActivityTaskDecisionAttributes) Reset() {
	*x = RequestCancelActivityTaskDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelActivityTaskDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelActivityTaskDecisionAttributes) ProtoMessage() {}

func (x *RequestCancelActivityTaskDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelActivityTaskDecisionAttributes.ProtoReflect.Descriptor instead.
func (*RequestCancelActivityTaskDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{5}
}

func (x *RequestCancelActivityTaskDecisionAttributes) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type CancelTimerDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
}

func (x *CancelTimerDecisionAttributes) Reset() {
	*x = CancelTimerDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTimerDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTimerDecisionAttributes) ProtoMessage() {}

func (x *CancelTimerDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTimerDecisionAttributes.ProtoReflect.Descriptor instead.
func (*CancelTimerDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{6}
}

func (x *CancelTimerDecisionAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

type CancelWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *Payload `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *CancelWorkflowExecutionDecisionAttributes) Reset() {
	*x = CancelWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *CancelWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*CancelWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{7}
}

func (x *CancelWorkflowExecutionDecisionAttributes) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

type RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Control           []byte             `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool               `protobuf:"varint,4,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) Reset() {
	*x = RequestCancelExternalWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelExternalWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelExternalWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*RequestCancelExternalWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{8}
}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetChildWorkflowOnly() bool {
	if x != nil {
		return x.ChildWorkflowOnly
	}
	return false
}

type RecordMarkerDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkerName string   `protobuf:"bytes,1,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	Details    *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Header     *Header  `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RecordMarkerDecisionAttributes) Reset() {
	*x = RecordMarkerDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMarkerDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMarkerDecisionAttributes) ProtoMessage() {}

func (x *RecordMarkerDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMarkerDecisionAttributes.ProtoReflect.Descriptor instead.
func (*RecordMarkerDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{9}
}

func (x *RecordMarkerDecisionAttributes) GetMarkerName() string {
	if x != nil {
		return x.MarkerName
	}
	return ""
}

func (x *RecordMarkerDecisionAttributes) GetDetails() *Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RecordMarkerDecisionAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowType                 *WorkflowType          `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList                     *TaskList              `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                        *Payload               `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeout *durationpb.Duration   `protobuf:"bytes,4,opt,name=execution_start_to_close_timeout,json=executionStartToCloseTimeout,proto3" json:"execution_start_to_close_timeout,omitempty"`
	TaskStartToCloseTimeout      *durationpb.Duration   `protobuf:"bytes,5,opt,name=task_start_to_close_timeout,json=taskStartToCloseTimeout,proto3" json:"task_start_to_close_timeout,omitempty"`
	BackoffStartInterval         *durationpb.Duration   `protobuf:"bytes,6,opt,name=backoff_start_interval,json=backoffStartInterval,proto3" json:"backoff_start_interval,omitempty"`
	RetryPolicy                  *RetryPolicy           `protobuf:"bytes,7,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Initiator                    ContinueAsNewInitiator `protobuf:"varint,8,opt,name=initiator,proto3,enum=uber.cadence.api.v1.ContinueAsNewInitiator" json:"initiator,omitempty"`
	Failure                      *Failure               `protobuf:"bytes,9,opt,name=failure,proto3" json:"failure,omitempty"`
	LastCompletionResult         *Payload               `protobuf:"bytes,10,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	CronSchedule                 string                 `protobuf:"bytes,11,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                       *Header                `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	Memo                         *Memo                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes             *SearchAttributes      `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) Reset() {
	*x = ContinueAsNewWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueAsNewWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueAsNewWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*ContinueAsNewWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{10}
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetExecutionStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionStartToCloseTimeout
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetTaskStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskStartToCloseTimeout
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetBackoffStartInterval() *durationpb.Duration {
	if x != nil {
		return x.BackoffStartInterval
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetInitiator() ContinueAsNewInitiator {
	if x != nil {
		return x.Initiator
	}
	return ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_INVALID
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetLastCompletionResult() *Payload {
	if x != nil {
		return x.LastCompletionResult
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionDecisionAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                       string                `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId                   string                `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType                 *WorkflowType         `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList                     *TaskList             `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                        *Payload              `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeout *durationpb.Duration  `protobuf:"bytes,6,opt,name=execution_start_to_close_timeout,json=executionStartToCloseTimeout,proto3" json:"execution_start_to_close_timeout,omitempty"`
	TaskStartToCloseTimeout      *durationpb.Duration  `protobuf:"bytes,7,opt,name=task_start_to_close_timeout,json=taskStartToCloseTimeout,proto3" json:"task_start_to_close_timeout,omitempty"`
	ParentClosePolicy            ParentClosePolicy     `protobuf:"varint,8,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=uber.cadence.api.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	Control                      []byte                `protobuf:"bytes,9,opt,name=control,proto3" json:"control,omitempty"`
	WorkflowIdReusePolicy        WorkflowIdReusePolicy `protobuf:"varint,10,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=uber.cadence.api.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy                  *RetryPolicy          `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule                 string                `protobuf:"bytes,12,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                       *Header               `protobuf:"bytes,13,opt,name=header,proto3" json:"header,omitempty"`
	Memo                         *Memo                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes             *SearchAttributes     `protobuf:"bytes,15,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *StartChildWorkflowExecutionDecisionAttributes) Reset() {
	*x = StartChildWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChildWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChildWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *StartChildWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChildWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*StartChildWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{11}
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowType() *WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetTaskList() *TaskList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetExecutionStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionStartToCloseTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetTaskStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskStartToCloseTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetParentClosePolicy() ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_INVALID
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowIdReusePolicy() WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_INVALID
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartChildWorkflowExecutionDecisionAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type SignalExternalWorkflowExecutionDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	SignalName        string             `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input             *Payload           `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Control           []byte             `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool               `protobuf:"varint,6,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) Reset() {
	*x = SignalExternalWorkflowExecutionDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalExternalWorkflowExecutionDecisionAttributes) ProtoMessage() {}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalExternalWorkflowExecutionDecisionAttributes.ProtoReflect.Descriptor instead.
func (*SignalExternalWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{12}
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) GetWorkflowExecution() *WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionDecisionAttributes) GetChildWorkflowOnly() bool {
	if x != nil {
		return x.ChildWorkflowOnly
	}
	return false
}

type UpsertWorkflowSearchAttributesDecisionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchAttributes *SearchAttributes `protobuf:"bytes,1,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *UpsertWorkflowSearchAttributesDecisionAttributes) Reset() {
	*x = UpsertWorkflowSearchAttributesDecisionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertWorkflowSearchAttributesDecisionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertWorkflowSearchAttributesDecisionAttributes) ProtoMessage() {}

func (x *UpsertWorkflowSearchAttributesDecisionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_uber_cadence_api_v1_decision_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertWorkflowSearchAttributesDecisionAttributes.ProtoReflect.Descriptor instead.
func (*UpsertWorkflowSearchAttributesDecisionAttributes) Descriptor() ([]byte, []int) {
	return file_uber_cadence_api_v1_decision_proto_rawDescGZIP(), []int{13}
}

func (x *UpsertWorkflowSearchAttributesDecisionAttributes) GetSearchAttributes() *SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

var File_uber_cadence_api_v1_decision_proto protoreflect.FileDescriptor

var file_uber_cadence_api_v1_decision_proto_rawDesc = []byte{
	0x0a, 0x22, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x75, 0x62, 0x65, 0x72, 0x2f,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x75, 0x62, 0x65,
	0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x88, 0x11, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x99, 0x01, 0x0a, 0x2a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x26, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x1f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x2b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x27, 0x66, 0x61, 0x69, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x30, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x2b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7d,
	0x0a, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa2, 0x01,
	0x0a, 0x2d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x29, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x3e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x38, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x36, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x30, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e,
	0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x32, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x36, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x31, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x35, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x30,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x8d,
	0x06, 0x0a, 0x26, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x87,
	0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x63, 0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x61, 0x0a,
	0x27, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x22, 0x4e, 0x0a, 0x2b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x29,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xf3, 0x01, 0x0a, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75,
	0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xf0, 0x07, 0x0a, 0x30, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4f, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x62, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xd5, 0x07, 0x0a, 0x2d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x61,
	0x0a, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x57, 0x0a, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x63, 0x0a, 0x18,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x52, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x31, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x55, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x30, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x42, 0x56, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x2e, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uber_cadence_api_v1_decision_proto_rawDescOnce sync.Once
	file_uber_cadence_api_v1_decision_proto_rawDescData = file_uber_cadence_api_v1_decision_proto_rawDesc
)

func file_uber_cadence_api_v1_decision_proto_rawDescGZIP() []byte {
	file_uber_cadence_api_v1_decision_proto_rawDescOnce.Do(func() {
		file_uber_cadence_api_v1_decision_proto_rawDescData = protoimpl.X.CompressGZIP(file_uber_cadence_api_v1_decision_proto_rawDescData)
	})
	return file_uber_cadence_api_v1_decision_proto_rawDescData
}

var file_uber_cadence_api_v1_decision_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_uber_cadence_api_v1_decision_proto_goTypes = []interface{}{
	(*Decision)(nil), // 0: uber.cadence.api.v1.Decision
	(*ScheduleActivityTaskDecisionAttributes)(nil),                   // 1: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes
	(*StartTimerDecisionAttributes)(nil),                             // 2: uber.cadence.api.v1.StartTimerDecisionAttributes
	(*CompleteWorkflowExecutionDecisionAttributes)(nil),              // 3: uber.cadence.api.v1.CompleteWorkflowExecutionDecisionAttributes
	(*FailWorkflowExecutionDecisionAttributes)(nil),                  // 4: uber.cadence.api.v1.FailWorkflowExecutionDecisionAttributes
	(*RequestCancelActivityTaskDecisionAttributes)(nil),              // 5: uber.cadence.api.v1.RequestCancelActivityTaskDecisionAttributes
	(*CancelTimerDecisionAttributes)(nil),                            // 6: uber.cadence.api.v1.CancelTimerDecisionAttributes
	(*CancelWorkflowExecutionDecisionAttributes)(nil),                // 7: uber.cadence.api.v1.CancelWorkflowExecutionDecisionAttributes
	(*RequestCancelExternalWorkflowExecutionDecisionAttributes)(nil), // 8: uber.cadence.api.v1.RequestCancelExternalWorkflowExecutionDecisionAttributes
	(*RecordMarkerDecisionAttributes)(nil),                           // 9: uber.cadence.api.v1.RecordMarkerDecisionAttributes
	(*ContinueAsNewWorkflowExecutionDecisionAttributes)(nil),         // 10: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes
	(*StartChildWorkflowExecutionDecisionAttributes)(nil),            // 11: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes
	(*SignalExternalWorkflowExecutionDecisionAttributes)(nil),        // 12: uber.cadence.api.v1.SignalExternalWorkflowExecutionDecisionAttributes
	(*UpsertWorkflowSearchAttributesDecisionAttributes)(nil),         // 13: uber.cadence.api.v1.UpsertWorkflowSearchAttributesDecisionAttributes
	(*ActivityType)(nil),                                             // 14: uber.cadence.api.v1.ActivityType
	(*TaskList)(nil),                                                 // 15: uber.cadence.api.v1.TaskList
	(*Payload)(nil),                                                  // 16: uber.cadence.api.v1.Payload
	(*durationpb.Duration)(nil),                                      // 17: google.protobuf.Duration
	(*RetryPolicy)(nil),                                              // 18: uber.cadence.api.v1.RetryPolicy
	(*Header)(nil),                                                   // 19: uber.cadence.api.v1.Header
	(*Failure)(nil),                                                  // 20: uber.cadence.api.v1.Failure
	(*WorkflowExecution)(nil),                                        // 21: uber.cadence.api.v1.WorkflowExecution
	(*WorkflowType)(nil),                                             // 22: uber.cadence.api.v1.WorkflowType
	(ContinueAsNewInitiator)(0),                                      // 23: uber.cadence.api.v1.ContinueAsNewInitiator
	(*Memo)(nil),                                                     // 24: uber.cadence.api.v1.Memo
	(*SearchAttributes)(nil),                                         // 25: uber.cadence.api.v1.SearchAttributes
	(ParentClosePolicy)(0),                                           // 26: uber.cadence.api.v1.ParentClosePolicy
	(WorkflowIdReusePolicy)(0),                                       // 27: uber.cadence.api.v1.WorkflowIdReusePolicy
}
var file_uber_cadence_api_v1_decision_proto_depIdxs = []int32{
	1,  // 0: uber.cadence.api.v1.Decision.schedule_activity_task_decision_attributes:type_name -> uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes
	2,  // 1: uber.cadence.api.v1.Decision.start_timer_decision_attributes:type_name -> uber.cadence.api.v1.StartTimerDecisionAttributes
	3,  // 2: uber.cadence.api.v1.Decision.complete_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.CompleteWorkflowExecutionDecisionAttributes
	4,  // 3: uber.cadence.api.v1.Decision.fail_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.FailWorkflowExecutionDecisionAttributes
	5,  // 4: uber.cadence.api.v1.Decision.request_cancel_activity_task_decision_attributes:type_name -> uber.cadence.api.v1.RequestCancelActivityTaskDecisionAttributes
	6,  // 5: uber.cadence.api.v1.Decision.cancel_timer_decision_attributes:type_name -> uber.cadence.api.v1.CancelTimerDecisionAttributes
	7,  // 6: uber.cadence.api.v1.Decision.cancel_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.CancelWorkflowExecutionDecisionAttributes
	8,  // 7: uber.cadence.api.v1.Decision.request_cancel_external_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.RequestCancelExternalWorkflowExecutionDecisionAttributes
	9,  // 8: uber.cadence.api.v1.Decision.record_marker_decision_attributes:type_name -> uber.cadence.api.v1.RecordMarkerDecisionAttributes
	10, // 9: uber.cadence.api.v1.Decision.continue_as_new_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes
	11, // 10: uber.cadence.api.v1.Decision.start_child_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes
	12, // 11: uber.cadence.api.v1.Decision.signal_external_workflow_execution_decision_attributes:type_name -> uber.cadence.api.v1.SignalExternalWorkflowExecutionDecisionAttributes
	13, // 12: uber.cadence.api.v1.Decision.upsert_workflow_search_attributes_decision_attributes:type_name -> uber.cadence.api.v1.UpsertWorkflowSearchAttributesDecisionAttributes
	14, // 13: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.activity_type:type_name -> uber.cadence.api.v1.ActivityType
	15, // 14: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.task_list:type_name -> uber.cadence.api.v1.TaskList
	16, // 15: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.input:type_name -> uber.cadence.api.v1.Payload
	17, // 16: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	17, // 17: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	17, // 18: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.start_to_close_timeout:type_name -> google.protobuf.Duration
	17, // 19: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.heartbeat_timeout:type_name -> google.protobuf.Duration
	18, // 20: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.retry_policy:type_name -> uber.cadence.api.v1.RetryPolicy
	19, // 21: uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes.header:type_name -> uber.cadence.api.v1.Header
	17, // 22: uber.cadence.api.v1.StartTimerDecisionAttributes.start_to_fire_timeout:type_name -> google.protobuf.Duration
	16, // 23: uber.cadence.api.v1.CompleteWorkflowExecutionDecisionAttributes.result:type_name -> uber.cadence.api.v1.Payload
	20, // 24: uber.cadence.api.v1.FailWorkflowExecutionDecisionAttributes.failure:type_name -> uber.cadence.api.v1.Failure
	16, // 25: uber.cadence.api.v1.CancelWorkflowExecutionDecisionAttributes.details:type_name -> uber.cadence.api.v1.Payload
	21, // 26: uber.cadence.api.v1.RequestCancelExternalWorkflowExecutionDecisionAttributes.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	16, // 27: uber.cadence.api.v1.RecordMarkerDecisionAttributes.details:type_name -> uber.cadence.api.v1.Payload
	19, // 28: uber.cadence.api.v1.RecordMarkerDecisionAttributes.header:type_name -> uber.cadence.api.v1.Header
	22, // 29: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.workflow_type:type_name -> uber.cadence.api.v1.WorkflowType
	15, // 30: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.task_list:type_name -> uber.cadence.api.v1.TaskList
	16, // 31: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.input:type_name -> uber.cadence.api.v1.Payload
	17, // 32: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.execution_start_to_close_timeout:type_name -> google.protobuf.Duration
	17, // 33: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.task_start_to_close_timeout:type_name -> google.protobuf.Duration
	17, // 34: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.backoff_start_interval:type_name -> google.protobuf.Duration
	18, // 35: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.retry_policy:type_name -> uber.cadence.api.v1.RetryPolicy
	23, // 36: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.initiator:type_name -> uber.cadence.api.v1.ContinueAsNewInitiator
	20, // 37: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.failure:type_name -> uber.cadence.api.v1.Failure
	16, // 38: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.last_completion_result:type_name -> uber.cadence.api.v1.Payload
	19, // 39: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.header:type_name -> uber.cadence.api.v1.Header
	24, // 40: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.memo:type_name -> uber.cadence.api.v1.Memo
	25, // 41: uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes.search_attributes:type_name -> uber.cadence.api.v1.SearchAttributes
	22, // 42: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.workflow_type:type_name -> uber.cadence.api.v1.WorkflowType
	15, // 43: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.task_list:type_name -> uber.cadence.api.v1.TaskList
	16, // 44: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.input:type_name -> uber.cadence.api.v1.Payload
	17, // 45: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.execution_start_to_close_timeout:type_name -> google.protobuf.Duration
	17, // 46: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.task_start_to_close_timeout:type_name -> google.protobuf.Duration
	26, // 47: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.parent_close_policy:type_name -> uber.cadence.api.v1.ParentClosePolicy
	27, // 48: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.workflow_id_reuse_policy:type_name -> uber.cadence.api.v1.WorkflowIdReusePolicy
	18, // 49: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.retry_policy:type_name -> uber.cadence.api.v1.RetryPolicy
	19, // 50: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.header:type_name -> uber.cadence.api.v1.Header
	24, // 51: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.memo:type_name -> uber.cadence.api.v1.Memo
	25, // 52: uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes.search_attributes:type_name -> uber.cadence.api.v1.SearchAttributes
	21, // 53: uber.cadence.api.v1.SignalExternalWorkflowExecutionDecisionAttributes.workflow_execution:type_name -> uber.cadence.api.v1.WorkflowExecution
	16, // 54: uber.cadence.api.v1.SignalExternalWorkflowExecutionDecisionAttributes.input:type_name -> uber.cadence.api.v1.Payload
	25, // 55: uber.cadence.api.v1.UpsertWorkflowSearchAttributesDecisionAttributes.search_attributes:type_name -> uber.cadence.api.v1.SearchAttributes
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_uber_cadence_api_v1_decision_proto_init() }
func file_uber_cadence_api_v1_decision_proto_init() {
	if File_uber_cadence_api_v1_decision_proto != nil {
		return
	}
	file_uber_cadence_api_v1_common_proto_init()
	file_uber_cadence_api_v1_tasklist_proto_init()
	file_uber_cadence_api_v1_workflow_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uber_cadence_api_v1_decision_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleActivityTaskDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTimerDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelActivityTaskDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTimerDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelExternalWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMarkerDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueAsNewWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChildWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalExternalWorkflowExecutionDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uber_cadence_api_v1_decision_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertWorkflowSearchAttributesDecisionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_uber_cadence_api_v1_decision_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Decision_ScheduleActivityTaskDecisionAttributes)(nil),
		(*Decision_StartTimerDecisionAttributes)(nil),
		(*Decision_CompleteWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_FailWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RequestCancelActivityTaskDecisionAttributes)(nil),
		(*Decision_CancelTimerDecisionAttributes)(nil),
		(*Decision_CancelWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RecordMarkerDecisionAttributes)(nil),
		(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_StartChildWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_SignalExternalWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uber_cadence_api_v1_decision_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_uber_cadence_api_v1_decision_proto_goTypes,
		DependencyIndexes: file_uber_cadence_api_v1_decision_proto_depIdxs,
		MessageInfos:      file_uber_cadence_api_v1_decision_proto_msgTypes,
	}.Build()
	File_uber_cadence_api_v1_decision_proto = out.File
	file_uber_cadence_api_v1_decision_proto_rawDesc = nil
	file_uber_cadence_api_v1_decision_proto_goTypes = nil
	file_uber_cadence_api_v1_decision_proto_depIdxs = nil
}
