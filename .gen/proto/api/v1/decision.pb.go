// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/decision.proto

package apiv1

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Decision struct {
	// Types that are valid to be assigned to Attributes:
	//	*Decision_ScheduleActivityTaskDecisionAttributes
	//	*Decision_StartTimerDecisionAttributes
	//	*Decision_CompleteWorkflowExecutionDecisionAttributes
	//	*Decision_FailWorkflowExecutionDecisionAttributes
	//	*Decision_RequestCancelActivityTaskDecisionAttributes
	//	*Decision_CancelTimerDecisionAttributes
	//	*Decision_CancelWorkflowExecutionDecisionAttributes
	//	*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes
	//	*Decision_RecordMarkerDecisionAttributes
	//	*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes
	//	*Decision_StartChildWorkflowExecutionDecisionAttributes
	//	*Decision_SignalExternalWorkflowExecutionDecisionAttributes
	//	*Decision_UpsertWorkflowSearchAttributesDecisionAttributes
	Attributes isDecision_Attributes `protobuf_oneof:"attributes"`
}

func (m *Decision) Reset()      { *m = Decision{} }
func (*Decision) ProtoMessage() {}
func (*Decision) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{0}
}
func (m *Decision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decision.Merge(m, src)
}
func (m *Decision) XXX_Size() int {
	return m.Size()
}
func (m *Decision) XXX_DiscardUnknown() {
	xxx_messageInfo_Decision.DiscardUnknown(m)
}

var xxx_messageInfo_Decision proto.InternalMessageInfo

type isDecision_Attributes interface {
	isDecision_Attributes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Decision_ScheduleActivityTaskDecisionAttributes struct {
	ScheduleActivityTaskDecisionAttributes *ScheduleActivityTaskDecisionAttributes `protobuf:"bytes,1,opt,name=schedule_activity_task_decision_attributes,json=scheduleActivityTaskDecisionAttributes,proto3,oneof" json:"schedule_activity_task_decision_attributes,omitempty"`
}
type Decision_StartTimerDecisionAttributes struct {
	StartTimerDecisionAttributes *StartTimerDecisionAttributes `protobuf:"bytes,2,opt,name=start_timer_decision_attributes,json=startTimerDecisionAttributes,proto3,oneof" json:"start_timer_decision_attributes,omitempty"`
}
type Decision_CompleteWorkflowExecutionDecisionAttributes struct {
	CompleteWorkflowExecutionDecisionAttributes *CompleteWorkflowExecutionDecisionAttributes `protobuf:"bytes,3,opt,name=complete_workflow_execution_decision_attributes,json=completeWorkflowExecutionDecisionAttributes,proto3,oneof" json:"complete_workflow_execution_decision_attributes,omitempty"`
}
type Decision_FailWorkflowExecutionDecisionAttributes struct {
	FailWorkflowExecutionDecisionAttributes *FailWorkflowExecutionDecisionAttributes `protobuf:"bytes,4,opt,name=fail_workflow_execution_decision_attributes,json=failWorkflowExecutionDecisionAttributes,proto3,oneof" json:"fail_workflow_execution_decision_attributes,omitempty"`
}
type Decision_RequestCancelActivityTaskDecisionAttributes struct {
	RequestCancelActivityTaskDecisionAttributes *RequestCancelActivityTaskDecisionAttributes `protobuf:"bytes,5,opt,name=request_cancel_activity_task_decision_attributes,json=requestCancelActivityTaskDecisionAttributes,proto3,oneof" json:"request_cancel_activity_task_decision_attributes,omitempty"`
}
type Decision_CancelTimerDecisionAttributes struct {
	CancelTimerDecisionAttributes *CancelTimerDecisionAttributes `protobuf:"bytes,6,opt,name=cancel_timer_decision_attributes,json=cancelTimerDecisionAttributes,proto3,oneof" json:"cancel_timer_decision_attributes,omitempty"`
}
type Decision_CancelWorkflowExecutionDecisionAttributes struct {
	CancelWorkflowExecutionDecisionAttributes *CancelWorkflowExecutionDecisionAttributes `protobuf:"bytes,7,opt,name=cancel_workflow_execution_decision_attributes,json=cancelWorkflowExecutionDecisionAttributes,proto3,oneof" json:"cancel_workflow_execution_decision_attributes,omitempty"`
}
type Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	RequestCancelExternalWorkflowExecutionDecisionAttributes *RequestCancelExternalWorkflowExecutionDecisionAttributes `protobuf:"bytes,8,opt,name=request_cancel_external_workflow_execution_decision_attributes,json=requestCancelExternalWorkflowExecutionDecisionAttributes,proto3,oneof" json:"request_cancel_external_workflow_execution_decision_attributes,omitempty"`
}
type Decision_RecordMarkerDecisionAttributes struct {
	RecordMarkerDecisionAttributes *RecordMarkerDecisionAttributes `protobuf:"bytes,9,opt,name=record_marker_decision_attributes,json=recordMarkerDecisionAttributes,proto3,oneof" json:"record_marker_decision_attributes,omitempty"`
}
type Decision_ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	ContinueAsNewWorkflowExecutionDecisionAttributes *ContinueAsNewWorkflowExecutionDecisionAttributes `protobuf:"bytes,10,opt,name=continue_as_new_workflow_execution_decision_attributes,json=continueAsNewWorkflowExecutionDecisionAttributes,proto3,oneof" json:"continue_as_new_workflow_execution_decision_attributes,omitempty"`
}
type Decision_StartChildWorkflowExecutionDecisionAttributes struct {
	StartChildWorkflowExecutionDecisionAttributes *StartChildWorkflowExecutionDecisionAttributes `protobuf:"bytes,11,opt,name=start_child_workflow_execution_decision_attributes,json=startChildWorkflowExecutionDecisionAttributes,proto3,oneof" json:"start_child_workflow_execution_decision_attributes,omitempty"`
}
type Decision_SignalExternalWorkflowExecutionDecisionAttributes struct {
	SignalExternalWorkflowExecutionDecisionAttributes *SignalExternalWorkflowExecutionDecisionAttributes `protobuf:"bytes,12,opt,name=signal_external_workflow_execution_decision_attributes,json=signalExternalWorkflowExecutionDecisionAttributes,proto3,oneof" json:"signal_external_workflow_execution_decision_attributes,omitempty"`
}
type Decision_UpsertWorkflowSearchAttributesDecisionAttributes struct {
	UpsertWorkflowSearchAttributesDecisionAttributes *UpsertWorkflowSearchAttributesDecisionAttributes `protobuf:"bytes,13,opt,name=upsert_workflow_search_attributes_decision_attributes,json=upsertWorkflowSearchAttributesDecisionAttributes,proto3,oneof" json:"upsert_workflow_search_attributes_decision_attributes,omitempty"`
}

func (*Decision_ScheduleActivityTaskDecisionAttributes) isDecision_Attributes()                   {}
func (*Decision_StartTimerDecisionAttributes) isDecision_Attributes()                             {}
func (*Decision_CompleteWorkflowExecutionDecisionAttributes) isDecision_Attributes()              {}
func (*Decision_FailWorkflowExecutionDecisionAttributes) isDecision_Attributes()                  {}
func (*Decision_RequestCancelActivityTaskDecisionAttributes) isDecision_Attributes()              {}
func (*Decision_CancelTimerDecisionAttributes) isDecision_Attributes()                            {}
func (*Decision_CancelWorkflowExecutionDecisionAttributes) isDecision_Attributes()                {}
func (*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}
func (*Decision_RecordMarkerDecisionAttributes) isDecision_Attributes()                           {}
func (*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) isDecision_Attributes()         {}
func (*Decision_StartChildWorkflowExecutionDecisionAttributes) isDecision_Attributes()            {}
func (*Decision_SignalExternalWorkflowExecutionDecisionAttributes) isDecision_Attributes()        {}
func (*Decision_UpsertWorkflowSearchAttributesDecisionAttributes) isDecision_Attributes()         {}

func (m *Decision) GetAttributes() isDecision_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Decision) GetScheduleActivityTaskDecisionAttributes() *ScheduleActivityTaskDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_ScheduleActivityTaskDecisionAttributes); ok {
		return x.ScheduleActivityTaskDecisionAttributes
	}
	return nil
}

func (m *Decision) GetStartTimerDecisionAttributes() *StartTimerDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_StartTimerDecisionAttributes); ok {
		return x.StartTimerDecisionAttributes
	}
	return nil
}

func (m *Decision) GetCompleteWorkflowExecutionDecisionAttributes() *CompleteWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_CompleteWorkflowExecutionDecisionAttributes); ok {
		return x.CompleteWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetFailWorkflowExecutionDecisionAttributes() *FailWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_FailWorkflowExecutionDecisionAttributes); ok {
		return x.FailWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetRequestCancelActivityTaskDecisionAttributes() *RequestCancelActivityTaskDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_RequestCancelActivityTaskDecisionAttributes); ok {
		return x.RequestCancelActivityTaskDecisionAttributes
	}
	return nil
}

func (m *Decision) GetCancelTimerDecisionAttributes() *CancelTimerDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_CancelTimerDecisionAttributes); ok {
		return x.CancelTimerDecisionAttributes
	}
	return nil
}

func (m *Decision) GetCancelWorkflowExecutionDecisionAttributes() *CancelWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_CancelWorkflowExecutionDecisionAttributes); ok {
		return x.CancelWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetRequestCancelExternalWorkflowExecutionDecisionAttributes() *RequestCancelExternalWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetRecordMarkerDecisionAttributes() *RecordMarkerDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_RecordMarkerDecisionAttributes); ok {
		return x.RecordMarkerDecisionAttributes
	}
	return nil
}

func (m *Decision) GetContinueAsNewWorkflowExecutionDecisionAttributes() *ContinueAsNewWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes); ok {
		return x.ContinueAsNewWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetStartChildWorkflowExecutionDecisionAttributes() *StartChildWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_StartChildWorkflowExecutionDecisionAttributes); ok {
		return x.StartChildWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetSignalExternalWorkflowExecutionDecisionAttributes() *SignalExternalWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_SignalExternalWorkflowExecutionDecisionAttributes); ok {
		return x.SignalExternalWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetUpsertWorkflowSearchAttributesDecisionAttributes() *UpsertWorkflowSearchAttributesDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes); ok {
		return x.UpsertWorkflowSearchAttributesDecisionAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Decision) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Decision_ScheduleActivityTaskDecisionAttributes)(nil),
		(*Decision_StartTimerDecisionAttributes)(nil),
		(*Decision_CompleteWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_FailWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RequestCancelActivityTaskDecisionAttributes)(nil),
		(*Decision_CancelTimerDecisionAttributes)(nil),
		(*Decision_CancelWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RecordMarkerDecisionAttributes)(nil),
		(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_StartChildWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_SignalExternalWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes)(nil),
	}
}

type ScheduleActivityTaskDecisionAttributes struct {
	ActivityId             string         `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType           *ActivityType  `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Domain                 string         `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList               *TaskList      `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                  *Payload       `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduleToCloseTimeout *time.Duration `protobuf:"bytes,6,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3,stdduration" json:"schedule_to_close_timeout,omitempty"`
	ScheduleToStartTimeout *time.Duration `protobuf:"bytes,7,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3,stdduration" json:"schedule_to_start_timeout,omitempty"`
	StartToCloseTimeout    *time.Duration `protobuf:"bytes,8,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,stdduration" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout       *time.Duration `protobuf:"bytes,9,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3,stdduration" json:"heartbeat_timeout,omitempty"`
	RetryPolicy            *RetryPolicy   `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Header                 *Header        `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	RequestLocalDispatch   bool           `protobuf:"varint,13,opt,name=request_local_dispatch,json=requestLocalDispatch,proto3" json:"request_local_dispatch,omitempty"`
}

func (m *ScheduleActivityTaskDecisionAttributes) Reset() {
	*m = ScheduleActivityTaskDecisionAttributes{}
}
func (*ScheduleActivityTaskDecisionAttributes) ProtoMessage() {}
func (*ScheduleActivityTaskDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{1}
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleActivityTaskDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleActivityTaskDecisionAttributes.Merge(m, src)
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleActivityTaskDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleActivityTaskDecisionAttributes proto.InternalMessageInfo

func (m *ScheduleActivityTaskDecisionAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ScheduleActivityTaskDecisionAttributes) GetActivityType() *ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ScheduleActivityTaskDecisionAttributes) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetInput() *Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetScheduleToCloseTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetScheduleToStartTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetHeartbeatTimeout() *time.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetRetryPolicy() *RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetRequestLocalDispatch() bool {
	if m != nil {
		return m.RequestLocalDispatch
	}
	return false
}

type StartTimerDecisionAttributes struct {
	TimerId            string         `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	StartToFireTimeout *time.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3,stdduration" json:"start_to_fire_timeout,omitempty"`
}

func (m *StartTimerDecisionAttributes) Reset()      { *m = StartTimerDecisionAttributes{} }
func (*StartTimerDecisionAttributes) ProtoMessage() {}
func (*StartTimerDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{2}
}
func (m *StartTimerDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartTimerDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartTimerDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartTimerDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTimerDecisionAttributes.Merge(m, src)
}
func (m *StartTimerDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartTimerDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTimerDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartTimerDecisionAttributes proto.InternalMessageInfo

func (m *StartTimerDecisionAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *StartTimerDecisionAttributes) GetStartToFireTimeout() *time.Duration {
	if m != nil {
		return m.StartToFireTimeout
	}
	return nil
}

type CompleteWorkflowExecutionDecisionAttributes struct {
	Result *Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CompleteWorkflowExecutionDecisionAttributes) Reset() {
	*m = CompleteWorkflowExecutionDecisionAttributes{}
}
func (*CompleteWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*CompleteWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{3}
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *CompleteWorkflowExecutionDecisionAttributes) GetResult() *Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

type FailWorkflowExecutionDecisionAttributes struct {
	Failure *Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *FailWorkflowExecutionDecisionAttributes) Reset() {
	*m = FailWorkflowExecutionDecisionAttributes{}
}
func (*FailWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*FailWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{4}
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FailWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FailWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *FailWorkflowExecutionDecisionAttributes) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type RequestCancelActivityTaskDecisionAttributes struct {
	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (m *RequestCancelActivityTaskDecisionAttributes) Reset() {
	*m = RequestCancelActivityTaskDecisionAttributes{}
}
func (*RequestCancelActivityTaskDecisionAttributes) ProtoMessage() {}
func (*RequestCancelActivityTaskDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{5}
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes.Merge(m, src)
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes proto.InternalMessageInfo

func (m *RequestCancelActivityTaskDecisionAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

type CancelTimerDecisionAttributes struct {
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
}

func (m *CancelTimerDecisionAttributes) Reset()      { *m = CancelTimerDecisionAttributes{} }
func (*CancelTimerDecisionAttributes) ProtoMessage() {}
func (*CancelTimerDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{6}
}
func (m *CancelTimerDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTimerDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTimerDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTimerDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTimerDecisionAttributes.Merge(m, src)
}
func (m *CancelTimerDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelTimerDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTimerDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTimerDecisionAttributes proto.InternalMessageInfo

func (m *CancelTimerDecisionAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

type CancelWorkflowExecutionDecisionAttributes struct {
	Details *Payload `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *CancelWorkflowExecutionDecisionAttributes) Reset() {
	*m = CancelWorkflowExecutionDecisionAttributes{}
}
func (*CancelWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*CancelWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{7}
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *CancelWorkflowExecutionDecisionAttributes) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

type RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Control           []byte             `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool               `protobuf:"varint,4,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionDecisionAttributes{}
}
func (*RequestCancelExternalWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{8}
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type RecordMarkerDecisionAttributes struct {
	MarkerName string   `protobuf:"bytes,1,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	Details    *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Header     *Header  `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *RecordMarkerDecisionAttributes) Reset()      { *m = RecordMarkerDecisionAttributes{} }
func (*RecordMarkerDecisionAttributes) ProtoMessage() {}
func (*RecordMarkerDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{9}
}
func (m *RecordMarkerDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordMarkerDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordMarkerDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordMarkerDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordMarkerDecisionAttributes.Merge(m, src)
}
func (m *RecordMarkerDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RecordMarkerDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordMarkerDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RecordMarkerDecisionAttributes proto.InternalMessageInfo

func (m *RecordMarkerDecisionAttributes) GetMarkerName() string {
	if m != nil {
		return m.MarkerName
	}
	return ""
}

func (m *RecordMarkerDecisionAttributes) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordMarkerDecisionAttributes) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	WorkflowType                 *WorkflowType          `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList                     *TaskList              `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                        *Payload               `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeout *time.Duration         `protobuf:"bytes,4,opt,name=execution_start_to_close_timeout,json=executionStartToCloseTimeout,proto3,stdduration" json:"execution_start_to_close_timeout,omitempty"`
	TaskStartToCloseTimeout      *time.Duration         `protobuf:"bytes,5,opt,name=task_start_to_close_timeout,json=taskStartToCloseTimeout,proto3,stdduration" json:"task_start_to_close_timeout,omitempty"`
	BackoffStartInterval         *time.Duration         `protobuf:"bytes,6,opt,name=backoff_start_interval,json=backoffStartInterval,proto3,stdduration" json:"backoff_start_interval,omitempty"`
	RetryPolicy                  *RetryPolicy           `protobuf:"bytes,7,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Initiator                    ContinueAsNewInitiator `protobuf:"varint,8,opt,name=initiator,proto3,enum=uber.cadence.api.v1.ContinueAsNewInitiator" json:"initiator,omitempty"`
	Failure                      *Failure               `protobuf:"bytes,9,opt,name=failure,proto3" json:"failure,omitempty"`
	LastCompletionResult         *Payload               `protobuf:"bytes,10,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	CronSchedule                 string                 `protobuf:"bytes,11,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                       *Header                `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	Memo                         *Memo                  `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes             *SearchAttributes      `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Reset() {
	*m = ContinueAsNewWorkflowExecutionDecisionAttributes{}
}
func (*ContinueAsNewWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*ContinueAsNewWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{10}
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetWorkflowType() *WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetInput() *Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetExecutionStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.ExecutionStartToCloseTimeout
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetTaskStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.TaskStartToCloseTimeout
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetBackoffStartInterval() *time.Duration {
	if m != nil {
		return m.BackoffStartInterval
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetRetryPolicy() *RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetInitiator() ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return CONTINUE_AS_NEW_INITIATOR_INVALID
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetLastCompletionResult() *Payload {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetMemo() *Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetSearchAttributes() *SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionDecisionAttributes struct {
	Domain                       string                `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId                   string                `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType                 *WorkflowType         `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskList                     *TaskList             `protobuf:"bytes,4,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Input                        *Payload              `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeout *time.Duration        `protobuf:"bytes,6,opt,name=execution_start_to_close_timeout,json=executionStartToCloseTimeout,proto3,stdduration" json:"execution_start_to_close_timeout,omitempty"`
	TaskStartToCloseTimeout      *time.Duration        `protobuf:"bytes,7,opt,name=task_start_to_close_timeout,json=taskStartToCloseTimeout,proto3,stdduration" json:"task_start_to_close_timeout,omitempty"`
	ParentClosePolicy            ParentClosePolicy     `protobuf:"varint,8,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=uber.cadence.api.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	Control                      []byte                `protobuf:"bytes,9,opt,name=control,proto3" json:"control,omitempty"`
	WorkflowIdReusePolicy        WorkflowIdReusePolicy `protobuf:"varint,10,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=uber.cadence.api.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy                  *RetryPolicy          `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule                 string                `protobuf:"bytes,12,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                       *Header               `protobuf:"bytes,13,opt,name=header,proto3" json:"header,omitempty"`
	Memo                         *Memo                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes             *SearchAttributes     `protobuf:"bytes,15,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *StartChildWorkflowExecutionDecisionAttributes) Reset() {
	*m = StartChildWorkflowExecutionDecisionAttributes{}
}
func (*StartChildWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{11}
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionDecisionAttributes) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowType() *WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetInput() *Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetExecutionStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.ExecutionStartToCloseTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetTaskStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.TaskStartToCloseTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetParentClosePolicy() ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return PARENT_CLOSE_POLICY_INVALID
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowIdReusePolicy() WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return WORKFLOW_ID_REUSE_POLICY_INVALID
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetRetryPolicy() *RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetMemo() *Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetSearchAttributes() *SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type SignalExternalWorkflowExecutionDecisionAttributes struct {
	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	SignalName        string             `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input             *Payload           `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Control           []byte             `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool               `protobuf:"varint,6,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionDecisionAttributes{}
}
func (*SignalExternalWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{12}
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetInput() *Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type UpsertWorkflowSearchAttributesDecisionAttributes struct {
	SearchAttributes *SearchAttributes `protobuf:"bytes,1,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Reset() {
	*m = UpsertWorkflowSearchAttributesDecisionAttributes{}
}
func (*UpsertWorkflowSearchAttributesDecisionAttributes) ProtoMessage() {}
func (*UpsertWorkflowSearchAttributesDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb529b236ea74dc2, []int{13}
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes.Merge(m, src)
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes proto.InternalMessageInfo

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) GetSearchAttributes() *SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*Decision)(nil), "uber.cadence.api.v1.Decision")
	proto.RegisterType((*ScheduleActivityTaskDecisionAttributes)(nil), "uber.cadence.api.v1.ScheduleActivityTaskDecisionAttributes")
	proto.RegisterType((*StartTimerDecisionAttributes)(nil), "uber.cadence.api.v1.StartTimerDecisionAttributes")
	proto.RegisterType((*CompleteWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.CompleteWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*FailWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.FailWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*RequestCancelActivityTaskDecisionAttributes)(nil), "uber.cadence.api.v1.RequestCancelActivityTaskDecisionAttributes")
	proto.RegisterType((*CancelTimerDecisionAttributes)(nil), "uber.cadence.api.v1.CancelTimerDecisionAttributes")
	proto.RegisterType((*CancelWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.CancelWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.RequestCancelExternalWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*RecordMarkerDecisionAttributes)(nil), "uber.cadence.api.v1.RecordMarkerDecisionAttributes")
	proto.RegisterType((*ContinueAsNewWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.ContinueAsNewWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.StartChildWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionDecisionAttributes)(nil), "uber.cadence.api.v1.SignalExternalWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*UpsertWorkflowSearchAttributesDecisionAttributes)(nil), "uber.cadence.api.v1.UpsertWorkflowSearchAttributesDecisionAttributes")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/api/v1/decision.proto", fileDescriptor_fb529b236ea74dc2)
}

var fileDescriptor_fb529b236ea74dc2 = []byte{
	// 1610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0xf3, 0xb1, 0x1f, 0x2f, 0x49, 0x69, 0x26, 0x6d, 0x9a, 0xb4, 0xa9, 0x93, 0x2e, 0x22,
	0xa5, 0x8d, 0xb2, 0xf9, 0x68, 0xa9, 0xaa, 0x82, 0x2a, 0x92, 0xb4, 0x51, 0x23, 0xb5, 0x25, 0x72,
	0x53, 0x90, 0x2a, 0xa1, 0x65, 0x62, 0x4f, 0x92, 0x51, 0xbc, 0xf6, 0x32, 0x9e, 0x4d, 0xba, 0x48,
	0x48, 0x15, 0x07, 0xc4, 0x05, 0x89, 0x23, 0x48, 0x9c, 0x90, 0x90, 0xca, 0x05, 0xae, 0x20, 0x4e,
	0xdc, 0x38, 0x96, 0x5b, 0x6f, 0x90, 0xf4, 0xc2, 0xb1, 0x12, 0xff, 0x00, 0x9a, 0xf1, 0x78, 0x77,
	0xb3, 0xf1, 0x3a, 0xe3, 0xa4, 0xea, 0x6d, 0x3d, 0x7e, 0xef, 0xf7, 0x7e, 0x33, 0xef, 0xcd, 0x7b,
	0x3f, 0x2f, 0x14, 0xaa, 0x6b, 0x84, 0x4d, 0xdb, 0xd8, 0x21, 0x9e, 0x4d, 0xa6, 0x71, 0x85, 0x4e,
	0x6f, 0xcf, 0x4e, 0x3b, 0xc4, 0xa6, 0x01, 0xf5, 0xbd, 0x62, 0x85, 0xf9, 0xdc, 0x47, 0x83, 0xc2,
	0xa6, 0xa8, 0x6c, 0x8a, 0xb8, 0x42, 0x8b, 0xdb, 0xb3, 0x67, 0xcd, 0x0d, 0xdf, 0xdf, 0x70, 0xc9,
	0xb4, 0x34, 0x59, 0xab, 0xae, 0x4f, 0x3b, 0x55, 0x86, 0x79, 0xdd, 0xe9, 0xec, 0xa8, 0x43, 0x2a,
	0xc4, 0x13, 0x2e, 0x94, 0x04, 0xd3, 0x1b, 0xfe, 0x86, 0x2f, 0xd7, 0xd5, 0xdb, 0xf1, 0xb8, 0xb0,
	0xb6, 0x5f, 0x2e, 0xd7, 0xfd, 0x63, 0x89, 0x71, 0x1c, 0x6c, 0xb9, 0x34, 0xe0, 0x49, 0x36, 0x3b,
	0x3e, 0xdb, 0x5a, 0x77, 0xfd, 0x9d, 0xd0, 0xa6, 0xf0, 0xd5, 0x00, 0xe4, 0x6e, 0xa9, 0xfd, 0xa0,
	0xef, 0x0c, 0xb8, 0x1c, 0xd8, 0x9b, 0xc4, 0xa9, 0xba, 0xa4, 0x84, 0x6d, 0x4e, 0xb7, 0x29, 0xaf,
	0x95, 0x04, 0x6a, 0x29, 0xda, 0x73, 0x09, 0x73, 0xce, 0xe8, 0x5a, 0x95, 0x93, 0x60, 0xd8, 0x18,
	0x37, 0xde, 0xee, 0x9d, 0x7b, 0xb7, 0x18, 0xb3, 0xff, 0xe2, 0x03, 0x05, 0x33, 0xaf, 0x50, 0x56,
	0x71, 0xb0, 0x15, 0xc5, 0x99, 0xaf, 0x43, 0xdc, 0xe9, 0xb0, 0x26, 0x02, 0x2d, 0x4b, 0xf4, 0x19,
	0x8c, 0x05, 0x1c, 0x33, 0x5e, 0xe2, 0xb4, 0x4c, 0x58, 0x2c, 0x9f, 0x4e, 0xc9, 0x67, 0x36, 0x9e,
	0x8f, 0xf0, 0x5d, 0x15, 0xae, 0xb1, 0x2c, 0x46, 0x83, 0x84, 0xf7, 0xe8, 0xa9, 0x01, 0xe2, 0xf4,
	0x2b, 0x2e, 0xe1, 0xa4, 0x14, 0x1d, 0x60, 0x89, 0x3c, 0x26, 0x76, 0x55, 0xa4, 0x34, 0x96, 0x4c,
	0x97, 0x24, 0xf3, 0x7e, 0x2c, 0x99, 0x45, 0x85, 0xf5, 0x91, 0x82, 0xba, 0x1d, 0x21, 0xc5, 0x72,
	0x9b, 0xb4, 0xf5, 0xcd, 0xd1, 0xf7, 0x06, 0x4c, 0xae, 0x63, 0xea, 0xea, 0xd2, 0xec, 0x96, 0x34,
	0xdf, 0x8b, 0xa5, 0xb9, 0x84, 0xa9, 0xab, 0x47, 0xf1, 0xe2, 0xba, 0x9e, 0x29, 0xfa, 0xc9, 0x80,
	0x19, 0x46, 0x3e, 0xad, 0x92, 0x80, 0x97, 0x6c, 0xec, 0xd9, 0xc4, 0xd5, 0xa8, 0xb3, 0x9e, 0x84,
	0xa3, 0xb4, 0x42, 0xb0, 0x45, 0x89, 0x75, 0x68, 0xb1, 0x4d, 0x32, 0x7d, 0x73, 0xf4, 0x39, 0x8c,
	0x2b, 0x8a, 0xed, 0x4b, 0x2e, 0x23, 0xa9, 0xcd, 0xc5, 0x67, 0x59, 0x3a, 0xb7, 0xaf, 0xb9, 0xf3,
	0x76, 0x92, 0x01, 0xfa, 0xc1, 0x80, 0x29, 0x15, 0x5f, 0x33, 0x97, 0x59, 0x49, 0xe6, 0x66, 0x02,
	0x19, 0xbd, 0x6c, 0x5e, 0xb2, 0x75, 0x8d, 0xd1, 0x5f, 0x06, 0xdc, 0x6c, 0xc9, 0x27, 0x79, 0xcc,
	0x09, 0xf3, 0xb0, 0x36, 0xeb, 0x9c, 0x64, 0x7d, 0xef, 0xf0, 0xec, 0xde, 0x56, 0xc0, 0x7a, 0x9b,
	0xb8, 0xce, 0x8e, 0xe8, 0x8b, 0x9e, 0x18, 0x70, 0x81, 0x11, 0xdb, 0x67, 0x4e, 0xa9, 0x8c, 0xd9,
	0x56, 0x9b, 0xcc, 0xe7, 0x25, 0xed, 0x2b, 0x6d, 0x68, 0x0b, 0xef, 0x7b, 0xd2, 0x39, 0x96, 0x9c,
	0xc9, 0x12, 0x2d, 0xd0, 0x6f, 0x06, 0x5c, 0xb3, 0x7d, 0x8f, 0x53, 0xaf, 0x4a, 0x4a, 0x38, 0x28,
	0x79, 0x64, 0x47, 0xf7, 0x38, 0x41, 0xf2, 0xba, 0xdd, 0xa6, 0xef, 0x84, 0x90, 0xf3, 0xc1, 0x7d,
	0xb2, 0xa3, 0x77, 0x8c, 0x33, 0x76, 0x4a, 0x1f, 0xf4, 0x8b, 0x01, 0x73, 0x61, 0xa7, 0xb6, 0x37,
	0xa9, 0xeb, 0xe8, 0xf2, 0xee, 0x95, 0xbc, 0x17, 0xda, 0x37, 0xef, 0x45, 0x81, 0xa6, 0x47, 0x7a,
	0x2a, 0x48, 0xe3, 0x80, 0x7e, 0x37, 0xe0, 0x5a, 0x40, 0x37, 0x44, 0xcd, 0xa6, 0x2d, 0xde, 0x3e,
	0xc9, 0x7a, 0x29, 0x9e, 0xb5, 0x84, 0x4c, 0x57, 0xb5, 0xb3, 0x41, 0x5a, 0x27, 0xf4, 0xab, 0x01,
	0xef, 0x54, 0x2b, 0x01, 0x61, 0xbc, 0x41, 0x3a, 0x20, 0x98, 0xd9, 0x9b, 0x4d, 0x44, 0x63, 0xc9,
	0xf7, 0x27, 0x94, 0xca, 0x43, 0x89, 0x18, 0xc5, 0x7f, 0x20, 0xf1, 0x1a, 0x41, 0xe3, 0x4b, 0xa5,
	0x9a, 0xd2, 0x67, 0xa1, 0x0f, 0xa0, 0x41, 0xa7, 0xf0, 0x63, 0x06, 0x26, 0xf4, 0x64, 0x03, 0x1a,
	0x83, 0xde, 0xfa, 0xd8, 0xa0, 0x8e, 0x14, 0x22, 0x79, 0x0b, 0xa2, 0xa5, 0x65, 0x07, 0x2d, 0x41,
	0x7f, 0x63, 0xae, 0xd4, 0x2a, 0x44, 0x69, 0x83, 0x0b, 0xb1, 0x7b, 0xad, 0x07, 0xab, 0x55, 0x88,
	0xd5, 0x87, 0x9b, 0x9e, 0xd0, 0x10, 0x64, 0x1c, 0xbf, 0x8c, 0xa9, 0x27, 0xe7, 0x79, 0xde, 0x52,
	0x4f, 0xe8, 0x06, 0xe4, 0xe5, 0xb8, 0x12, 0x6a, 0x4b, 0xcd, 0xd0, 0xf3, 0xb1, 0xd8, 0x62, 0x03,
	0x77, 0x69, 0xc0, 0xad, 0x1c, 0x57, 0xbf, 0xd0, 0x1c, 0xf4, 0x50, 0xaf, 0x52, 0xe5, 0x6a, 0xae,
	0x8d, 0xc6, 0xfa, 0xad, 0xe0, 0x9a, 0xeb, 0x63, 0xc7, 0x0a, 0x4d, 0xd1, 0x23, 0x18, 0xa9, 0x0b,
	0x33, 0xee, 0x97, 0x6c, 0xd7, 0x0f, 0x88, 0x1c, 0x4b, 0x7e, 0x95, 0xab, 0x21, 0x34, 0x52, 0x0c,
	0x25, 0x67, 0x31, 0x92, 0x9c, 0xc5, 0x5b, 0x4a, 0x72, 0x2e, 0x74, 0x7f, 0xfb, 0xf7, 0x98, 0x61,
	0x0d, 0x45, 0x08, 0xab, 0xfe, 0xa2, 0xf0, 0x5f, 0x0d, 0xdd, 0x5b, 0xb1, 0x1b, 0x2a, 0x4b, 0x60,
	0x67, 0x53, 0x63, 0xd7, 0x95, 0x96, 0xc0, 0x5e, 0x85, 0x21, 0x85, 0xd7, 0x4a, 0x3a, 0xa7, 0x07,
	0x3c, 0x18, 0x0a, 0xb3, 0xfd, 0x8c, 0xef, 0xc2, 0xc0, 0x26, 0xc1, 0x8c, 0xaf, 0x11, 0xdc, 0x60,
	0x9a, 0xd7, 0x03, 0x3c, 0x59, 0xf7, 0x8c, 0xd0, 0x16, 0xa1, 0x8f, 0x11, 0xce, 0x6a, 0xa5, 0x8a,
	0xef, 0x52, 0xbb, 0xa6, 0x3a, 0xd1, 0x78, 0x9b, 0xce, 0xce, 0x59, 0x6d, 0x45, 0xda, 0x59, 0xbd,
	0xac, 0xf1, 0x80, 0xae, 0x40, 0x66, 0x93, 0x60, 0x87, 0x30, 0xd5, 0x12, 0xce, 0xc5, 0xba, 0xdf,
	0x91, 0x26, 0x96, 0x32, 0x45, 0x57, 0x61, 0x28, 0x1a, 0x9e, 0xae, 0x6f, 0x63, 0xb7, 0xe4, 0xd0,
	0xa0, 0x82, 0xb9, 0xbd, 0x29, 0xaf, 0x66, 0xce, 0x3a, 0xa5, 0xde, 0xde, 0x15, 0x2f, 0x6f, 0xa9,
	0x77, 0x85, 0xaf, 0x0d, 0x18, 0x4d, 0x92, 0xb3, 0x68, 0x04, 0x72, 0xa1, 0x62, 0xa9, 0x5f, 0x8d,
	0xac, 0x7c, 0x5e, 0x76, 0x90, 0x05, 0xa7, 0xeb, 0xf9, 0x58, 0xa7, 0xac, 0x91, 0x8e, 0x4e, 0xbd,
	0xd3, 0x43, 0x2a, 0x1d, 0x4b, 0x94, 0x45, 0xd9, 0x28, 0xd8, 0x30, 0x99, 0x42, 0xd0, 0xa2, 0xab,
	0x90, 0x61, 0x24, 0xa8, 0xba, 0x5c, 0x7d, 0x3f, 0x24, 0xd7, 0xbf, 0xb2, 0x2d, 0x60, 0xb8, 0xa8,
	0x29, 0x47, 0xd1, 0x35, 0xc8, 0x0a, 0x39, 0x5a, 0x65, 0x24, 0x31, 0xc2, 0x52, 0x68, 0x63, 0x45,
	0xc6, 0x85, 0xfb, 0x30, 0x99, 0x42, 0x4d, 0x1e, 0xda, 0x83, 0x0a, 0x37, 0xe0, 0x7c, 0xa2, 0x04,
	0x4c, 0xc8, 0x53, 0xc1, 0x86, 0x4b, 0xda, 0x8a, 0x4d, 0x6c, 0xd8, 0x21, 0x1c, 0x53, 0x37, 0xd0,
	0x3a, 0xd2, 0xc8, 0xb8, 0xf0, 0x9f, 0x01, 0xd7, 0x8f, 0xaa, 0xb0, 0x9a, 0x3a, 0xa3, 0xb1, 0xaf,
	0x33, 0x3e, 0x04, 0x74, 0x70, 0x76, 0xaa, 0xf2, 0x9a, 0x88, 0xe5, 0x75, 0x20, 0x9a, 0x35, 0xb0,
	0xd3, 0xba, 0x84, 0x86, 0x21, 0x2b, 0x94, 0x08, 0xf3, 0x5d, 0xd9, 0x89, 0xfb, 0xac, 0xe8, 0x11,
	0x15, 0x61, 0xb0, 0x45, 0x68, 0xf8, 0x9e, 0x5b, 0x93, 0x4d, 0x39, 0x67, 0x0d, 0xd8, 0xcd, 0x22,
	0xe0, 0x03, 0xcf, 0xad, 0x15, 0x7e, 0x36, 0xc0, 0x4c, 0x16, 0x68, 0x22, 0xb5, 0x4a, 0xf9, 0x79,
	0xb8, 0x4c, 0xa2, 0xd4, 0x86, 0x4b, 0xf7, 0x71, 0x99, 0x34, 0x9f, 0x78, 0x67, 0x8a, 0x13, 0x6f,
	0xea, 0x12, 0x5d, 0xda, 0x5d, 0xa2, 0xf0, 0x45, 0x0e, 0x66, 0xd2, 0x2a, 0x37, 0x31, 0x00, 0xeb,
	0xe7, 0x21, 0x07, 0xa0, 0x91, 0x30, 0x00, 0x23, 0xc0, 0x70, 0x00, 0xee, 0x34, 0x3d, 0xed, 0x1f,
	0x74, 0x9d, 0x47, 0x1c, 0x74, 0x5d, 0xfa, 0x83, 0x6e, 0x03, 0xc6, 0x1b, 0x8a, 0xab, 0xcd, 0xe8,
	0xe8, 0xd6, 0xeb, 0x55, 0xa3, 0x75, 0xa0, 0x07, 0x31, 0x33, 0xe4, 0x63, 0x38, 0x27, 0x37, 0xd6,
	0x26, 0x46, 0x8f, 0x5e, 0x8c, 0x33, 0x02, 0x23, 0x0e, 0xfe, 0x21, 0x0c, 0xad, 0x61, 0x7b, 0xcb,
	0x5f, 0x5f, 0x57, 0x11, 0xa8, 0xc7, 0x09, 0xdb, 0xc6, 0xae, 0xee, 0xb4, 0x3e, 0xa5, 0xdc, 0x25,
	0xf8, 0xb2, 0x72, 0x3e, 0x30, 0xab, 0xb2, 0x47, 0x99, 0x55, 0xcb, 0x90, 0xa7, 0x1e, 0xe5, 0x14,
	0x73, 0x9f, 0xc9, 0x39, 0x7c, 0x62, 0x6e, 0xf2, 0xf0, 0xef, 0x85, 0xe5, 0xc8, 0xc5, 0x6a, 0x78,
	0x37, 0xf7, 0xda, 0x7c, 0x8a, 0x5e, 0x8b, 0x2c, 0x18, 0x72, 0xb1, 0xf8, 0x66, 0x0c, 0x07, 0x87,
	0x48, 0xb6, 0x1a, 0x0a, 0xa0, 0x51, 0x2b, 0xa7, 0x84, 0xef, 0x62, 0xdd, 0xd5, 0x92, 0x9e, 0xe8,
	0x4d, 0xe8, 0xb7, 0x99, 0xa8, 0x1a, 0x25, 0x45, 0xe4, 0x20, 0xcf, 0x5b, 0x7d, 0x62, 0x31, 0xd2,
	0x95, 0x47, 0x9b, 0xd3, 0x53, 0xd0, 0x5d, 0x26, 0x65, 0x5f, 0x09, 0xe6, 0x91, 0x58, 0x97, 0x7b,
	0xa4, 0xec, 0x5b, 0xd2, 0x0c, 0x59, 0x30, 0x70, 0x40, 0x80, 0x0f, 0x9f, 0x90, 0xbe, 0x6f, 0xc5,
	0x7f, 0x29, 0xb4, 0x48, 0x65, 0xeb, 0x64, 0xd0, 0xb2, 0x52, 0xd8, 0xcd, 0xc2, 0x54, 0xaa, 0xcf,
	0xa0, 0xb6, 0x0d, 0x7a, 0x0c, 0x7a, 0xeb, 0x9d, 0x81, 0x3a, 0xf2, 0x4e, 0xe7, 0x2d, 0x88, 0x96,
	0x42, 0xed, 0xbc, 0xbf, 0x75, 0x74, 0xbd, 0x82, 0xd6, 0xf1, 0x1a, 0x34, 0xb2, 0x4e, 0xeb, 0xc8,
	0xbc, 0x86, 0xd6, 0x91, 0x3d, 0x66, 0xeb, 0xf8, 0x10, 0x06, 0x2b, 0x98, 0x11, 0x8f, 0x2b, 0x5c,
	0x75, 0xd5, 0xc3, 0x8b, 0x3a, 0xd1, 0xe6, 0x24, 0x84, 0xbd, 0x44, 0x51, 0x17, 0x7e, 0xa0, 0xd2,
	0xba, 0xd4, 0x3c, 0x42, 0xf3, 0xfb, 0x47, 0xa8, 0x0d, 0xc3, 0x4d, 0x25, 0x51, 0x62, 0xa4, 0xda,
	0x08, 0x0b, 0x32, 0xec, 0xe5, 0xc4, 0xe4, 0x2f, 0x3b, 0x96, 0x70, 0x51, 0xa1, 0x4f, 0xef, 0xc4,
	0x2d, 0xbf, 0x1a, 0x99, 0x7d, 0xe0, 0x8e, 0xf7, 0x25, 0xde, 0xf1, 0xfe, 0xf4, 0x77, 0xfc, 0xc4,
	0x31, 0xee, 0xf8, 0x1b, 0xc7, 0xbb, 0xe3, 0x7f, 0x74, 0xc2, 0x6c, 0xea, 0x3f, 0x0d, 0x5e, 0xb7,
	0x10, 0x1b, 0x83, 0x5e, 0xf5, 0x5f, 0x89, 0xd4, 0x46, 0xe1, 0x67, 0x31, 0x84, 0x4b, 0x52, 0x1b,
	0xd5, 0xaf, 0x6e, 0xb7, 0xfe, 0xd5, 0x6d, 0x2a, 0xcd, 0x1e, 0x2d, 0x75, 0x97, 0x69, 0xa7, 0xee,
	0xbe, 0x34, 0x60, 0x26, 0xed, 0x7f, 0x17, 0xf1, 0xc9, 0x34, 0x8e, 0x95, 0xcc, 0x85, 0x4f, 0x9e,
	0xed, 0x9a, 0x1d, 0xcf, 0x77, 0xcd, 0x8e, 0x97, 0xbb, 0xa6, 0xf1, 0x64, 0xcf, 0x34, 0x9e, 0xee,
	0x99, 0xc6, 0x9f, 0x7b, 0xa6, 0xf1, 0x6c, 0xcf, 0x34, 0xfe, 0xd9, 0x33, 0x8d, 0x7f, 0xf7, 0xcc,
	0x8e, 0x97, 0x7b, 0xa6, 0xf1, 0xcd, 0x0b, 0xb3, 0xe3, 0xd9, 0x0b, 0xb3, 0xe3, 0xf9, 0x0b, 0xb3,
	0x03, 0xce, 0xd8, 0x7e, 0x39, 0x2e, 0xe2, 0x42, 0x6e, 0xbe, 0x42, 0x57, 0x44, 0x27, 0x59, 0x31,
	0x1e, 0xf5, 0xe0, 0x0a, 0xdd, 0x9e, 0x5d, 0xcb, 0xc8, 0xce, 0x72, 0xe5, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb1, 0xe2, 0x70, 0x1c, 0xa4, 0x1a, 0x00, 0x00,
}

func (this *Decision) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision)
	if !ok {
		that2, ok := that.(Decision)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Attributes == nil {
		if this.Attributes != nil {
			return false
		}
	} else if this.Attributes == nil {
		return false
	} else if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	return true
}
func (this *Decision_ScheduleActivityTaskDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_ScheduleActivityTaskDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_ScheduleActivityTaskDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScheduleActivityTaskDecisionAttributes.Equal(that1.ScheduleActivityTaskDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_StartTimerDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_StartTimerDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_StartTimerDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartTimerDecisionAttributes.Equal(that1.StartTimerDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_CompleteWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_CompleteWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_CompleteWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompleteWorkflowExecutionDecisionAttributes.Equal(that1.CompleteWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_FailWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_FailWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_FailWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailWorkflowExecutionDecisionAttributes.Equal(that1.FailWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_RequestCancelActivityTaskDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_RequestCancelActivityTaskDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_RequestCancelActivityTaskDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelActivityTaskDecisionAttributes.Equal(that1.RequestCancelActivityTaskDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_CancelTimerDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_CancelTimerDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_CancelTimerDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelTimerDecisionAttributes.Equal(that1.CancelTimerDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_CancelWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_CancelWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_CancelWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelWorkflowExecutionDecisionAttributes.Equal(that1.CancelWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelExternalWorkflowExecutionDecisionAttributes.Equal(that1.RequestCancelExternalWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_RecordMarkerDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_RecordMarkerDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_RecordMarkerDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RecordMarkerDecisionAttributes.Equal(that1.RecordMarkerDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_ContinueAsNewWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ContinueAsNewWorkflowExecutionDecisionAttributes.Equal(that1.ContinueAsNewWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_StartChildWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_StartChildWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_StartChildWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartChildWorkflowExecutionDecisionAttributes.Equal(that1.StartChildWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_SignalExternalWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_SignalExternalWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_SignalExternalWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignalExternalWorkflowExecutionDecisionAttributes.Equal(that1.SignalExternalWorkflowExecutionDecisionAttributes) {
		return false
	}
	return true
}
func (this *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes)
	if !ok {
		that2, ok := that.(Decision_UpsertWorkflowSearchAttributesDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpsertWorkflowSearchAttributesDecisionAttributes.Equal(that1.UpsertWorkflowSearchAttributesDecisionAttributes) {
		return false
	}
	return true
}
func (this *ScheduleActivityTaskDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleActivityTaskDecisionAttributes)
	if !ok {
		that2, ok := that.(ScheduleActivityTaskDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.ScheduleToCloseTimeout != nil && that1.ScheduleToCloseTimeout != nil {
		if *this.ScheduleToCloseTimeout != *that1.ScheduleToCloseTimeout {
			return false
		}
	} else if this.ScheduleToCloseTimeout != nil {
		return false
	} else if that1.ScheduleToCloseTimeout != nil {
		return false
	}
	if this.ScheduleToStartTimeout != nil && that1.ScheduleToStartTimeout != nil {
		if *this.ScheduleToStartTimeout != *that1.ScheduleToStartTimeout {
			return false
		}
	} else if this.ScheduleToStartTimeout != nil {
		return false
	} else if that1.ScheduleToStartTimeout != nil {
		return false
	}
	if this.StartToCloseTimeout != nil && that1.StartToCloseTimeout != nil {
		if *this.StartToCloseTimeout != *that1.StartToCloseTimeout {
			return false
		}
	} else if this.StartToCloseTimeout != nil {
		return false
	} else if that1.StartToCloseTimeout != nil {
		return false
	}
	if this.HeartbeatTimeout != nil && that1.HeartbeatTimeout != nil {
		if *this.HeartbeatTimeout != *that1.HeartbeatTimeout {
			return false
		}
	} else if this.HeartbeatTimeout != nil {
		return false
	} else if that1.HeartbeatTimeout != nil {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if this.RequestLocalDispatch != that1.RequestLocalDispatch {
		return false
	}
	return true
}
func (this *StartTimerDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartTimerDecisionAttributes)
	if !ok {
		that2, ok := that.(StartTimerDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	if this.StartToFireTimeout != nil && that1.StartToFireTimeout != nil {
		if *this.StartToFireTimeout != *that1.StartToFireTimeout {
			return false
		}
	} else if this.StartToFireTimeout != nil {
		return false
	} else if that1.StartToFireTimeout != nil {
		return false
	}
	return true
}
func (this *CompleteWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(CompleteWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *FailWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(FailWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *RequestCancelActivityTaskDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelActivityTaskDecisionAttributes)
	if !ok {
		that2, ok := that.(RequestCancelActivityTaskDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	return true
}
func (this *CancelTimerDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelTimerDecisionAttributes)
	if !ok {
		that2, ok := that.(CancelTimerDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	return true
}
func (this *CancelWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(CancelWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !bytes.Equal(this.Control, that1.Control) {
		return false
	}
	if this.ChildWorkflowOnly != that1.ChildWorkflowOnly {
		return false
	}
	return true
}
func (this *RecordMarkerDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordMarkerDecisionAttributes)
	if !ok {
		that2, ok := that.(RecordMarkerDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarkerName != that1.MarkerName {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *ContinueAsNewWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContinueAsNewWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(ContinueAsNewWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.ExecutionStartToCloseTimeout != nil && that1.ExecutionStartToCloseTimeout != nil {
		if *this.ExecutionStartToCloseTimeout != *that1.ExecutionStartToCloseTimeout {
			return false
		}
	} else if this.ExecutionStartToCloseTimeout != nil {
		return false
	} else if that1.ExecutionStartToCloseTimeout != nil {
		return false
	}
	if this.TaskStartToCloseTimeout != nil && that1.TaskStartToCloseTimeout != nil {
		if *this.TaskStartToCloseTimeout != *that1.TaskStartToCloseTimeout {
			return false
		}
	} else if this.TaskStartToCloseTimeout != nil {
		return false
	} else if that1.TaskStartToCloseTimeout != nil {
		return false
	}
	if this.BackoffStartInterval != nil && that1.BackoffStartInterval != nil {
		if *this.BackoffStartInterval != *that1.BackoffStartInterval {
			return false
		}
	} else if this.BackoffStartInterval != nil {
		return false
	} else if that1.BackoffStartInterval != nil {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if !this.LastCompletionResult.Equal(that1.LastCompletionResult) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *StartChildWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartChildWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(StartChildWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.ExecutionStartToCloseTimeout != nil && that1.ExecutionStartToCloseTimeout != nil {
		if *this.ExecutionStartToCloseTimeout != *that1.ExecutionStartToCloseTimeout {
			return false
		}
	} else if this.ExecutionStartToCloseTimeout != nil {
		return false
	} else if that1.ExecutionStartToCloseTimeout != nil {
		return false
	}
	if this.TaskStartToCloseTimeout != nil && that1.TaskStartToCloseTimeout != nil {
		if *this.TaskStartToCloseTimeout != *that1.TaskStartToCloseTimeout {
			return false
		}
	} else if this.TaskStartToCloseTimeout != nil {
		return false
	} else if that1.TaskStartToCloseTimeout != nil {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	if !bytes.Equal(this.Control, that1.Control) {
		return false
	}
	if this.WorkflowIdReusePolicy != that1.WorkflowIdReusePolicy {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *SignalExternalWorkflowExecutionDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecutionDecisionAttributes)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecutionDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !bytes.Equal(this.Control, that1.Control) {
		return false
	}
	if this.ChildWorkflowOnly != that1.ChildWorkflowOnly {
		return false
	}
	return true
}
func (this *UpsertWorkflowSearchAttributesDecisionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertWorkflowSearchAttributesDecisionAttributes)
	if !ok {
		that2, ok := that.(UpsertWorkflowSearchAttributesDecisionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *Decision) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&apiv1.Decision{")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Decision_ScheduleActivityTaskDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_ScheduleActivityTaskDecisionAttributes{` +
		`ScheduleActivityTaskDecisionAttributes:` + fmt.Sprintf("%#v", this.ScheduleActivityTaskDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_StartTimerDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_StartTimerDecisionAttributes{` +
		`StartTimerDecisionAttributes:` + fmt.Sprintf("%#v", this.StartTimerDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_CompleteWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_CompleteWorkflowExecutionDecisionAttributes{` +
		`CompleteWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.CompleteWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_FailWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_FailWorkflowExecutionDecisionAttributes{` +
		`FailWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.FailWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_RequestCancelActivityTaskDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_RequestCancelActivityTaskDecisionAttributes{` +
		`RequestCancelActivityTaskDecisionAttributes:` + fmt.Sprintf("%#v", this.RequestCancelActivityTaskDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_CancelTimerDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_CancelTimerDecisionAttributes{` +
		`CancelTimerDecisionAttributes:` + fmt.Sprintf("%#v", this.CancelTimerDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_CancelWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_CancelWorkflowExecutionDecisionAttributes{` +
		`CancelWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.CancelWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes{` +
		`RequestCancelExternalWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.RequestCancelExternalWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_RecordMarkerDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_RecordMarkerDecisionAttributes{` +
		`RecordMarkerDecisionAttributes:` + fmt.Sprintf("%#v", this.RecordMarkerDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_ContinueAsNewWorkflowExecutionDecisionAttributes{` +
		`ContinueAsNewWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.ContinueAsNewWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_StartChildWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_StartChildWorkflowExecutionDecisionAttributes{` +
		`StartChildWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.StartChildWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_SignalExternalWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_SignalExternalWorkflowExecutionDecisionAttributes{` +
		`SignalExternalWorkflowExecutionDecisionAttributes:` + fmt.Sprintf("%#v", this.SignalExternalWorkflowExecutionDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apiv1.Decision_UpsertWorkflowSearchAttributesDecisionAttributes{` +
		`UpsertWorkflowSearchAttributesDecisionAttributes:` + fmt.Sprintf("%#v", this.UpsertWorkflowSearchAttributesDecisionAttributes) + `}`}, ", ")
	return s
}
func (this *ScheduleActivityTaskDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&apiv1.ScheduleActivityTaskDecisionAttributes{")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ScheduleToCloseTimeout: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeout)+",\n")
	s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	s = append(s, "HeartbeatTimeout: "+fmt.Sprintf("%#v", this.HeartbeatTimeout)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "RequestLocalDispatch: "+fmt.Sprintf("%#v", this.RequestLocalDispatch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartTimerDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.StartTimerDecisionAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "StartToFireTimeout: "+fmt.Sprintf("%#v", this.StartToFireTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.CompleteWorkflowExecutionDecisionAttributes{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.FailWorkflowExecutionDecisionAttributes{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelActivityTaskDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.RequestCancelActivityTaskDecisionAttributes{")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelTimerDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.CancelTimerDecisionAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.CancelWorkflowExecutionDecisionAttributes{")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelExternalWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.RequestCancelExternalWorkflowExecutionDecisionAttributes{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "ChildWorkflowOnly: "+fmt.Sprintf("%#v", this.ChildWorkflowOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordMarkerDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.RecordMarkerDecisionAttributes{")
	s = append(s, "MarkerName: "+fmt.Sprintf("%#v", this.MarkerName)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContinueAsNewWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&apiv1.ContinueAsNewWorkflowExecutionDecisionAttributes{")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ExecutionStartToCloseTimeout: "+fmt.Sprintf("%#v", this.ExecutionStartToCloseTimeout)+",\n")
	s = append(s, "TaskStartToCloseTimeout: "+fmt.Sprintf("%#v", this.TaskStartToCloseTimeout)+",\n")
	s = append(s, "BackoffStartInterval: "+fmt.Sprintf("%#v", this.BackoffStartInterval)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	if this.LastCompletionResult != nil {
		s = append(s, "LastCompletionResult: "+fmt.Sprintf("%#v", this.LastCompletionResult)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartChildWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&apiv1.StartChildWorkflowExecutionDecisionAttributes{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ExecutionStartToCloseTimeout: "+fmt.Sprintf("%#v", this.ExecutionStartToCloseTimeout)+",\n")
	s = append(s, "TaskStartToCloseTimeout: "+fmt.Sprintf("%#v", this.TaskStartToCloseTimeout)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "WorkflowIdReusePolicy: "+fmt.Sprintf("%#v", this.WorkflowIdReusePolicy)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalExternalWorkflowExecutionDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&apiv1.SignalExternalWorkflowExecutionDecisionAttributes{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "ChildWorkflowOnly: "+fmt.Sprintf("%#v", this.ChildWorkflowOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertWorkflowSearchAttributesDecisionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.UpsertWorkflowSearchAttributesDecisionAttributes{")
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDecision(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Decision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Decision_ScheduleActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_ScheduleActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduleActivityTaskDecisionAttributes != nil {
		{
			size, err := m.ScheduleActivityTaskDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Decision_StartTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_StartTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartTimerDecisionAttributes != nil {
		{
			size, err := m.StartTimerDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Decision_CompleteWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_CompleteWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompleteWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.CompleteWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_FailWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_FailWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.FailWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Decision_RequestCancelActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_RequestCancelActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelActivityTaskDecisionAttributes != nil {
		{
			size, err := m.RequestCancelActivityTaskDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_CancelTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_CancelTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelTimerDecisionAttributes != nil {
		{
			size, err := m.CancelTimerDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Decision_CancelWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_CancelWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.CancelWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Decision_RecordMarkerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_RecordMarkerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RecordMarkerDecisionAttributes != nil {
		{
			size, err := m.RecordMarkerDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContinueAsNewWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.ContinueAsNewWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Decision_StartChildWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_StartChildWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_SignalExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_SignalExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpsertWorkflowSearchAttributesDecisionAttributes != nil {
		{
			size, err := m.UpsertWorkflowSearchAttributesDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ScheduleActivityTaskDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestLocalDispatch {
		i--
		if m.RequestLocalDispatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.HeartbeatTimeout != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintDecision(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x4a
	}
	if m.StartToCloseTimeout != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintDecision(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x42
	}
	if m.ScheduleToStartTimeout != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToStartTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintDecision(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x3a
	}
	if m.ScheduleToCloseTimeout != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintDecision(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartTimerDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartToFireTimeout != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToFireTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToFireTimeout):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintDecision(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelActivityTaskDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelTimerDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordMarkerDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordMarkerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordMarkerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarkerName) > 0 {
		i -= len(m.MarkerName)
		copy(dAtA[i:], m.MarkerName)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.MarkerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x5a
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Initiator != 0 {
		i = encodeVarintDecision(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x40
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BackoffStartInterval != nil {
		n36, err36 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.BackoffStartInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.BackoffStartInterval):])
		if err36 != nil {
			return 0, err36
		}
		i -= n36
		i = encodeVarintDecision(dAtA, i, uint64(n36))
		i--
		dAtA[i] = 0x32
	}
	if m.TaskStartToCloseTimeout != nil {
		n37, err37 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.TaskStartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.TaskStartToCloseTimeout):])
		if err37 != nil {
			return 0, err37
		}
		i -= n37
		i = encodeVarintDecision(dAtA, i, uint64(n37))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExecutionStartToCloseTimeout != nil {
		n38, err38 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ExecutionStartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ExecutionStartToCloseTimeout):])
		if err38 != nil {
			return 0, err38
		}
		i -= n38
		i = encodeVarintDecision(dAtA, i, uint64(n38))
		i--
		dAtA[i] = 0x22
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x62
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintDecision(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintDecision(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x40
	}
	if m.TaskStartToCloseTimeout != nil {
		n46, err46 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.TaskStartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.TaskStartToCloseTimeout):])
		if err46 != nil {
			return 0, err46
		}
		i -= n46
		i = encodeVarintDecision(dAtA, i, uint64(n46))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExecutionStartToCloseTimeout != nil {
		n47, err47 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ExecutionStartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ExecutionStartToCloseTimeout):])
		if err47 != nil {
			return 0, err47
		}
		i -= n47
		i = encodeVarintDecision(dAtA, i, uint64(n47))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintDecision(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDecision(dAtA []byte, offset int, v uint64) int {
	offset -= sovDecision(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Decision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *Decision_ScheduleActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduleActivityTaskDecisionAttributes != nil {
		l = m.ScheduleActivityTaskDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_StartTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimerDecisionAttributes != nil {
		l = m.StartTimerDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_CompleteWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompleteWorkflowExecutionDecisionAttributes != nil {
		l = m.CompleteWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_FailWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailWorkflowExecutionDecisionAttributes != nil {
		l = m.FailWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_RequestCancelActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelActivityTaskDecisionAttributes != nil {
		l = m.RequestCancelActivityTaskDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_CancelTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelTimerDecisionAttributes != nil {
		l = m.CancelTimerDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_CancelWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelWorkflowExecutionDecisionAttributes != nil {
		l = m.CancelWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_RecordMarkerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordMarkerDecisionAttributes != nil {
		l = m.RecordMarkerDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContinueAsNewWorkflowExecutionDecisionAttributes != nil {
		l = m.ContinueAsNewWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_StartChildWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionDecisionAttributes != nil {
		l = m.StartChildWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_SignalExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionDecisionAttributes != nil {
		l = m.SignalExternalWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpsertWorkflowSearchAttributesDecisionAttributes != nil {
		l = m.UpsertWorkflowSearchAttributesDecisionAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}
func (m *ScheduleActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ScheduleToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ScheduleToStartTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.RequestLocalDispatch {
		n += 2
	}
	return n
}

func (m *StartTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.StartToFireTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToFireTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *CompleteWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *FailWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *RequestCancelActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *CancelTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *CancelWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *RecordMarkerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarkerName)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ExecutionStartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ExecutionStartToCloseTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.TaskStartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.TaskStartToCloseTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.BackoffStartInterval != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.BackoffStartInterval)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Initiator != 0 {
		n += 1 + sovDecision(uint64(m.Initiator))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ExecutionStartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ExecutionStartToCloseTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.TaskStartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.TaskStartToCloseTimeout)
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovDecision(uint64(m.ParentClosePolicy))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovDecision(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovDecision(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovDecision(uint64(l))
	}
	return n
}

func sovDecision(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDecision(x uint64) (n int) {
	return sovDecision(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Decision) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision{`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_ScheduleActivityTaskDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_ScheduleActivityTaskDecisionAttributes{`,
		`ScheduleActivityTaskDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleActivityTaskDecisionAttributes), "ScheduleActivityTaskDecisionAttributes", "ScheduleActivityTaskDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_StartTimerDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_StartTimerDecisionAttributes{`,
		`StartTimerDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StartTimerDecisionAttributes), "StartTimerDecisionAttributes", "StartTimerDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_CompleteWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_CompleteWorkflowExecutionDecisionAttributes{`,
		`CompleteWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.CompleteWorkflowExecutionDecisionAttributes), "CompleteWorkflowExecutionDecisionAttributes", "CompleteWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_FailWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_FailWorkflowExecutionDecisionAttributes{`,
		`FailWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.FailWorkflowExecutionDecisionAttributes), "FailWorkflowExecutionDecisionAttributes", "FailWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_RequestCancelActivityTaskDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_RequestCancelActivityTaskDecisionAttributes{`,
		`RequestCancelActivityTaskDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelActivityTaskDecisionAttributes), "RequestCancelActivityTaskDecisionAttributes", "RequestCancelActivityTaskDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_CancelTimerDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_CancelTimerDecisionAttributes{`,
		`CancelTimerDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.CancelTimerDecisionAttributes), "CancelTimerDecisionAttributes", "CancelTimerDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_CancelWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_CancelWorkflowExecutionDecisionAttributes{`,
		`CancelWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.CancelWorkflowExecutionDecisionAttributes), "CancelWorkflowExecutionDecisionAttributes", "CancelWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes{`,
		`RequestCancelExternalWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelExternalWorkflowExecutionDecisionAttributes), "RequestCancelExternalWorkflowExecutionDecisionAttributes", "RequestCancelExternalWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_RecordMarkerDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_RecordMarkerDecisionAttributes{`,
		`RecordMarkerDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RecordMarkerDecisionAttributes), "RecordMarkerDecisionAttributes", "RecordMarkerDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_ContinueAsNewWorkflowExecutionDecisionAttributes{`,
		`ContinueAsNewWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ContinueAsNewWorkflowExecutionDecisionAttributes), "ContinueAsNewWorkflowExecutionDecisionAttributes", "ContinueAsNewWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_StartChildWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_StartChildWorkflowExecutionDecisionAttributes{`,
		`StartChildWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StartChildWorkflowExecutionDecisionAttributes), "StartChildWorkflowExecutionDecisionAttributes", "StartChildWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_SignalExternalWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_SignalExternalWorkflowExecutionDecisionAttributes{`,
		`SignalExternalWorkflowExecutionDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SignalExternalWorkflowExecutionDecisionAttributes), "SignalExternalWorkflowExecutionDecisionAttributes", "SignalExternalWorkflowExecutionDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decision_UpsertWorkflowSearchAttributesDecisionAttributes{`,
		`UpsertWorkflowSearchAttributesDecisionAttributes:` + strings.Replace(fmt.Sprintf("%v", this.UpsertWorkflowSearchAttributesDecisionAttributes), "UpsertWorkflowSearchAttributesDecisionAttributes", "UpsertWorkflowSearchAttributesDecisionAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduleActivityTaskDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduleActivityTaskDecisionAttributes{`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "ActivityType", 1) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "TaskList", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payload", "Payload", 1) + `,`,
		`ScheduleToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "duration.Duration", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`HeartbeatTimeout:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatTimeout), "Duration", "duration.Duration", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "RetryPolicy", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`RequestLocalDispatch:` + fmt.Sprintf("%v", this.RequestLocalDispatch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartTimerDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartTimerDecisionAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`StartToFireTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToFireTimeout), "Duration", "duration.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteWorkflowExecutionDecisionAttributes{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payload", "Payload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailWorkflowExecutionDecisionAttributes{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelActivityTaskDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelActivityTaskDecisionAttributes{`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelTimerDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelTimerDecisionAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelWorkflowExecutionDecisionAttributes{`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecutionDecisionAttributes{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`ChildWorkflowOnly:` + fmt.Sprintf("%v", this.ChildWorkflowOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordMarkerDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordMarkerDecisionAttributes{`,
		`MarkerName:` + fmt.Sprintf("%v", this.MarkerName) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContinueAsNewWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContinueAsNewWorkflowExecutionDecisionAttributes{`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "WorkflowType", 1) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "TaskList", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payload", "Payload", 1) + `,`,
		`ExecutionStartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionStartToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`TaskStartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.TaskStartToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`BackoffStartInterval:` + strings.Replace(fmt.Sprintf("%v", this.BackoffStartInterval), "Duration", "duration.Duration", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "RetryPolicy", 1) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "Failure", 1) + `,`,
		`LastCompletionResult:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionResult), "Payload", "Payload", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartChildWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartChildWorkflowExecutionDecisionAttributes{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "WorkflowType", 1) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "TaskList", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payload", "Payload", 1) + `,`,
		`ExecutionStartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionStartToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`TaskStartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.TaskStartToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`WorkflowIdReusePolicy:` + fmt.Sprintf("%v", this.WorkflowIdReusePolicy) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "RetryPolicy", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecutionDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalExternalWorkflowExecutionDecisionAttributes{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payload", "Payload", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`ChildWorkflowOnly:` + fmt.Sprintf("%v", this.ChildWorkflowOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertWorkflowSearchAttributesDecisionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertWorkflowSearchAttributesDecisionAttributes{`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDecision(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Decision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleActivityTaskDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleActivityTaskDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_ScheduleActivityTaskDecisionAttributes{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimerDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartTimerDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_StartTimerDecisionAttributes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompleteWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_CompleteWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FailWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_FailWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelActivityTaskDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelActivityTaskDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_RequestCancelActivityTaskDecisionAttributes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTimerDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelTimerDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_CancelTimerDecisionAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_CancelWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordMarkerDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecordMarkerDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_RecordMarkerDecisionAttributes{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueAsNewWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContinueAsNewWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_ContinueAsNewWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_StartChildWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_SignalExternalWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsertWorkflowSearchAttributesDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpsertWorkflowSearchAttributesDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_UpsertWorkflowSearchAttributesDecisionAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleActivityTaskDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleActivityTaskDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleActivityTaskDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToStartTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestLocalDispatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestLocalDispatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTimerDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTimerDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTimerDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToFireTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToFireTimeout == nil {
				m.StartToFireTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToFireTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelActivityTaskDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelActivityTaskDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelActivityTaskDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTimerDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTimerDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTimerDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordMarkerDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordMarkerDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordMarkerDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionStartToCloseTimeout == nil {
				m.ExecutionStartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ExecutionStartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskStartToCloseTimeout == nil {
				m.TaskStartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.TaskStartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackoffStartInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackoffStartInterval == nil {
				m.BackoffStartInterval = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.BackoffStartInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &Payload{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionStartToCloseTimeout == nil {
				m.ExecutionStartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ExecutionStartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskStartToCloseTimeout == nil {
				m.TaskStartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.TaskStartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDecision(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDecision
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecision
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDecision
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDecision
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDecision
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDecision        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDecision          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDecision = fmt.Errorf("proto: unexpected end of group")
)
