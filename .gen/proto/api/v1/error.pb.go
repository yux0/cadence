// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/error.proto

package apiv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionAlreadyStartedError struct {
	StartRequestId       string   `protobuf:"bytes,1,opt,name=start_request_id,json=startRequestId,proto3" json:"start_request_id,omitempty"`
	RunId                string   `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowExecutionAlreadyStartedError) Reset()         { *m = WorkflowExecutionAlreadyStartedError{} }
func (m *WorkflowExecutionAlreadyStartedError) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionAlreadyStartedError) ProtoMessage()    {}
func (*WorkflowExecutionAlreadyStartedError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{0}
}
func (m *WorkflowExecutionAlreadyStartedError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionAlreadyStartedError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionAlreadyStartedError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionAlreadyStartedError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionAlreadyStartedError.Merge(m, src)
}
func (m *WorkflowExecutionAlreadyStartedError) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionAlreadyStartedError) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionAlreadyStartedError.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionAlreadyStartedError proto.InternalMessageInfo

func (m *WorkflowExecutionAlreadyStartedError) GetStartRequestId() string {
	if m != nil {
		return m.StartRequestId
	}
	return ""
}

func (m *WorkflowExecutionAlreadyStartedError) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type EntityNotExistsError struct {
	CurrentCluster       string   `protobuf:"bytes,1,opt,name=current_cluster,json=currentCluster,proto3" json:"current_cluster,omitempty"`
	ActiveCluster        string   `protobuf:"bytes,2,opt,name=active_cluster,json=activeCluster,proto3" json:"active_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityNotExistsError) Reset()         { *m = EntityNotExistsError{} }
func (m *EntityNotExistsError) String() string { return proto.CompactTextString(m) }
func (*EntityNotExistsError) ProtoMessage()    {}
func (*EntityNotExistsError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{1}
}
func (m *EntityNotExistsError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityNotExistsError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityNotExistsError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityNotExistsError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityNotExistsError.Merge(m, src)
}
func (m *EntityNotExistsError) XXX_Size() int {
	return m.Size()
}
func (m *EntityNotExistsError) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityNotExistsError.DiscardUnknown(m)
}

var xxx_messageInfo_EntityNotExistsError proto.InternalMessageInfo

func (m *EntityNotExistsError) GetCurrentCluster() string {
	if m != nil {
		return m.CurrentCluster
	}
	return ""
}

func (m *EntityNotExistsError) GetActiveCluster() string {
	if m != nil {
		return m.ActiveCluster
	}
	return ""
}

type DomainNotActiveError struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	CurrentCluster       string   `protobuf:"bytes,2,opt,name=current_cluster,json=currentCluster,proto3" json:"current_cluster,omitempty"`
	ActiveCluster        string   `protobuf:"bytes,3,opt,name=active_cluster,json=activeCluster,proto3" json:"active_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainNotActiveError) Reset()         { *m = DomainNotActiveError{} }
func (m *DomainNotActiveError) String() string { return proto.CompactTextString(m) }
func (*DomainNotActiveError) ProtoMessage()    {}
func (*DomainNotActiveError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{2}
}
func (m *DomainNotActiveError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainNotActiveError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainNotActiveError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainNotActiveError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainNotActiveError.Merge(m, src)
}
func (m *DomainNotActiveError) XXX_Size() int {
	return m.Size()
}
func (m *DomainNotActiveError) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainNotActiveError.DiscardUnknown(m)
}

var xxx_messageInfo_DomainNotActiveError proto.InternalMessageInfo

func (m *DomainNotActiveError) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainNotActiveError) GetCurrentCluster() string {
	if m != nil {
		return m.CurrentCluster
	}
	return ""
}

func (m *DomainNotActiveError) GetActiveCluster() string {
	if m != nil {
		return m.ActiveCluster
	}
	return ""
}

type ClientVersionNotSupportedError struct {
	FeatureVersion       string   `protobuf:"bytes,1,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	ClientImpl           string   `protobuf:"bytes,2,opt,name=client_impl,json=clientImpl,proto3" json:"client_impl,omitempty"`
	SupportedVersions    string   `protobuf:"bytes,3,opt,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientVersionNotSupportedError) Reset()         { *m = ClientVersionNotSupportedError{} }
func (m *ClientVersionNotSupportedError) String() string { return proto.CompactTextString(m) }
func (*ClientVersionNotSupportedError) ProtoMessage()    {}
func (*ClientVersionNotSupportedError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{3}
}
func (m *ClientVersionNotSupportedError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientVersionNotSupportedError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientVersionNotSupportedError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientVersionNotSupportedError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientVersionNotSupportedError.Merge(m, src)
}
func (m *ClientVersionNotSupportedError) XXX_Size() int {
	return m.Size()
}
func (m *ClientVersionNotSupportedError) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientVersionNotSupportedError.DiscardUnknown(m)
}

var xxx_messageInfo_ClientVersionNotSupportedError proto.InternalMessageInfo

func (m *ClientVersionNotSupportedError) GetFeatureVersion() string {
	if m != nil {
		return m.FeatureVersion
	}
	return ""
}

func (m *ClientVersionNotSupportedError) GetClientImpl() string {
	if m != nil {
		return m.ClientImpl
	}
	return ""
}

func (m *ClientVersionNotSupportedError) GetSupportedVersions() string {
	if m != nil {
		return m.SupportedVersions
	}
	return ""
}

type CancellationAlreadyRequestedError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancellationAlreadyRequestedError) Reset()         { *m = CancellationAlreadyRequestedError{} }
func (m *CancellationAlreadyRequestedError) String() string { return proto.CompactTextString(m) }
func (*CancellationAlreadyRequestedError) ProtoMessage()    {}
func (*CancellationAlreadyRequestedError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{4}
}
func (m *CancellationAlreadyRequestedError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancellationAlreadyRequestedError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancellationAlreadyRequestedError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancellationAlreadyRequestedError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationAlreadyRequestedError.Merge(m, src)
}
func (m *CancellationAlreadyRequestedError) XXX_Size() int {
	return m.Size()
}
func (m *CancellationAlreadyRequestedError) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationAlreadyRequestedError.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationAlreadyRequestedError proto.InternalMessageInfo

type DomainAlreadyExistsError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainAlreadyExistsError) Reset()         { *m = DomainAlreadyExistsError{} }
func (m *DomainAlreadyExistsError) String() string { return proto.CompactTextString(m) }
func (*DomainAlreadyExistsError) ProtoMessage()    {}
func (*DomainAlreadyExistsError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{5}
}
func (m *DomainAlreadyExistsError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAlreadyExistsError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAlreadyExistsError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAlreadyExistsError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAlreadyExistsError.Merge(m, src)
}
func (m *DomainAlreadyExistsError) XXX_Size() int {
	return m.Size()
}
func (m *DomainAlreadyExistsError) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAlreadyExistsError.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAlreadyExistsError proto.InternalMessageInfo

type LimitExceededError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LimitExceededError) Reset()         { *m = LimitExceededError{} }
func (m *LimitExceededError) String() string { return proto.CompactTextString(m) }
func (*LimitExceededError) ProtoMessage()    {}
func (*LimitExceededError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{6}
}
func (m *LimitExceededError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitExceededError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitExceededError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitExceededError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitExceededError.Merge(m, src)
}
func (m *LimitExceededError) XXX_Size() int {
	return m.Size()
}
func (m *LimitExceededError) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitExceededError.DiscardUnknown(m)
}

var xxx_messageInfo_LimitExceededError proto.InternalMessageInfo

type QueryFailedError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFailedError) Reset()         { *m = QueryFailedError{} }
func (m *QueryFailedError) String() string { return proto.CompactTextString(m) }
func (*QueryFailedError) ProtoMessage()    {}
func (*QueryFailedError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{7}
}
func (m *QueryFailedError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailedError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailedError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailedError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailedError.Merge(m, src)
}
func (m *QueryFailedError) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailedError) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailedError.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailedError proto.InternalMessageInfo

type ServiceBusyError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceBusyError) Reset()         { *m = ServiceBusyError{} }
func (m *ServiceBusyError) String() string { return proto.CompactTextString(m) }
func (*ServiceBusyError) ProtoMessage()    {}
func (*ServiceBusyError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f91786c9aff272, []int{8}
}
func (m *ServiceBusyError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceBusyError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceBusyError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceBusyError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceBusyError.Merge(m, src)
}
func (m *ServiceBusyError) XXX_Size() int {
	return m.Size()
}
func (m *ServiceBusyError) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceBusyError.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceBusyError proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorkflowExecutionAlreadyStartedError)(nil), "uber.cadence.api.v1.WorkflowExecutionAlreadyStartedError")
	proto.RegisterType((*EntityNotExistsError)(nil), "uber.cadence.api.v1.EntityNotExistsError")
	proto.RegisterType((*DomainNotActiveError)(nil), "uber.cadence.api.v1.DomainNotActiveError")
	proto.RegisterType((*ClientVersionNotSupportedError)(nil), "uber.cadence.api.v1.ClientVersionNotSupportedError")
	proto.RegisterType((*CancellationAlreadyRequestedError)(nil), "uber.cadence.api.v1.CancellationAlreadyRequestedError")
	proto.RegisterType((*DomainAlreadyExistsError)(nil), "uber.cadence.api.v1.DomainAlreadyExistsError")
	proto.RegisterType((*LimitExceededError)(nil), "uber.cadence.api.v1.LimitExceededError")
	proto.RegisterType((*QueryFailedError)(nil), "uber.cadence.api.v1.QueryFailedError")
	proto.RegisterType((*ServiceBusyError)(nil), "uber.cadence.api.v1.ServiceBusyError")
}

func init() { proto.RegisterFile("uber/cadence/api/v1/error.proto", fileDescriptor_c8f91786c9aff272) }

var fileDescriptor_c8f91786c9aff272 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0x22, 0x22, 0x18, 0x44, 0x5b, 0x4c, 0x80, 0x8a, 0x43, 0x0a, 0x06, 0xd4, 0x5e,
	0xb0, 0x15, 0x71, 0xe4, 0x94, 0x84, 0x20, 0x45, 0x42, 0x55, 0x69, 0x24, 0x90, 0xb8, 0x58, 0x9b,
	0xf5, 0x24, 0x8c, 0xb0, 0x77, 0xcd, 0xec, 0xae, 0x49, 0x2e, 0xbc, 0x07, 0x6f, 0xc4, 0x91, 0x47,
	0x40, 0x79, 0x12, 0x64, 0x7b, 0x5d, 0x82, 0x94, 0x03, 0xc7, 0xfd, 0xe6, 0xdf, 0x7f, 0x66, 0x77,
	0x7e, 0x38, 0x75, 0x0b, 0xe4, 0x44, 0x8a, 0x0c, 0x95, 0xc4, 0x44, 0x94, 0x94, 0x54, 0xc3, 0x04,
	0x99, 0x35, 0xc7, 0x25, 0x6b, 0xab, 0xc3, 0xfb, 0xb5, 0x20, 0xf6, 0x82, 0x58, 0x94, 0x14, 0x57,
	0xc3, 0x68, 0x05, 0xcf, 0x3f, 0x6a, 0xfe, 0xb2, 0xcc, 0xf5, 0xb7, 0xe9, 0x1a, 0xa5, 0xb3, 0xa4,
	0xd5, 0x28, 0x67, 0x14, 0xd9, 0x66, 0x6e, 0x05, 0x5b, 0xcc, 0xa6, 0xb5, 0x45, 0x78, 0x0e, 0xc7,
	0xa6, 0x3e, 0xa7, 0x8c, 0x5f, 0x1d, 0x1a, 0x9b, 0x52, 0x76, 0x12, 0x3c, 0x09, 0xce, 0x6f, 0x5f,
	0x1d, 0x36, 0xfc, 0xaa, 0xc5, 0xb3, 0x2c, 0x7c, 0x00, 0x3d, 0x76, 0xaa, 0xae, 0x1f, 0x34, 0xf5,
	0x9b, 0xec, 0xd4, 0x2c, 0x8b, 0x96, 0xd0, 0x9f, 0x2a, 0x4b, 0x76, 0x73, 0xa1, 0xed, 0x74, 0x4d,
	0xc6, 0x9a, 0xd6, 0xf8, 0x0c, 0x8e, 0xa4, 0x63, 0x46, 0x65, 0x53, 0x99, 0x3b, 0x63, 0x91, 0x3b,
	0x5f, 0x8f, 0x27, 0x2d, 0x0d, 0x5f, 0xc0, 0xa1, 0x90, 0x96, 0x2a, 0xbc, 0xd6, 0xb5, 0xfe, 0x77,
	0x5b, 0xea, 0x65, 0xd1, 0x77, 0xe8, 0xbf, 0xd1, 0x85, 0x20, 0x75, 0xa1, 0xed, 0xa8, 0xa9, 0xb4,
	0x7d, 0x1e, 0x42, 0x2f, 0x6b, 0xb8, 0xb7, 0xf7, 0xa7, 0x7d, 0xfd, 0x0f, 0xfe, 0xb3, 0xff, 0x8d,
	0x7d, 0xfd, 0x7f, 0x04, 0x30, 0x98, 0xe4, 0x84, 0xca, 0x7e, 0x40, 0x36, 0xa4, 0xeb, 0x39, 0xe6,
	0xae, 0x2c, 0xf5, 0xdf, 0xbf, 0x3c, 0x83, 0xa3, 0x25, 0x0a, 0xeb, 0x18, 0xd3, 0xaa, 0xd5, 0x74,
	0x4f, 0xf6, 0xd8, 0xdf, 0x0c, 0x4f, 0xe1, 0x8e, 0x6c, 0xac, 0x52, 0x2a, 0xca, 0xdc, 0xcf, 0x05,
	0x2d, 0x9a, 0x15, 0x65, 0x1e, 0xbe, 0x84, 0xd0, 0x74, 0xde, 0x9d, 0x97, 0xf1, 0x73, 0xdd, 0xbb,
	0xae, 0x78, 0x3b, 0x13, 0x3d, 0x83, 0xa7, 0x13, 0xa1, 0x24, 0xe6, 0xb9, 0xd8, 0xd9, 0xb3, 0x5f,
	0x9d, 0x9f, 0x2e, 0x7a, 0x0c, 0x27, 0xed, 0x07, 0xfa, 0xf2, 0xce, 0xb2, 0xa2, 0x3e, 0x84, 0xef,
	0xa8, 0x20, 0x3b, 0x5d, 0x4b, 0xc4, 0xac, 0xbb, 0x11, 0xc2, 0xf1, 0x7b, 0x87, 0xbc, 0x79, 0x2b,
	0x28, 0xdf, 0x61, 0x73, 0xe4, 0x8a, 0x24, 0x8e, 0x9d, 0xd9, 0x34, 0x6c, 0xbc, 0xf8, 0xb9, 0x1d,
	0x04, 0xbf, 0xb6, 0x83, 0xe0, 0xf7, 0x76, 0x10, 0xc0, 0x23, 0xa9, 0x8b, 0x78, 0x4f, 0x24, 0xc7,
	0xb7, 0x46, 0x25, 0x5d, 0xd6, 0x89, 0xbd, 0x0c, 0x3e, 0x25, 0x2b, 0xb2, 0x9f, 0xdd, 0x22, 0x96,
	0xba, 0x48, 0xfe, 0xc9, 0x77, 0xbc, 0x42, 0x95, 0x34, 0xb9, 0xf6, 0x51, 0x7f, 0x2d, 0x4a, 0xaa,
	0x86, 0x8b, 0x5e, 0xc3, 0x5e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x04, 0x40, 0x4c, 0xad, 0x0e,
	0x03, 0x00, 0x00,
}

func (m *WorkflowExecutionAlreadyStartedError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionAlreadyStartedError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionAlreadyStartedError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintError(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartRequestId) > 0 {
		i -= len(m.StartRequestId)
		copy(dAtA[i:], m.StartRequestId)
		i = encodeVarintError(dAtA, i, uint64(len(m.StartRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntityNotExistsError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityNotExistsError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityNotExistsError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActiveCluster) > 0 {
		i -= len(m.ActiveCluster)
		copy(dAtA[i:], m.ActiveCluster)
		i = encodeVarintError(dAtA, i, uint64(len(m.ActiveCluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentCluster) > 0 {
		i -= len(m.CurrentCluster)
		copy(dAtA[i:], m.CurrentCluster)
		i = encodeVarintError(dAtA, i, uint64(len(m.CurrentCluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainNotActiveError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainNotActiveError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainNotActiveError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActiveCluster) > 0 {
		i -= len(m.ActiveCluster)
		copy(dAtA[i:], m.ActiveCluster)
		i = encodeVarintError(dAtA, i, uint64(len(m.ActiveCluster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentCluster) > 0 {
		i -= len(m.CurrentCluster)
		copy(dAtA[i:], m.CurrentCluster)
		i = encodeVarintError(dAtA, i, uint64(len(m.CurrentCluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintError(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientVersionNotSupportedError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientVersionNotSupportedError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientVersionNotSupportedError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SupportedVersions) > 0 {
		i -= len(m.SupportedVersions)
		copy(dAtA[i:], m.SupportedVersions)
		i = encodeVarintError(dAtA, i, uint64(len(m.SupportedVersions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientImpl) > 0 {
		i -= len(m.ClientImpl)
		copy(dAtA[i:], m.ClientImpl)
		i = encodeVarintError(dAtA, i, uint64(len(m.ClientImpl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeatureVersion) > 0 {
		i -= len(m.FeatureVersion)
		copy(dAtA[i:], m.FeatureVersion)
		i = encodeVarintError(dAtA, i, uint64(len(m.FeatureVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancellationAlreadyRequestedError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancellationAlreadyRequestedError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancellationAlreadyRequestedError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DomainAlreadyExistsError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAlreadyExistsError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAlreadyExistsError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *LimitExceededError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitExceededError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitExceededError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *QueryFailedError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailedError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailedError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ServiceBusyError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceBusyError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceBusyError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	offset -= sovError(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionAlreadyStartedError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartRequestId)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntityNotExistsError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentCluster)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.ActiveCluster)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DomainNotActiveError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.CurrentCluster)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.ActiveCluster)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientVersionNotSupportedError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeatureVersion)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.ClientImpl)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.SupportedVersions)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancellationAlreadyRequestedError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DomainAlreadyExistsError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LimitExceededError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryFailedError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceBusyError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovError(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowExecutionAlreadyStartedError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStartedError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStartedError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityNotExistsError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityNotExistsError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityNotExistsError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainNotActiveError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainNotActiveError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainNotActiveError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientVersionNotSupportedError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientVersionNotSupportedError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientVersionNotSupportedError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedVersions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancellationAlreadyRequestedError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancellationAlreadyRequestedError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancellationAlreadyRequestedError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAlreadyExistsError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAlreadyExistsError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAlreadyExistsError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitExceededError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitExceededError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitExceededError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailedError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFailedError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFailedError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceBusyError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceBusyError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceBusyError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupError
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthError
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthError        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupError = fmt.Errorf("proto: unexpected end of group")
)
